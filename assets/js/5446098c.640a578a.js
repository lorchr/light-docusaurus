"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[66324],{28453:(n,e,a)=>{a.d(e,{R:()=>r,x:()=>s});var t=a(96540);const i={},l=t.createContext(i);function r(n){const e=t.useContext(l);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(l.Provider,{value:e},n.children)}},78529:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rabbitmq/Spring-Boot-Cannal-RabbitMQ","title":"Spring-Boot-Cannal-RabbitMQ","description":"- SpringBoot\u6574\u5408Canal+RabbitMQ\u76d1\u542c\u6570\u636e\u53d8\u66f4","source":"@site/middleware/rabbitmq/3-Spring-Boot-Cannal-RabbitMQ.md","sourceDirName":"rabbitmq","slug":"/rabbitmq/Spring-Boot-Cannal-RabbitMQ","permalink":"/middleware/rabbitmq/Spring-Boot-Cannal-RabbitMQ","draft":false,"unlisted":false,"editUrl":"https://github.com/lorchr/light-docusaurus/tree/main/middleware/rabbitmq/3-Spring-Boot-Cannal-RabbitMQ.md","tags":[],"version":"current","lastUpdatedBy":"Lorchr","lastUpdatedAt":1749723566000,"sidebarPosition":3,"frontMatter":{},"sidebar":"middleware","previous":{"title":"Spring-Cannal-RabbitMQ","permalink":"/middleware/rabbitmq/Spring-Cannal-RabbitMQ"},"next":{"title":"RocketMQ","permalink":"/middleware/category/rocketmq"}}');var i=a(74848),l=a(28453);const r={},s=void 0,c={},o=[{value:"\u9700\u6c42",id:"\u9700\u6c42",level:2},{value:"\u6b65\u9aa4",id:"\u6b65\u9aa4",level:2},{value:"\u73af\u5883\u642d\u5efa",id:"\u73af\u5883\u642d\u5efa",level:2},{value:"\u73af\u5883\u642d\u5efa\u57fa\u4e8edocker-compose\uff1a",id:"\u73af\u5883\u642d\u5efa\u57fa\u4e8edocker-compose",level:3},{value:"canal.properties",id:"canalproperties",level:3},{value:"instance.properties",id:"instanceproperties",level:3},{value:"\u4fee\u6539canal\u914d\u7f6e\u6587\u4ef6",id:"\u4fee\u6539canal\u914d\u7f6e\u6587\u4ef6",level:3},{value:"\u6574\u5408SpringBoot Canal\u5b9e\u73b0\u5ba2\u6237\u7aef",id:"\u6574\u5408springboot-canal\u5b9e\u73b0\u5ba2\u6237\u7aef",level:2},{value:"Maven\u4f9d\u8d56\uff1a",id:"maven\u4f9d\u8d56",level:3},{value:"\u65b0\u589e\u7ec4\u4ef6\u5e76\u542f\u52a8\uff1a",id:"\u65b0\u589e\u7ec4\u4ef6\u5e76\u542f\u52a8",level:3},{value:"\u542f\u52a8\u7c7bApplication\uff1a",id:"\u542f\u52a8\u7c7bapplication",level:3},{value:"Canal\u6574\u5408RabbitMQ",id:"canal\u6574\u5408rabbitmq",level:2},{value:"\u4fee\u6539<code>canal.properties</code>\u4e2d\u7684<code>serverMode</code>\uff1a",id:"\u4fee\u6539canalproperties\u4e2d\u7684servermode",level:3},{value:"\u4fee\u6539<code>instance.properties</code>\u4e2d\u7684<code>topic</code>\uff1a",id:"\u4fee\u6539instanceproperties\u4e2d\u7684topic",level:3},{value:"\u7136\u540e\u627e\u5230\u5173\u4e8eRabbitMQ\u7684\u914d\u7f6e\uff1a",id:"\u7136\u540e\u627e\u5230\u5173\u4e8erabbitmq\u7684\u914d\u7f6e",level:3},{value:"SpringBoot\u6574\u5408RabbitMQ",id:"springboot\u6574\u5408rabbitmq",level:2},{value:"\u4f9d\u8d56\uff1a",id:"\u4f9d\u8d56",level:3},{value:"application.yml \uff1a",id:"applicationyml-",level:3},{value:"RabbitMQ\u914d\u7f6e\u7c7b\uff1a",id:"rabbitmq\u914d\u7f6e\u7c7b",level:3},{value:"Canal\u6d88\u606f\u751f\u4ea7\u8005\uff1a",id:"canal\u6d88\u606f\u751f\u4ea7\u8005",level:3},{value:"Canal\u6d88\u606f\u6d88\u8d39\u8005\uff1a",id:"canal\u6d88\u606f\u6d88\u8d39\u8005",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:"https://mp.weixin.qq.com/s/HBsksd2NQMQUmw5wfGZeRw",children:"SpringBoot\u6574\u5408Canal+RabbitMQ\u76d1\u542c\u6570\u636e\u53d8\u66f4"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u9700\u6c42",children:"\u9700\u6c42"}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u60f3\u8981\u5728SpringBoot\u4e2d\u91c7\u7528\u4e00\u79cd\u4e0e\u4e1a\u52a1\u4ee3\u7801\u89e3\u8026\u5408\u7684\u65b9\u5f0f\uff0c\u6765\u5b9e\u73b0\u6570\u636e\u7684\u53d8\u66f4\u8bb0\u5f55\uff0c\u8bb0\u5f55\u7684\u5185\u5bb9\u662f\u65b0\u6570\u636e\uff0c\u5982\u679c\u662f\u66f4\u65b0\u64cd\u4f5c\u8fd8\u5f97\u6709\u65e7\u6570\u636e\u5185\u5bb9\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u7ecf\u8fc7\u8c03\u7814\u53d1\u73b0\uff0c\u4f7f\u7528Canal\u6765\u76d1\u542cMySQL\u7684binlog\u53d8\u5316\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u9700\u6c42\uff0c\u53ef\u662f\u5728\u76d1\u542c\u5230\u53d8\u5316\u540e\u9700\u8981\u9a6c\u4e0a\u4fdd\u5b58\u53d8\u66f4\u8bb0\u5f55\uff0c\u9664\u975e\u518d\u505a\u4e00\u4e9b\u903b\u8f91\u5904\u7406\uff0c\u4e8e\u662f\u6211\u53c8\u7ed3\u5408\u4e86RabbitMQ\u6765\u5904\u7406\u4fdd\u5b58\u53d8\u66f4\u8bb0\u5f55\u7684\u64cd\u4f5c\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"\u6b65\u9aa4",children:"\u6b65\u9aa4"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"\u542f\u52a8MySQL\u73af\u5883\uff0c\u5e76\u5f00\u542fbinlog"}),"\n",(0,i.jsx)(e.li,{children:"\u542f\u52a8Canal\u73af\u5883\uff0c\u4e3a\u5176\u521b\u5efa\u4e00\u4e2aMySQL\u8d26\u53f7\uff0c\u7136\u540e\u4ee5Slave\u7684\u5f62\u5f0f\u8fde\u63a5MySQL"}),"\n",(0,i.jsx)(e.li,{children:"Canal\u670d\u52a1\u6a21\u5f0f\u8bbe\u4e3aTCP\uff0c\u7528Java\u7f16\u5199\u5ba2\u6237\u7aef\u4ee3\u7801\uff0c\u76d1\u542cMySQL\u7684binlog\u4fee\u6539"}),"\n",(0,i.jsx)(e.li,{children:"Canal\u670d\u52a1\u6a21\u5f0f\u8bbe\u4e3aRabbitMQ\uff0c\u542f\u52a8RabbitMQ\u73af\u5883\uff0c\u914d\u7f6eCanal\u548cRabbitMQ\u7684\u8fde\u63a5\uff0c\u7528\u6d88\u606f\u961f\u5217\u53bb\u63a5\u6536binlog\u4fee\u6539\u4e8b\u4ef6"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u73af\u5883\u642d\u5efa",children:"\u73af\u5883\u642d\u5efa"}),"\n",(0,i.jsx)(e.h3,{id:"\u73af\u5883\u642d\u5efa\u57fa\u4e8edocker-compose",children:"\u73af\u5883\u642d\u5efa\u57fa\u4e8edocker-compose\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:'version: "3"  \nservices:  \n    mysql:  \n        network_mode: mynetwork  \n        container_name: mymysql  \n        ports:  \n            - 3306:3306  \n        restart: always  \n        volumes:  \n            - /etc/localtime:/etc/localtime  \n            - /home/mycontainers/mymysql/data:/data  \n            - /home/mycontainers/mymysql/mysql:/var/lib/mysql  \n            - /home/mycontainers/mymysql/conf:/etc/mysql  \n        environment:  \n            - MYSQL_ROOT_PASSWORD=root  \n        command:   \n            --character-set-server=utf8mb4  \n            --collation-server=utf8mb4_unicode_ci  \n            --log-bin=/var/lib/mysql/mysql-bin  \n            --server-id=1  \n            --binlog-format=ROW  \n            --expire_logs_days=7  \n            --max_binlog_size=500M  \n        image: mysql:5.7.20  \n    rabbitmq:     \n        container_name: myrabbit  \n        ports:  \n            - 15672:15672  \n            - 5672:5672  \n        restart: always  \n        volumes:  \n            - /etc/localtime:/etc/localtime  \n            - /home/mycontainers/myrabbit/rabbitmq:/var/lib/rabbitmq  \n        network_mode: mynetwork  \n        environment:  \n            - RABBITMQ_DEFAULT_USER=admin  \n            - RABBITMQ_DEFAULT_PASS=123456  \n        image: rabbitmq:3.8-management  \n    canal-server:  \n        container_name: canal-server  \n        restart: always  \n        ports:  \n            - 11110:11110  \n            - 11111:11111  \n            - 11112:11112  \n        volumes:  \n            - /home/mycontainers/canal-server/conf/canal.properties:/home/admin/canal-server/conf/canal.properties  \n            - /home/mycontainers/canal-server/conf/instance.properties:/home/admin/canal-server/conf/example/instance.properties  \n            - /home/mycontainers/canal-server/logs:/home/admin/canal-server/logs  \n        network_mode: mynetwork  \n        depends_on:  \n            - mysql  \n            - rabbitmq  \n            # - canal-admin  \n        image: canal/canal-server:v1.1.5  \n'})}),"\n",(0,i.jsxs)(e.p,{children:["\u6211\u4eec\u9700\u8981\u4fee\u6539\u4e0bCanal\u73af\u5883\u7684\u914d\u7f6e\u6587\u4ef6\uff1a",(0,i.jsx)(e.code,{children:"canal.properties"}),"\u548c",(0,i.jsx)(e.code,{children:"instance.properties"}),"\uff0c\u6620\u5c04Canal\u4e2d\u7684\u4ee5\u4e0b\u4e24\u4e2a\u8def\u5f84\uff1a"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"/home/admin/canal-server/conf/canal.properties"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c",(0,i.jsx)(e.code,{children:"canal.destinations"}),"\u610f\u601d\u662fserver\u4e0a\u90e8\u7f72\u7684instance\u5217\u8868\uff0c"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:"/home/admin/canal-server/conf/example/instance.properties"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u8fd9\u91cc\u7684",(0,i.jsx)(e.code,{children:"/example"}),"\u662f\u6307instance\u5373\u5b9e\u4f8b\u540d\uff0c\u8981\u548c\u4e0a\u9762",(0,i.jsx)(e.code,{children:"canal.properties"}),"\u5185instance\u914d\u7f6e\u5bf9\u5e94\uff0ccanal\u4f1a\u4e3a\u5b9e\u4f8b\u521b\u5efa\u5bf9\u5e94\u7684\u6587\u4ef6\u5939\uff0c\u4e00\u4e2aClient\u5bf9\u5e94\u4e00\u4e2a\u5b9e\u4f8b"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u4ee5\u4e0b\u662f\u6211\u4eec\u9700\u8981\u51c6\u5907\u7684\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u5177\u4f53\u5185\u5bb9\uff1a"}),"\n",(0,i.jsx)(e.h3,{id:"canalproperties",children:"canal.properties"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"################################################  \n########     common argument   ############  \n################################################  \n# tcp bind ip  \ncanal.ip =  \n# register ip to zookeeper  \ncanal.register.ip =  \ncanal.port = 11111  \ncanal.metrics.pull.port = 11112  \n# canal instance user/passwd  \n# canal.user = canal  \n# canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458  \n  \n# canal admin config  \n# canal.admin.manager = canal-admin:8089  \n  \n# canal.admin.port = 11110  \n# canal.admin.user = admin  \n# canal.admin.passwd = 6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9  \n  \n# admin auto register \u81ea\u52a8\u6ce8\u518c  \n# canal.admin.register.auto = true  \n# \u96c6\u7fa4\u540d\uff0c\u5355\u673a\u5219\u4e0d\u5199  \n# canal.admin.register.cluster =  \n# Canal Server \u540d\u5b57  \n# canal.admin.register.name = canal-admin  \n  \ncanal.zkServers =  \n# flush data to zk  \ncanal.zookeeper.flush.period = 1000  \ncanal.withoutNetty = false  \n# tcp, kafka, rocketMQ, rabbitMQ, pulsarMQ  \ncanal.serverMode = tcp  \n# flush meta cursor/parse position to file  \ncanal.file.data.dir = ${canal.conf.dir}  \ncanal.file.flush.period = 1000  \n# memory store RingBuffer size, should be Math.pow(2,n)  \ncanal.instance.memory.buffer.size = 16384  \n# memory store RingBuffer used memory unit size , default 1kb  \ncanal.instance.memory.buffer.memunit = 1024   \n# meory store gets mode used MEMSIZE or ITEMSIZE  \ncanal.instance.memory.batch.mode = MEMSIZE  \ncanal.instance.memory.rawEntry = true  \n  \n# detecing config  \ncanal.instance.detecting.enable = false  \n#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()  \ncanal.instance.detecting.sql = select 1  \ncanal.instance.detecting.interval.time = 3  \ncanal.instance.detecting.retry.threshold = 3  \ncanal.instance.detecting.heartbeatHaEnable = false  \n  \n# support maximum transaction size, more than the size of the transaction will be cut into multiple transactions delivery  \ncanal.instance.transaction.size =  1024  \n# mysql fallback connected to new master should fallback times  \ncanal.instance.fallbackIntervalInSeconds = 60  \n  \n# network config  \ncanal.instance.network.receiveBufferSize = 16384  \ncanal.instance.network.sendBufferSize = 16384  \ncanal.instance.network.soTimeout = 30  \n  \n# binlog filter config  \ncanal.instance.filter.druid.ddl = true  \ncanal.instance.filter.query.dcl = false  \ncanal.instance.filter.query.dml = false  \ncanal.instance.filter.query.ddl = false  \ncanal.instance.filter.table.error = false  \ncanal.instance.filter.rows = false  \ncanal.instance.filter.transaction.entry = false  \ncanal.instance.filter.dml.insert = false  \ncanal.instance.filter.dml.update = false  \ncanal.instance.filter.dml.delete = false  \n  \n# binlog format/image check  \ncanal.instance.binlog.format = ROW,STATEMENT,MIXED   \ncanal.instance.binlog.image = FULL,MINIMAL,NOBLOB  \n  \n# binlog ddl isolation  \ncanal.instance.get.ddl.isolation = false  \n  \n# parallel parser config  \ncanal.instance.parser.parallel = true  \n# concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()  \ncanal.instance.parser.parallelThreadSize = 16  \n# disruptor ringbuffer size, must be power of 2  \ncanal.instance.parser.parallelBufferSize = 256  \n  \n# table meta tsdb info  \ncanal.instance.tsdb.enable = true  \ncanal.instance.tsdb.dir = ${canal.file.data.dir:../conf}/${canal.instance.destination:}  \ncanal.instance.tsdb.url = jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;  \ncanal.instance.tsdb.dbUsername = canal  \ncanal.instance.tsdb.dbPassword = canal  \n# dump snapshot interval, default 24 hour  \ncanal.instance.tsdb.snapshot.interval = 24  \n# purge snapshot expire , default 360 hour(15 days)  \ncanal.instance.tsdb.snapshot.expire = 360  \n  \n################################################  \n########     destinations    ############  \n################################################  \ncanal.destinations = canal-exchange  \n# conf root dir  \ncanal.conf.dir = ../conf  \n# auto scan instance dir add/remove and start/stop instance  \ncanal.auto.scan = true  \ncanal.auto.scan.interval = 5  \n# set this value to 'true' means that when binlog pos not found, skip to latest.  \n# WARN: pls keep 'false' in production env, or if you know what you want.  \ncanal.auto.reset.latest.pos.mode = false  \n  \ncanal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml  \n#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml  \n  \ncanal.instance.global.mode = spring  \ncanal.instance.global.lazy = false  \ncanal.instance.global.manager.address = ${canal.admin.manager}  \n#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml  \ncanal.instance.global.spring.xml = classpath:spring/file-instance.xml  \n#canal.instance.global.spring.xml = classpath:spring/default-instance.xml  \n  \n#################################################  \n########         MQ Properties      ############  \n#################################################  \n# aliyun ak/sk , support rds/mq  \ncanal.aliyun.accessKey =  \ncanal.aliyun.secretKey =  \ncanal.aliyun.uid=  \n  \ncanal.mq.flatMessage = true  \ncanal.mq.canalBatchSize = 50  \ncanal.mq.canalGetTimeout = 100  \n# Set this value to \"cloud\", if you want open message trace feature in aliyun.  \ncanal.mq.accessChannel = local  \n  \ncanal.mq.database.hash = true  \ncanal.mq.send.thread.size = 30  \ncanal.mq.build.thread.size = 8  \n  \n#################################################  \n########         RabbitMQ       ############  \n#################################################  \nrabbitmq.host = myrabbit  \nrabbitmq.virtual.host = /  \nrabbitmq.exchange = canal-exchange  \nrabbitmq.username = admin  \nrabbitmq.password = RabbitMQ\u5bc6\u7801  \nrabbitmq.deliveryMode =  \n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u6b64\u65f6",(0,i.jsx)(e.code,{children:"canal.serverMode = tcp"}),"\uff0c\u5373TCP\u76f4\u8fde\uff0c\u6211\u4eec\u5148\u5f00\u542f\u8fd9\u4e2a\u670d\u52a1\uff0c\u7136\u540e\u624b\u5199Java\u5ba2\u6237\u7aef\u4ee3\u7801\u53bb\u8fde\u63a5\u5b83\uff0c\u7b49\u4e0b\u518d\u6539\u4e3aRabbitMQ\u3002"]}),"\n",(0,i.jsx)(e.p,{children:"\u901a\u8fc7\u6ce8\u91ca\u53ef\u4ee5\u770b\u5230\uff0ccanal\u652f\u6301\u7684\u670d\u52a1\u6a21\u5f0f\u6709\uff1atcp, kafka, rocketMQ, rabbitMQ, pulsarMQ\uff0c\u5373\u4e3b\u6d41\u7684\u6d88\u606f\u961f\u5217\u90fd\u652f\u6301\u3002"}),"\n",(0,i.jsx)(e.h3,{id:"instanceproperties",children:"instance.properties"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"################################################  \n# mysql serverId , v1.0.26+ will autoGen  \n#canal.instance.mysql.slaveId=123  \n  \n# enable gtid use true/false  \ncanal.instance.gtidon=false  \n  \n# position info  \ncanal.instance.master.address=mymysql:3306  \ncanal.instance.master.journal.name=  \ncanal.instance.master.position=  \ncanal.instance.master.timestamp=  \ncanal.instance.master.gtid=  \n  \n# rds oss binlog  \ncanal.instance.rds.accesskey=  \ncanal.instance.rds.secretkey=  \ncanal.instance.rds.instanceId=  \n  \n# table meta tsdb info  \ncanal.instance.tsdb.enable=true  \n#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb  \n#canal.instance.tsdb.dbUsername=canal  \n#canal.instance.tsdb.dbPassword=canal  \n  \n#canal.instance.standby.address =  \n#canal.instance.standby.journal.name =  \n#canal.instance.standby.position =  \n#canal.instance.standby.timestamp =  \n#canal.instance.standby.gtid=  \n  \n# username/password  \ncanal.instance.dbUsername=canal  \ncanal.instance.dbPassword=canal  \ncanal.instance.connectionCharset = UTF-8  \n# enable druid Decrypt database password  \ncanal.instance.enableDruid=false  \n#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==  \n  \n# table regex  \ncanal.instance.filter.regex=.*\\..*  \n# table black regex  \ncanal.instance.filter.black.regex=mysql\\.slave_.*  \n# table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)  \n#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch  \n# table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)  \n#canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch  \n  \n# mq config  \ncanal.mq.topic=canal-routing-key  \n# dynamic topic route by schema or table regex  \n#canal.mq.dynamicTopic=mytest1.user,topic2:mytest2\\..*,.*\\..*  \ncanal.mq.partition=0  \n"})}),"\n",(0,i.jsxs)(e.p,{children:["\u628a\u8fd9\u4e24\u4e2a\u914d\u7f6e\u6587\u4ef6\u6620\u5c04\u597d\uff0c\u518d\u6b21\u63d0\u9192\uff0c\u6ce8\u610f\u5b9e\u4f8b\u7684\u8def\u5f84\u540d\uff0c\u9ed8\u8ba4\u662f\uff1a",(0,i.jsx)(e.code,{children:"/example/instance.properties"})]}),"\n",(0,i.jsx)(e.h3,{id:"\u4fee\u6539canal\u914d\u7f6e\u6587\u4ef6",children:"\u4fee\u6539canal\u914d\u7f6e\u6587\u4ef6"}),"\n",(0,i.jsx)(e.p,{children:"\u6211\u4eec\u9700\u8981\u4fee\u6539\u8fd9\u4e2a\u5b9e\u4f8b\u914d\u7f6e\u6587\u4ef6\uff0c\u53bb\u8fde\u63a5MySQL\uff0c\u786e\u4fdd\u4ee5\u4e0b\u7684\u914d\u7f6e\u6b63\u786e\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"canal.instance.master.address=mymysql:3306  \ncanal.instance.dbUsername=canal  \ncanal.instance.dbPassword=canal  \n"})}),"\n",(0,i.jsx)(e.p,{children:"mymysql\u662f\u540c\u4e3adocker\u5bb9\u5668\u7684MySQL\u73af\u5883\uff0c\u7aef\u53e33306\u662f\u6307\u5185\u90e8\u7aef\u53e3\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["\u8fd9\u91cc\u591a\u8bf4\u660e\u4e00\u4e0b\uff0cdocker\u7aef\u53e3\u914d\u7f6e\u65f6\u5047\u8bbe\u4e3a\uff1a",(0,i.jsx)(e.code,{children:"13306:3306"}),"\uff0c\u90a3\u4e48\u5bb9\u5668\u5bf9\u5916\u7684\u7aef\u53e3\u5c31\u662f13306\uff0c\u5185\u90e8\u662f3306\uff0c\u5728\u672c\u793a\u4f8b\u4e2d\uff0cMySQL\u548cCanal\u90fd\u662f\u5bb9\u5668\u73af\u5883\uff0c\u6240\u4ee5Canal\u8fde\u63a5MySQL\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u5904\u4e8e\u540c\u4e00\u7f51\u6bb5\uff08",(0,i.jsx)(e.code,{children:"docker-compose.yml"}),"\u4e2d\u7684",(0,i.jsx)(e.code,{children:"mynetwork"}),"\uff09"]}),"\n",(0,i.jsx)(e.li,{children:"\u8bbf\u95ee\u5185\u90e8\u7aef\u53e3\uff08\u53733306\uff0c\u800c\u975e13306\uff09"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"dbUsername\u548cdbPassword\u4e3aMySQL\u8d26\u53f7\u5bc6\u7801\uff0c\u4e3a\u4e86\u5f00\u53d1\u65b9\u4fbf\u53ef\u4ee5\u4f7f\u7528root/root\uff0c\u4f46\u662f\u6211\u4ecd\u5efa\u8bae\u81ea\u884c\u521b\u5efa\u7528\u6237\u5e76\u5206\u914d\u8bbf\u95ee\u6743\u9650\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"# \u8fdb\u5165docker\u4e2d\u7684mysql\u5bb9\u5668  \ndocker exec -it mymysql bash  \n# \u8fdb\u5165mysql\u6307\u4ee4\u6a21\u5f0f  \nmysql -uroot -proot  \n  \n# \u7f16\u5199MySQL\u8bed\u53e5\u5e76\u6267\u884c  \n> ...  \n-- \u9009\u62e9mysql  \nuse mysql;  \n-- \u521b\u5efacanal\u7528\u6237\uff0c\u8d26\u5bc6\uff1acanal/canal  \ncreate user 'canal'@'%' identified by 'canal';  \n-- \u5206\u914d\u6743\u9650\uff0c\u4ee5\u53ca\u5141\u8bb8\u6240\u6709\u4e3b\u673a\u767b\u5f55\u8be5\u7528\u6237  \ngrant SELECT, INSERT, UPDATE, DELETE, REPLICATION SLAVE, REPLICATION CLIENT on *.* to 'canal'@'%';  \n  \n-- \u5237\u65b0\u4e00\u4e0b\u4f7f\u5176\u751f\u6548  \nflush privileges;  \n  \n-- \u9644\u5e26\u4e00\u4e2a\u5220\u9664\u7528\u6237\u6307\u4ee4  \ndrop user 'canal'@'%';  \n"})}),"\n",(0,i.jsx)(e.p,{children:"\u7528navicat\u6216\u8005shell\u53bb\u767b\u5f55canal\u8fd9\u4e2a\u7528\u6237\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5373\u521b\u5efa\u6210\u529f"}),"\n",(0,i.jsx)(e.h2,{id:"\u6574\u5408springboot-canal\u5b9e\u73b0\u5ba2\u6237\u7aef",children:"\u6574\u5408SpringBoot Canal\u5b9e\u73b0\u5ba2\u6237\u7aef"}),"\n",(0,i.jsx)(e.h3,{id:"maven\u4f9d\u8d56",children:"Maven\u4f9d\u8d56\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",children:"<canal.version>1.1.5</canal.version>  \n  \n\x3c!--canal--\x3e  \n<dependency>  \n  <groupId>com.alibaba.otter</groupId>  \n  <artifactId>canal.client</artifactId>  \n  <version>${canal.version}</version>  \n</dependency>  \n<dependency>  \n  <groupId>com.alibaba.otter</groupId>  \n  <artifactId>canal.protocol</artifactId>  \n  <version>${canal.version}</version>  \n</dependency>   \n"})}),"\n",(0,i.jsx)(e.h3,{id:"\u65b0\u589e\u7ec4\u4ef6\u5e76\u542f\u52a8",children:"\u65b0\u589e\u7ec4\u4ef6\u5e76\u542f\u52a8\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'import com.alibaba.otter.canal.client.CanalConnector;  \nimport com.alibaba.otter.canal.client.CanalConnectors;  \nimport com.alibaba.otter.canal.protocol.CanalEntry;  \nimport com.alibaba.otter.canal.protocol.Message;  \nimport org.springframework.boot.CommandLineRunner;  \nimport org.springframework.stereotype.Component;  \n  \nimport java.net.InetSocketAddress;  \nimport java.util.List;  \n  \n@Component  \npublic class CanalClient {  \n  \n    private final static int BATCH_SIZE = 1000;  \n  \n    public void run() {  \n        // \u521b\u5efa\u94fe\u63a5  \n        CanalConnector connector = CanalConnectors.newSingleConnector(new InetSocketAddress("localhost", 11111), "canal-exchange", "canal", "canal");  \n        try {  \n            //\u6253\u5f00\u8fde\u63a5  \n            connector.connect();  \n            //\u8ba2\u9605\u6570\u636e\u5e93\u8868,\u5168\u90e8\u8868  \n            connector.subscribe(".*\\..*");  \n            //\u56de\u6eda\u5230\u672a\u8fdb\u884cack\u7684\u5730\u65b9\uff0c\u4e0b\u6b21fetch\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece\u6700\u540e\u4e00\u4e2a\u6ca1\u6709ack\u7684\u5730\u65b9\u5f00\u59cb\u62ff  \n            connector.rollback();  \n            while (true) {  \n                // \u83b7\u53d6\u6307\u5b9a\u6570\u91cf\u7684\u6570\u636e  \n                Message message = connector.getWithoutAck(BATCH_SIZE);  \n                //\u83b7\u53d6\u6279\u91cfID  \n                long batchId = message.getId();  \n                //\u83b7\u53d6\u6279\u91cf\u7684\u6570\u91cf  \n                int size = message.getEntries().size();  \n                //\u5982\u679c\u6ca1\u6709\u6570\u636e  \n                if (batchId == -1 || size == 0) {  \n                    try {  \n                        //\u7ebf\u7a0b\u4f11\u77202\u79d2  \n                        Thread.sleep(2000);  \n                    } catch (InterruptedException e) {  \n                        e.printStackTrace();  \n                    }  \n                } else {  \n                    //\u5982\u679c\u6709\u6570\u636e,\u5904\u7406\u6570\u636e  \n                    printEntry(message.getEntries());  \n                }  \n                //\u8fdb\u884c batch id \u7684\u786e\u8ba4\u3002\u786e\u8ba4\u4e4b\u540e\uff0c\u5c0f\u4e8e\u7b49\u4e8e\u6b64 batchId \u7684 Message \u90fd\u4f1a\u88ab\u786e\u8ba4\u3002  \n                connector.ack(batchId);  \n            }  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        } finally {  \n            connector.disconnect();  \n        }  \n    }  \n  \n    /**  \n     * \u6253\u5370canal server\u89e3\u6790binlog\u83b7\u5f97\u7684\u5b9e\u4f53\u7c7b\u4fe1\u606f  \n     */  \n    private static void printEntry(List<CanalEntry.Entry> entrys) {  \n        for (CanalEntry.Entry entry : entrys) {  \n            if (entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONBEGIN || entry.getEntryType() == CanalEntry.EntryType.TRANSACTIONEND) {  \n                //\u5f00\u542f/\u5173\u95ed\u4e8b\u52a1\u7684\u5b9e\u4f53\u7c7b\u578b\uff0c\u8df3\u8fc7  \n                continue;  \n            }  \n            //RowChange\u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u4e00\u884c\u6570\u636e\u53d8\u5316\u7684\u6240\u6709\u7279\u5f81  \n            //\u6bd4\u5982isDdl \u662f\u5426\u662fddl\u53d8\u66f4\u64cd\u4f5c sql \u5177\u4f53\u7684ddl sql beforeColumns afterColumns \u53d8\u66f4\u524d\u540e\u7684\u6570\u636e\u5b57\u6bb5\u7b49\u7b49  \n            CanalEntry.RowChange rowChage;  \n            try {  \n                rowChage = CanalEntry.RowChange.parseFrom(entry.getStoreValue());  \n            } catch (Exception e) {  \n                throw new RuntimeException("ERROR # parser of eromanga-event has an error , data:" + entry.toString(), e);  \n            }  \n            //\u83b7\u53d6\u64cd\u4f5c\u7c7b\u578b\uff1ainsert/update/delete\u7c7b\u578b  \n            CanalEntry.EventType eventType = rowChage.getEventType();  \n            //\u6253\u5370Header\u4fe1\u606f  \n            System.out.println(String.format("================\u300b; binlog[%s:%s] , name[%s,%s] , eventType : %s",  \n                    entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),  \n                    entry.getHeader().getSchemaName(), entry.getHeader().getTableName(),  \n                    eventType));  \n            //\u5224\u65ad\u662f\u5426\u662fDDL\u8bed\u53e5  \n            if (rowChage.getIsDdl()) {  \n                System.out.println("================\u300b;isDdl: true,sql:" + rowChage.getSql());  \n            }  \n            //\u83b7\u53d6RowChange\u5bf9\u8c61\u91cc\u7684\u6bcf\u4e00\u884c\u6570\u636e\uff0c\u6253\u5370\u51fa\u6765  \n            for (CanalEntry.RowData rowData : rowChage.getRowDatasList()) {  \n                //\u5982\u679c\u662f\u5220\u9664\u8bed\u53e5  \n                if (eventType == CanalEntry.EventType.DELETE) {  \n                    printColumn(rowData.getBeforeColumnsList());  \n                    //\u5982\u679c\u662f\u65b0\u589e\u8bed\u53e5  \n                } else if (eventType == CanalEntry.EventType.INSERT) {  \n                    printColumn(rowData.getAfterColumnsList());  \n                    //\u5982\u679c\u662f\u66f4\u65b0\u7684\u8bed\u53e5  \n                } else {  \n                    //\u53d8\u66f4\u524d\u7684\u6570\u636e  \n                    System.out.println("-------\x3e; before");  \n                    printColumn(rowData.getBeforeColumnsList());  \n                    //\u53d8\u66f4\u540e\u7684\u6570\u636e  \n                    System.out.println("-------\x3e; after");  \n                    printColumn(rowData.getAfterColumnsList());  \n                }  \n            }  \n        }  \n    }  \n  \n    private static void printColumn(List<CanalEntry.Column> columns) {  \n        for (CanalEntry.Column column : columns) {  \n            System.out.println(column.getName() + " : " + column.getValue() + "    update=" + column.getUpdated());  \n        }  \n    }  \n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"\u542f\u52a8\u7c7bapplication",children:"\u542f\u52a8\u7c7bApplication\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"@SpringBootApplication  \npublic class BaseApplication implements CommandLineRunner {  \n    @Autowired  \n    private CanalClient canalClient;  \n  \n    @Override  \n    public void run(String... args) throws Exception {  \n        canalClient.run();  \n    }  \n}  \n"})}),"\n",(0,i.jsx)(e.p,{children:"\u542f\u52a8\u7a0b\u5e8f\uff0c\u6b64\u65f6\u65b0\u589e\u6216\u4fee\u6539\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff0c\u6211\u4eec\u5c31\u80fd\u4ece\u5ba2\u6237\u7aef\u4e2d\u76d1\u542c\u5230"}),"\n",(0,i.jsx)(e.p,{children:"\u4e0d\u8fc7\u6211\u5efa\u8bae\u76d1\u542c\u7684\u4fe1\u606f\u653e\u5230\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u5728\u7a7a\u95f2\u7684\u65f6\u5019\u53bb\u5904\u7406\uff0c\u6240\u4ee5\u76f4\u63a5\u914d\u7f6eCanal\u6574\u5408RabbitMQ\u66f4\u597d\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"canal\u6574\u5408rabbitmq",children:"Canal\u6574\u5408RabbitMQ"}),"\n",(0,i.jsxs)(e.h3,{id:"\u4fee\u6539canalproperties\u4e2d\u7684servermode",children:["\u4fee\u6539",(0,i.jsx)(e.code,{children:"canal.properties"}),"\u4e2d\u7684",(0,i.jsx)(e.code,{children:"serverMode"}),"\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"canal.serverMode = rabbitMQ  \n"})}),"\n",(0,i.jsxs)(e.h3,{id:"\u4fee\u6539instanceproperties\u4e2d\u7684topic",children:["\u4fee\u6539",(0,i.jsx)(e.code,{children:"instance.properties"}),"\u4e2d\u7684",(0,i.jsx)(e.code,{children:"topic"}),"\uff1a"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"canal.mq.topic=canal-routing-key  \n"})}),"\n",(0,i.jsx)(e.h3,{id:"\u7136\u540e\u627e\u5230\u5173\u4e8erabbitmq\u7684\u914d\u7f6e",children:"\u7136\u540e\u627e\u5230\u5173\u4e8eRabbitMQ\u7684\u914d\u7f6e\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-properties",children:"#################################################  \n########         RabbitMQ       ############  \n#################################################  \n# \u8fde\u63a5rabbit\uff0c\u5199IP\uff0c\u56e0\u4e3a\u540c\u4e2a\u7f51\u7edc\u4e0b\uff0c\u6240\u4ee5\u53ef\u4ee5\u5199\u5bb9\u5668\u540d  \nrabbitmq.host = myrabbit  \nrabbitmq.virtual.host = /  \n# \u4ea4\u6362\u5668\u540d\u79f0\uff0c\u7b49\u7b49\u6211\u4eec\u8981\u53bb\u624b\u52a8\u521b\u5efa  \nrabbitmq.exchange = canal-exchange  \n# \u8d26\u5bc6  \nrabbitmq.username = admin  \nrabbitmq.password = 123456  \n# \u6682\u4e0d\u652f\u6301\u6307\u5b9a\u7aef\u53e3\uff0c\u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u76845762\uff0c\u597d\u5728\u5728\u672c\u793a\u4f8b\u4e2d\u9002\u7528  \n"})}),"\n",(0,i.jsx)(e.p,{children:"\u91cd\u65b0\u542f\u52a8\u5bb9\u5668\uff0c\u8fdb\u5165RabbitMQ\u7ba1\u7406\u9875\u9762\u521b\u5efaexchange\u4ea4\u6362\u5668\u548c\u961f\u5217queue\uff1a"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\u65b0\u5efa",(0,i.jsx)(e.code,{children:"exchange"}),"\uff0c\u547d\u540d\u4e3a\uff1a",(0,i.jsx)(e.code,{children:"canal-exchange"})]}),"\n",(0,i.jsxs)(e.li,{children:["\u65b0\u5efa",(0,i.jsx)(e.code,{children:"queue"}),"\uff0c\u547d\u540d\u4e3a\uff1a",(0,i.jsx)(e.code,{children:"canal-queue"})]}),"\n",(0,i.jsxs)(e.li,{children:["\u7ed1\u5b9a",(0,i.jsx)(e.code,{children:"exchange"}),"\u548c",(0,i.jsx)(e.code,{children:"queue"}),"\uff0c",(0,i.jsx)(e.code,{children:"routing-key"}),"\u8bbe\u7f6e\u4e3a\uff1a",(0,i.jsx)(e.code,{children:"canal-routing-key"}),"\uff0c\u8fd9\u91cc\u5bf9\u5e94\u4e0a\u9762",(0,i.jsx)(e.code,{children:"instance.properties"}),"\u7684",(0,i.jsx)(e.code,{children:"canal.mq.topic"})]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u987a\u5e26\u4e00\u63d0\uff0c\u4e0a\u9762\u8fd9\u6bb5\u53ef\u4ee5\u5ffd\u7565\uff0c\u56e0\u4e3a\u5728SpringBoot\u7684RabbitMQ\u914d\u7f6e\u4e2d\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\u4ea4\u6362\u5668exchange\u548c\u961f\u5217queue\uff0c\u4e0d\u8fc7\u624b\u52a8\u521b\u5efa\u7684\u8bdd\uff0c\u53ef\u4ee5\u5728\u5ffd\u7565SpringBoot\u7684\u57fa\u7840\u4e0a\uff0c\u76f4\u63a5\u5728RabbitMQ\u7684\u7ba1\u7406\u9875\u9762\u4e0a\u770b\u5230\u4fee\u6539\u8bb0\u5f55\u7684\u6d88\u606f\u3002"}),"\n",(0,i.jsx)(e.h2,{id:"springboot\u6574\u5408rabbitmq",children:"SpringBoot\u6574\u5408RabbitMQ"}),"\n",(0,i.jsx)(e.h3,{id:"\u4f9d\u8d56",children:"\u4f9d\u8d56\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-xml",children:"<amqp.version>2.3.4.RELEASE</amqp.version>  \n  \n\x3c!--\u6d88\u606f\u961f\u5217--\x3e  \n<dependency>  \n  <groupId>org.springframework.boot</groupId>  \n  <artifactId>spring-boot-starter-amqp</artifactId>  \n  <version>${amqp.version}</version>  \n</dependency>  \n"})}),"\n",(0,i.jsx)(e.h3,{id:"applicationyml-",children:"application.yml \uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"spring:  \n  rabbitmq:  \n    #    host: myserverhost  \n    host: 192.168.0.108  \n    port: 5672  \n    username: admin  \n    password: RabbitMQ\u5bc6\u7801  \n    # \u6d88\u606f\u786e\u8ba4\u914d\u7f6e\u9879  \n    # \u786e\u8ba4\u6d88\u606f\u5df2\u53d1\u9001\u5230\u4ea4\u6362\u673a(Exchange)  \n    publisher-confirm-type: correlated  \n    # \u786e\u8ba4\u6d88\u606f\u5df2\u53d1\u9001\u5230\u961f\u5217(Queue)  \n    publisher-returns: true  \n"})}),"\n",(0,i.jsx)(e.h3,{id:"rabbitmq\u914d\u7f6e\u7c7b",children:"RabbitMQ\u914d\u7f6e\u7c7b\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"@Configuration  \npublic class RabbitConfig {  \n    @Bean  \n    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {  \n        RabbitTemplate template = new RabbitTemplate();  \n        template.setConnectionFactory(connectionFactory);  \n        template.setMessageConverter(new Jackson2JsonMessageConverter());  \n  \n        return template;  \n    }  \n  \n    /**  \n     * template.setMessageConverter(new Jackson2JsonMessageConverter());  \n     * \u8fd9\u6bb5\u548c\u4e0a\u9762\u8fd9\u884c\u4ee3\u7801\u89e3\u51b3RabbitListener\u5faa\u73af\u62a5\u9519\u7684\u95ee\u9898  \n     */  \n    @Bean  \n    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {  \n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();  \n        factory.setConnectionFactory(connectionFactory);  \n        factory.setMessageConverter(new Jackson2JsonMessageConverter());  \n        return factory;  \n    }  \n}  \n"})}),"\n",(0,i.jsx)(e.h3,{id:"canal\u6d88\u606f\u751f\u4ea7\u8005",children:"Canal\u6d88\u606f\u751f\u4ea7\u8005\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'public static final String CanalQueue = "canal-queue";  \npublic static final String CanalExchange = "canal-exchange";  \npublic static final String CanalRouting = "canal-routing-key";  \n\n/**  \n * Canal\u6d88\u606f\u63d0\u4f9b\u8005\uff0ccanal-server\u751f\u4ea7\u7684\u6d88\u606f\u901a\u8fc7RabbitMQ\u6d88\u606f\u961f\u5217\u53d1\u9001  \n */  \n@Configuration  \npublic class CanalProvider {  \n    /**  \n     * \u961f\u5217  \n     */  \n    @Bean  \n    public Queue canalQueue() {  \n        /**  \n         * durable:\u662f\u5426\u6301\u4e45\u5316\uff0c\u9ed8\u8ba4false\uff0c\u6301\u4e45\u5316\u961f\u5217\uff1a\u4f1a\u88ab\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5f53\u6d88\u606f\u4ee3\u7406\u91cd\u542f\u65f6\u4ecd\u7136\u5b58\u5728\uff1b\u6682\u5b58\u961f\u5217\uff1a\u5f53\u524d\u8fde\u63a5\u6709\u6548  \n         * exclusive:\u9ed8\u8ba4\u4e3afalse\uff0c\u53ea\u80fd\u88ab\u5f53\u524d\u521b\u5efa\u7684\u8fde\u63a5\u4f7f\u7528\uff0c\u800c\u4e14\u5f53\u8fde\u63a5\u5173\u95ed\u540e\u961f\u5217\u5373\u88ab\u5220\u9664\u3002\u6b64\u53c2\u8003\u4f18\u5148\u7ea7\u9ad8\u4e8edurable  \n         * autoDelete:\u662f\u5426\u81ea\u52a8\u5220\u9664\uff0c\u5f53\u6ca1\u6709\u751f\u4ea7\u8005\u6216\u8005\u6d88\u8d39\u8005\u4f7f\u7528\u6b64\u961f\u5217\uff0c\u8be5\u961f\u5217\u4f1a\u81ea\u52a8\u5220\u9664  \n         */  \n        return new Queue(RabbitConstant.CanalQueue, true);  \n    }  \n  \n    /**  \n     * \u4ea4\u6362\u673a\uff0c\u8fd9\u91cc\u4f7f\u7528\u76f4\u8fde\u4ea4\u6362\u673a  \n     */  \n    @Bean  \n    DirectExchange canalExchange() {  \n        return new DirectExchange(RabbitConstant.CanalExchange, true, false);  \n    }  \n  \n    /**  \n     * \u7ed1\u5b9a\u4ea4\u6362\u673a\u548c\u961f\u5217\uff0c\u5e76\u8bbe\u7f6e\u5339\u914d\u952e  \n     */  \n    @Bean  \n    Binding bindingCanal() {  \n        return BindingBuilder.bind(canalQueue()).to(canalExchange()).with(RabbitConstant.CanalRouting);  \n    }  \n} \n'})}),"\n",(0,i.jsx)(e.h3,{id:"canal\u6d88\u606f\u6d88\u8d39\u8005",children:"Canal\u6d88\u606f\u6d88\u8d39\u8005\uff1a"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'/**  \n * Canal\u6d88\u606f\u6d88\u8d39\u8005  \n */  \n@Component  \n@RabbitListener(queues = RabbitConstant.CanalQueue)  \npublic class CanalComsumer {  \n    private final SysBackupService sysBackupService;  \n  \n    public CanalComsumer(SysBackupService sysBackupService) {  \n        this.sysBackupService = sysBackupService;  \n    }  \n  \n    @RabbitHandler  \n    public void process(Map<String, Object> msg) {  \n        System.out.println("\u6536\u5230canal\u6d88\u606f\uff1a" + msg);  \n        boolean isDdl = (boolean) msg.get("isDdl");  \n  \n        // \u4e0d\u5904\u7406DDL\u4e8b\u4ef6  \n        if (isDdl) {  \n            return;  \n        }  \n  \n        // TiCDC\u7684id\uff0c\u5e94\u8be5\u5177\u6709\u552f\u4e00\u6027\uff0c\u5148\u4fdd\u5b58\u518d\u8bf4  \n        int tid = (int) msg.get("id");  \n        // TiCDC\u751f\u6210\u8be5\u6d88\u606f\u7684\u65f6\u95f4\u6233\uff0c13\u4f4d\u6beb\u79d2\u7ea7  \n        long ts = (long) msg.get("ts");  \n        // \u6570\u636e\u5e93  \n        String database = (String) msg.get("database");  \n        // \u8868  \n        String table = (String) msg.get("table");  \n        // \u7c7b\u578b\uff1aINSERT/UPDATE/DELETE  \n        String type = (String) msg.get("type");  \n        // \u6bcf\u4e00\u5217\u7684\u6570\u636e\u503c  \n        List<?> data = (List<?>) msg.get("data");  \n        // \u4ec5\u5f53type\u4e3aUPDATE\u65f6\u624d\u6709\u503c\uff0c\u8bb0\u5f55\u6bcf\u4e00\u5217\u7684\u540d\u5b57\u548cUPDATE\u4e4b\u524d\u7684\u6570\u636e\u503c  \n        List<?> old = (List<?>) msg.get("old");  \n  \n        // \u8df3\u8fc7sys_backup\uff0c\u9632\u6b62\u65e0\u9650\u5faa\u73af  \n        if ("sys_backup".equalsIgnoreCase(table)) {  \n            return;  \n        }  \n  \n        // \u53ea\u5904\u7406\u6307\u5b9a\u7c7b\u578b  \n        if (!"INSERT".equalsIgnoreCase(type)  \n                && !"UPDATE".equalsIgnoreCase(type)  \n                && !"DELETE".equalsIgnoreCase(type)) {  \n            return;  \n        }  \n    }  \n}  \n'})}),"\n",(0,i.jsx)(e.p,{children:"\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u4fee\u6539MySQL\u4e2d\u7684\u4e00\u6761\u6d88\u606f\uff0cCanal\u5c31\u4f1a\u53d1\u9001\u4fe1\u606f\u5230RabbitMQ\uff0c\u6211\u4eec\u5c31\u80fd\u4ece\u76d1\u542c\u7684RabbitMQ\u961f\u5217\u4e2d\u5f97\u5230\u8be5\u6761\u6d88\u606f\u3002"})]})}function m(n={}){const{wrapper:e}={...(0,l.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);
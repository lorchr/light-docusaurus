"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[8089],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(96540);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},92228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"zh-cn/spring-authorization-server/LDAP-Login","title":"LDAP-Login","description":"- [\u8ba4\u8bc1 & \u6388\u6743] 1. OAuth2\u6388\u6743","source":"@site/docs/zh-cn/spring-authorization-server/23-LDAP-Login.md","sourceDirName":"zh-cn/spring-authorization-server","slug":"/zh-cn/spring-authorization-server/LDAP-Login","permalink":"/docs/zh-cn/spring-authorization-server/LDAP-Login","draft":false,"unlisted":false,"editUrl":"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/23-LDAP-Login.md","tags":[],"version":"current","sidebarPosition":23,"frontMatter":{},"sidebar":"troch","previous":{"title":"SAS-Wecom-DingTalk-Login","permalink":"/docs/zh-cn/spring-authorization-server/SAS-Wecom-DingTalk-Login"},"next":{"title":"LDAP-Grant-Type","permalink":"/docs/zh-cn/spring-authorization-server/LDAP-Grant-Type"}}');var i=t(74848),a=t(28453);const o={},s=void 0,c={},p=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001\u5206\u6790",id:"\u4e8c\u5206\u6790",level:2},{value:"\u4e09\u3001\u51c6\u5907",id:"\u4e09\u51c6\u5907",level:2},{value:"1. \u4f7f\u7528Docker\u90e8\u7f72OpenLDAP\u670d\u52a1\u7aef",id:"1-\u4f7f\u7528docker\u90e8\u7f72openldap\u670d\u52a1\u7aef",level:3},{value:"2. \u5bfc\u5165\u6d4b\u8bd5\u7528\u6237",id:"2-\u5bfc\u5165\u6d4b\u8bd5\u7528\u6237",level:3},{value:"\u56db\u3001\u7f16\u7801",id:"\u56db\u7f16\u7801",level:2},{value:"1. \u5bfc\u5165Ldap\u4f9d\u8d56",id:"1-\u5bfc\u5165ldap\u4f9d\u8d56",level:3},{value:"2. \u914d\u7f6e application.yaml",id:"2-\u914d\u7f6e-applicationyaml",level:3},{value:"3. LdapLoginAuthenticationProvider",id:"3-ldaploginauthenticationprovider",level:3},{value:"4. LdapAuthenticationConfig",id:"4-ldapauthenticationconfig",level:3},{value:"5. LdapParameterNames",id:"5-ldapparameternames",level:3},{value:"6. LdapProperties",id:"6-ldapproperties",level:3},{value:"7. LdapUtils",id:"7-ldaputils",level:3},{value:"8. DynamicProviderController",id:"8-dynamicprovidercontroller",level:3},{value:"\u4e94\u3001\u6d4b\u8bd5",id:"\u4e94\u6d4b\u8bd5",level:2},{value:"1. \u547d\u4ee4\u884c\u6d4b\u8bd5",id:"1-\u547d\u4ee4\u884c\u6d4b\u8bd5",level:3},{value:"2. \u6d4f\u89c8\u5668\u6d4b\u8bd5",id:"2-\u6d4f\u89c8\u5668\u6d4b\u8bd5",level:3}];function l(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.cnblogs.com/linianhui/p/oauth2-authorization.html",children:"[\u8ba4\u8bc1 & \u6388\u6743] 1. OAuth2\u6388\u6743 "})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://cloud.tencent.com/developer/article/2134895",children:"\u5728OAuth2\u6388\u6743\u6d41\u7a0b\u4e2d\u5b9e\u73b0\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://segmentfault.com/a/1190000039911540",children:"Spring OAuth2\uff085\uff09 - \u57fa\u4e8eLDAP\u9a8c\u8bc1\u7528\u6237"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"\u4e00\u524d\u8a00",children:"\u4e00\u3001\u524d\u8a00"}),"\n",(0,i.jsx)(n.h2,{id:"\u4e8c\u5206\u6790",children:"\u4e8c\u3001\u5206\u6790"}),"\n",(0,i.jsx)(n.h2,{id:"\u4e09\u51c6\u5907",children:"\u4e09\u3001\u51c6\u5907"}),"\n",(0,i.jsx)(n.h3,{id:"1-\u4f7f\u7528docker\u90e8\u7f72openldap\u670d\u52a1\u7aef",children:"1. \u4f7f\u7528Docker\u90e8\u7f72OpenLDAP\u670d\u52a1\u7aef"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'# docker stop ldap-service && docker remove ldap-service\ndocker run --detach \\\n  --publish 2389:389 \\\n  --publish 2636:636 \\\n  --env LDAP_ORGANISATION="light" \\\n  --env LDAP_DOMAIN="light.com" \\\n  --env LDAP_ADMIN_PASSWORD="123456" \\\n  --network dev \\\n  --restart=on-failure:3 \\\n  --name ldap-service \\\n  --hostname ldap-service \\\n  osixia/openldap:stable\n\n# docker stop ldap-admin && docker remove ldap-admin\ndocker run --detach \\\n  --publish 2390:80 \\\n  --publish 2393:443 \\\n  --env PHPLDAPADMIN_HTTPS=false \\\n  --env PHPLDAPADMIN_LDAP_HOSTS=ldap-host \\\n  --privileged \\\n  --link ldap-service:ldap-host \\\n  --network dev \\\n  --restart=on-failure:3 \\\n  --name ldap-admin \\\n  --hostname ldap-admin \\\n  osixia/phpldapadmin:stable\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u547d\u4ee4\u884c\u6d4b\u8bd5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:'# \u8fde\u63a5LDAP\u5bb9\u5668\ndocker exec -it -u root ldap-service /bin/bash\n\n# \u6dfb\u52a0\u7528\u6237\nldapadd -x -D "cn=admin,dc=light,dc=com" -W -f users.ldif\n\n# \u67e5\u8be2LDAP\u4fe1\u606f\nldapsearch -x -H ldap://localhost:389 -b dc=light,dc=com -D "cn=admin,dc=light,dc=com" -w 123456\n\n# \u67e5\u8be2LDAP\u4fe1\u606f\ndocker exec ldap-service ldapsearch -x -H ldap://localhost:389 -b dc=light,dc=com -D "cn=admin,dc=light,dc=com" -w 123456\n\n# extended LDIF\n#\n# LDAPv3\n# base <dc=light,dc=com> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# light.com\ndn: dc=light,dc=com\nobjectClass: top\nobjectClass: dcObject\nobjectClass: organization\no: light\ndc: light\n\n# search result\nsearch: 2\nresult: 0 Success\n\n# numResponses: 2\n# numEntries: 1\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://localhost:2390/",children:"Dashboard"})}),"\n",(0,i.jsxs)(n.li,{children:["Account","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user: cn=admin,dc=light,dc=com          password: 123456"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-\u5bfc\u5165\u6d4b\u8bd5\u7528\u6237",children:"2. \u5bfc\u5165\u6d4b\u8bd5\u7528\u6237"}),"\n",(0,i.jsxs)(n.p,{children:["\u6d4b\u8bd5\u7528\u6237\u4fe1\u606f\u811a\u672c\u4ece",(0,i.jsx)(n.a,{href:"https://docs.spring.io/spring-security/reference/servlet/authentication/passwords/ldap.html#servlet-authentication-ldap-embedded",children:"Spring\u5b98\u7f51\u83b7\u53d6"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"\u6ce8\u610f:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u7531\u4e8e\u521b\u5efa\u5bb9\u5668\u4f7f\u7528\u7684 ",(0,i.jsx)(n.code,{children:"domain"}),"(",(0,i.jsx)(n.code,{children:"dc=light,dc=com"}),") \u548c\u811a\u672c\u4e2d\u7684\u4e0d\u4e00\u6837(",(0,i.jsx)(n.code,{children:"dc=springframework,dc=org"}),")\uff0c","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u5c06 ",(0,i.jsx)(n.code,{children:"BaseDN"})," \u7531 ",(0,i.jsx)(n.code,{children:"dc=springframework,dc=org"})," \u6539\u4e3a ",(0,i.jsx)(n.code,{children:"dc=light,dc=com"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\u7248\u672c\u517c\u5bb9\u95ee\u9898","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u901a\u8fc7 phpLdapAdmin \u67e5\u770b ",(0,i.jsx)(n.code,{children:"Schema"}),"\uff0c\u53d1\u73b0 ",(0,i.jsx)(n.code,{children:"groupOfNames"})," \u7c7b\u6ca1\u6709 ",(0,i.jsx)(n.code,{children:"uniqueMember"})," \u5c5e\u6027\uff0c\u5c06 ",(0,i.jsx)(n.code,{children:"uniqueMember"})," \u6539\u4e3a  ",(0,i.jsx)(n.code,{children:"groupOfNames"})," \u652f\u6301\u7684 ",(0,i.jsx)(n.code,{children:"member"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u6700\u7ec8\u5f97\u5230\u7684  ",(0,i.jsx)(n.code,{children:"users.ldif"})," \u811a\u672c\u5982\u4e0b"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ldif",children:"dn: ou=groups,dc=light,dc=com\nobjectclass: top\nobjectclass: organizationalUnit\nou: groups\n\ndn: ou=people,dc=light,dc=com\nobjectclass: top\nobjectclass: organizationalUnit\nou: people\n\ndn: uid=admin,ou=people,dc=light,dc=com\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\ncn: Rod Johnson\nsn: Johnson\nuid: admin\nuserPassword: password\n\ndn: uid=user,ou=people,dc=light,dc=com\nobjectclass: top\nobjectclass: person\nobjectclass: organizationalPerson\nobjectclass: inetOrgPerson\ncn: Dianne Emu\nsn: Emu\nuid: user\nuserPassword: password\n\ndn: cn=user,ou=groups,dc=light,dc=com\nobjectclass: top\nobjectclass: groupOfNames\ncn: user\nmember: uid=admin,ou=people,dc=light,dc=com\nmember: uid=user,ou=people,dc=light,dc=com\n\ndn: cn=admin,ou=groups,dc=light,dc=com\nobjectclass: top\nobjectclass: groupOfNames\ncn: admin\nmember: uid=admin,ou=people,dc=light,dc=com\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"\u56db\u7f16\u7801",children:"\u56db\u3001\u7f16\u7801"}),"\n",(0,i.jsx)(n.h3,{id:"1-\u5bfc\u5165ldap\u4f9d\u8d56",children:"1. \u5bfc\u5165Ldap\u4f9d\u8d56"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-ldap</artifactId>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-\u914d\u7f6e-applicationyaml",children:"2. \u914d\u7f6e application.yaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spring:\n  main:\n    allow-circular-references: true\n    allow-bean-definition-overriding: true\n  ldap:\n    urls: ldap://127.0.0.1:2389\n    base: dc=light,dc=com\n    username: cn=admin,dc=light,dc=com\n    password: 123456\n    user-dn-patterns:\n      - uid={0},ou=people\n    user-search-base: ou=people\n    user-search-filter: (uid={0})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-ldaploginauthenticationprovider",children:"3. LdapLoginAuthenticationProvider"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.authorization.ldap;\n\nimport com.light.sas.constant.LdapParameterNames;\nimport com.light.sas.constant.SecurityConstants;\nimport jakarta.servlet.http.Cookie;\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.ldap.core.DirContextOperations;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider;\nimport org.springframework.security.ldap.userdetails.InetOrgPerson;\nimport org.springframework.security.ldap.userdetails.LdapUserDetails;\nimport org.springframework.security.ldap.userdetails.Person;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * Ldap\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n */\npublic class LdapLoginAuthenticationProvider extends AbstractLdapAuthenticationProvider {\n\n    private final AbstractLdapAuthenticationProvider delegate;\n\n    public LdapLoginAuthenticationProvider(AbstractLdapAuthenticationProvider delegate) {\n        this.delegate = delegate;\n    }\n\n    public boolean support(Authentication authentication) {\n        String loginType = getLoginType(SecurityConstants.LOGIN_TYPE_NAME);\n        return LdapParameterNames.THIRD_LOGIN_LDAP.equalsIgnoreCase(loginType);\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        if (support(authentication)) {\n            Authentication authenticate = delegate.authenticate(authentication);\n\n            if (Objects.nonNull(authenticate) && authenticate.isAuthenticated()) {\n                syncLdapUser(authenticate.getPrincipal());\n            }\n            return authenticate;\n        }\n        return null;\n    }\n\n    /**\n     * \u5c06LDAP\u7528\u6237\u540c\u6b65\u5230\u7cfb\u7edf\n     *\n     * @param principal\n     */\n    public void syncLdapUser(Object principal) {\n        Map<String, Object> userInfo = new HashMap<>();\n        if (principal instanceof LdapUserDetails ldapUser) {\n            userInfo.put(SecurityConstants.LOGIN_TYPE_NAME, LdapParameterNames.THIRD_LOGIN_LDAP);\n            userInfo.put(LdapParameterNames.DN, ldapUser.getDn());\n\n            if (principal instanceof Person person) {\n                userInfo.put(LdapParameterNames.CN, person.getCn());\n                userInfo.put(LdapParameterNames.SN, person.getSn());\n                userInfo.put(LdapParameterNames.GIVEN_NAME, person.getGivenName());\n                userInfo.put(LdapParameterNames.TELEPHONE_NUMBER, person.getTelephoneNumber());\n                userInfo.put(LdapParameterNames.DESCRIPTION, person.getDescription());\n            }\n            // InetOrgPerson \u7ee7\u627f\u4e86 Person\n            if (principal instanceof InetOrgPerson inetOrgPerson) {\n                userInfo.put(LdapParameterNames.UID, inetOrgPerson.getUid());\n                userInfo.put(LdapParameterNames.TITLE, inetOrgPerson.getTitle());\n                userInfo.put(LdapParameterNames.EMPLOYEE_NUMBER, inetOrgPerson.getEmployeeNumber());\n                userInfo.put(LdapParameterNames.DISPLAY_NAME, inetOrgPerson.getDisplayName());\n                userInfo.put(LdapParameterNames.DEPARTMENT_NUMBER, inetOrgPerson.getDepartmentNumber());\n                userInfo.put(LdapParameterNames.MAIL, inetOrgPerson.getMail());\n                userInfo.put(LdapParameterNames.MOBILE, inetOrgPerson.getMobile());\n                userInfo.put(LdapParameterNames.POSTAL_CODE, inetOrgPerson.getPostalCode());\n                userInfo.put(LdapParameterNames.POSTAL_ADDRESS, inetOrgPerson.getPostalAddress());\n                userInfo.put(LdapParameterNames.HOME_PHONE, inetOrgPerson.getHomePhone());\n                userInfo.put(LdapParameterNames.HOME_POSTAL_ADDRESS, inetOrgPerson.getHomePostalAddress());\n                userInfo.put(LdapParameterNames.STREET, inetOrgPerson.getStreet());\n                userInfo.put(LdapParameterNames.ROOM_NUMBER, inetOrgPerson.getRoomNumber());\n            }\n        }\n        // TODO \u4fdd\u5b58\u5230\u6570\u636e\u5e93\n        System.out.println("\u540c\u6b65\u7528\u6237\u4fe1\u606f\uff1a" + userInfo);\n    }\n\n    /**\n     * \u4eceQuery\u53c2\u6570\uff0cHeader Cookie\u4e2d\u4f9d\u6b21\u8bfb\u53d6\u8bf7\u6c42\u7c7b\u578b\n     *\n     * @param name \u53c2\u6570\u540d\u79f0\n     * @return \u53c2\u6570\u503c\n     */\n    public String getLoginType(String name) {\n        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = requestAttributes.getRequest();\n        // \u4ece\u53c2\u6570\u8bfb\u53d6\n        String value = request.getParameter(name);\n        if (!StringUtils.hasText(value)) {\n            // \u4eceHeader\u8bfb\u53d6\n            value = request.getHeader(name);\n        }\n        if (!StringUtils.hasText(value)) {\n            // \u4eceCookie\u8bfb\u53d6\n            Cookie[] cookies = request.getCookies();\n            value = Arrays.stream(cookies)\n                    .filter(cookie -> cookie.getName().equals(name))\n                    .findFirst().map(Cookie::getName).orElse(null);\n        }\n        return value;\n    }\n\n    @Override\n    protected DirContextOperations doAuthentication(UsernamePasswordAuthenticationToken auth) {\n        throw new UnsupportedOperationException("Unsupported method [doAuthentication]");\n    }\n\n    @Override\n    protected Collection<? extends GrantedAuthority> loadUserAuthorities(DirContextOperations userData, String username, String password) {\n        throw new UnsupportedOperationException("Unsupported method [loadUserAuthorities]");\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-ldapauthenticationconfig",children:"4. LdapAuthenticationConfig"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.authorization.ldap;\n\nimport com.light.sas.config.AuthorizationConfig;\nimport com.light.sas.properties.LdapProperties;\nimport jakarta.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.ldap.core.support.BaseLdapPathContextSource;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.ldap.AbstractLdapAuthenticationManagerFactory;\nimport org.springframework.security.ldap.DefaultSpringSecurityContextSource;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticator;\nimport org.springframework.security.ldap.authentication.BindAuthenticator;\nimport org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\nimport org.springframework.security.ldap.search.FilterBasedLdapUserSearch;\nimport org.springframework.security.ldap.userdetails.PersonContextMapper;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * LDAP\u8ba4\u8bc1\u914d\u7f6e\u7c7b\n */\n@Slf4j\n@Configuration\n@AutoConfigureAfter(AuthorizationConfig.class)\n@EnableConfigurationProperties(LdapProperties.class)\npublic class LdapAuthenticationConfig implements InitializingBean {\n\n    @Resource\n    private LdapProperties ldapProperties;\n\n    @Resource\n    private ProviderManager authenticationManager;\n\n    @Autowired(required = false)\n    @Qualifier("ldapAuthenticationProvider")\n    private AbstractLdapAuthenticationProvider ldapAuthenticationProvider;\n\n    @Bean\n    @ConditionalOnProperty(prefix = LdapProperties.PREFIX, name = "urls")\n    public BaseLdapPathContextSource contextSource() {\n        DefaultSpringSecurityContextSource contextSource = new DefaultSpringSecurityContextSource(\n                Arrays.stream(ldapProperties.getUrls()).toList(), ldapProperties.getBase());\n        contextSource.setUrls(ldapProperties.getUrls());\n        contextSource.setBase(ldapProperties.getBase());\n        contextSource.setUserDn(ldapProperties.getUsername());\n        contextSource.setPassword(ldapProperties.getPassword());\n        contextSource.afterPropertiesSet();\n        return contextSource;\n    }\n\n    /**\n     * @see AbstractLdapAuthenticationManagerFactory#getAuthenticator()\n     * @param contextSource\n     * @return\n     */\n    @Bean\n    @ConditionalOnBean(BaseLdapPathContextSource.class)\n    public AbstractLdapAuthenticator authenticator(BaseLdapPathContextSource contextSource) {\n        BindAuthenticator authenticator = new BindAuthenticator(contextSource);\n        String userSearchFilter = ldapProperties.getUserSearchFilter();\n        if (userSearchFilter != null) {\n            authenticator.setUserSearch(\n                    new FilterBasedLdapUserSearch(ldapProperties.getUserSearchBase(), userSearchFilter, contextSource));\n        }\n        List<String> userDnPatterns = ldapProperties.getUserDnPatterns();\n        if (userDnPatterns != null && userDnPatterns.size() > 0) {\n            authenticator.setUserDnPatterns(userDnPatterns.toArray(new String[0]));\n        }\n        authenticator.afterPropertiesSet();\n        return authenticator;\n    }\n\n    @Bean\n    @ConditionalOnBean(AbstractLdapAuthenticator.class)\n    public AbstractLdapAuthenticationProvider ldapAuthenticationProvider(AbstractLdapAuthenticator authenticator) {\n        LdapAuthenticationProvider ldapAuthenticationProvider = new LdapAuthenticationProvider(authenticator);\n        ldapAuthenticationProvider.setUserDetailsContextMapper(new PersonContextMapper());\n        return ldapAuthenticationProvider;\n    }\n\n    /**\n     * \u901a\u8fc7\u5411 {@link ProviderManager} \u4e2d\u52a8\u6001\u7684\u589e\u51cf {@link AuthenticationProvider} \u5b9e\u4f8b\uff0c\u5b9e\u73b0\u52a8\u6001\u7684\u6dfb\u52a0Ldap\u8ba4\u8bc1\u63d0\u4f9b\u8005\n     * @throws Exception\n     */\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        if (Objects.isNull(authenticationManager) || Objects.isNull(ldapAuthenticationProvider)) {\n            return;\n        }\n        AbstractLdapAuthenticationProvider ldapAuthenticationProviderDelegator =\n                new LdapLoginAuthenticationProvider(ldapAuthenticationProvider);\n        List<AuthenticationProvider> providers = authenticationManager.getProviders();\n        for (AuthenticationProvider provider : providers) {\n            if (provider instanceof AbstractLdapAuthenticationProvider) {\n                // \u5df2\u7ecf\u5b58\u5728\u4e00\u4e2aLdap\u8ba4\u8bc1\u63d0\u4f9b\u8005\u4e86\n                return;\n            }\n        }\n        providers.add(0, ldapAuthenticationProviderDelegator);\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"5-ldapparameternames",children:"5. LdapParameterNames"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.constant;\n\n/**\n * Ldap\u8ba4\u8bc1\u76f8\u5173\u5e38\u91cf\u53c2\u6570\n */\npublic class LdapParameterNames {\n\n    /**\n     * \u4e09\u65b9\u767b\u5f55\u7c7b\u578b\u2014\u2014Ldap\n     */\n    public static final String THIRD_LOGIN_LDAP = "ldap";\n    public static final String CN = "cn";\n    public static final String DN = "dn";\n    public static final String SN = "sn";\n    public static final String GIVEN_NAME = "givenName";\n    public static final String TELEPHONE_NUMBER = "telephoneNumber";\n    public static final String DESCRIPTION = "description";\n    public static final String UID = "uid";\n    public static final String TITLE = "title";\n    public static final String EMPLOYEE_NUMBER = "employeeNumber";\n    public static final String DISPLAY_NAME = "displayName";\n    public static final String DEPARTMENT_NUMBER = "departmentNumber";\n    public static final String MAIL = "mail";\n    public static final String MOBILE = "mobile";\n    public static final String POSTAL_CODE = "postalCode";\n    public static final String POSTAL_ADDRESS = "postalAddress";\n    public static final String HOME_PHONE = "homePhone";\n    public static final String HOME_POSTAL_ADDRESS = "homePostalAddress";\n    public static final String STREET = "street";\n    public static final String ROOM_NUMBER = "roomNumber";\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"6-ldapproperties",children:"6. LdapProperties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.properties;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n\n/**\n * Ldap\u914d\u7f6e\u5c5e\u6027\u5b9a\u4e49\n * @see org.springframework.boot.autoconfigure.ldap.LdapProperties\n */\n@Data\n@ConfigurationProperties(prefix = LdapProperties.PREFIX)\npublic class LdapProperties implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    public static final String PREFIX = "spring.ldap";\n\n    private static final int DEFAULT_PORT = 389;\n\n    // region  \u81ea\u5b9a\u4e49\u5c5e\u6027\n    private List<String> userDnPatterns;\n\n    private String userSearchBase;\n\n    private String userSearchFilter;\n\n    // endregion\n\n    // region \u7ee7\u627f\u81ea org.springframework.boot.autoconfigure.ldap.LdapProperties\n\n    /**\n     * LDAP URLs of the server.\n     */\n    private String[] urls;\n\n    /**\n     * Base suffix from which all operations should originate.\n     */\n    private String base;\n\n    /**\n     * Login username of the server.\n     */\n    private String username;\n\n    /**\n     * Login password of the server.\n     */\n    private String password;\n\n    /**\n     * Whether read-only operations should use an anonymous environment. Disabled by\n     * default unless a username is set.\n     */\n    private Boolean anonymousReadOnly;\n\n    /**\n     * LDAP specification settings.\n     */\n    private final Map<String, String> baseEnvironment = new HashMap<>();\n\n    private final org.springframework.boot.autoconfigure.ldap.LdapProperties.Template template =\n            new org.springframework.boot.autoconfigure.ldap.LdapProperties.Template();\n\n    // endregion\n\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"7-ldaputils",children:"7. LdapUtils"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.utils;\n\nimport com.light.sas.authorization.ldap.LdapLoginAuthenticationProvider;\nimport com.light.sas.properties.LdapProperties;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.ldap.core.support.BaseLdapPathContextSource;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.config.ldap.LdapBindAuthenticationManagerFactory;\nimport org.springframework.security.ldap.DefaultSpringSecurityContextSource;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticator;\nimport org.springframework.security.ldap.authentication.BindAuthenticator;\nimport org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\nimport org.springframework.security.ldap.search.FilterBasedLdapUserSearch;\nimport org.springframework.security.ldap.userdetails.PersonContextMapper;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * \u5b9e\u73b0\u52a8\u6001\u7684\u5f00\u542f\u5173\u95edLdap\u8ba4\u8bc1\n */\n@Slf4j\npublic class LdapUtils {\n\n    private LdapUtils() {\n    }\n\n    /**\n     * \u4f7f\u7528\u5305\u88c5\u8fc7\u7684LdapAuthenticationProvider\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u666e\u901a\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u4e5f\u8d70LDAP\n     *\n     * @param ldapProperties LDAP\u5c5e\u6027\u914d\u7f6e\n     * @return LDAP\u8ba4\u8bc1\u63d0\u4f9b\u8005\n     */\n    public static AbstractLdapAuthenticationProvider buildLdapProviderDelegator(LdapProperties ldapProperties) {\n        AbstractLdapAuthenticationProvider ldapAuthenticationProvider = buildLdapProvider(ldapProperties);\n        if (Objects.isNull(ldapAuthenticationProvider)) {\n            return null;\n        }\n        return new LdapLoginAuthenticationProvider(ldapAuthenticationProvider);\n    }\n\n    private static AbstractLdapAuthenticationProvider buildLdapProvider(LdapProperties ldapProperties) {\n        BaseLdapPathContextSource contextSource = buildContextSource(ldapProperties);\n        if (Objects.isNull(contextSource)) {\n            return null;\n        }\n        AbstractLdapAuthenticator authenticator = buildAuthenticator(contextSource, ldapProperties);\n        if (Objects.isNull(authenticator)) {\n            return null;\n        }\n        LdapAuthenticationProvider ldapAuthenticationProvider = new LdapAuthenticationProvider(authenticator);\n        ldapAuthenticationProvider.setUserDetailsContextMapper(new PersonContextMapper());\n        return ldapAuthenticationProvider;\n    }\n\n    private static AuthenticationProvider buildLdapProvider(LdapProperties ldapProperties, BaseLdapPathContextSource contextSource) {\n        LdapBindAuthenticationManagerFactory factory = new LdapBindAuthenticationManagerFactory(contextSource);\n        if (CollectionUtils.isEmpty(ldapProperties.getUserDnPatterns())) {\n            // uid={0},ou=people\n            factory.setUserDnPatterns(ldapProperties.getUserDnPatterns().toArray(new String[0]));\n        }\n        if (StringUtils.hasText(ldapProperties.getUserSearchFilter())) {\n            // (uid={0})\n            factory.setUserSearchFilter(ldapProperties.getUserSearchFilter());\n            //  ou=people\n            factory.setUserSearchBase(ldapProperties.getUserSearchBase());\n        }\n        factory.setUserDetailsContextMapper(new PersonContextMapper());\n        ProviderManager authenticationManager = (ProviderManager) factory.createAuthenticationManager();\n        return authenticationManager.getProviders().get(0);\n    }\n\n    private static BaseLdapPathContextSource buildContextSource(LdapProperties ldapProperties) {\n        try {\n            DefaultSpringSecurityContextSource contextSource = new DefaultSpringSecurityContextSource(\n                    Arrays.stream(ldapProperties.getUrls()).toList(), ldapProperties.getBase());\n            contextSource.setUrls(ldapProperties.getUrls());\n            contextSource.setBase(ldapProperties.getBase());\n            contextSource.setUserDn(ldapProperties.getUsername());\n            contextSource.setPassword(ldapProperties.getPassword());\n            contextSource.afterPropertiesSet();\n            return contextSource;\n        } catch (Exception e) {\n            log.info("\u6784\u5efa BaseLdapPathContextSource \u5f02\u5e38\uff0c\u8bf7\u68c0\u67e5Ldap\u914d\u7f6e\u4fe1\u606f", e);\n            return null;\n        }\n    }\n\n    private static BindAuthenticator buildAuthenticator(BaseLdapPathContextSource contextSource, LdapProperties ldapProperties) {\n        try {\n            BindAuthenticator authenticator = new BindAuthenticator(contextSource);\n            String userSearchFilter = ldapProperties.getUserSearchFilter();\n            if (userSearchFilter != null) {\n                authenticator.setUserSearch(\n                        new FilterBasedLdapUserSearch(ldapProperties.getUserSearchBase(), userSearchFilter, contextSource));\n            }\n            List<String> userDnPatterns = ldapProperties.getUserDnPatterns();\n            if (userDnPatterns != null && userDnPatterns.size() > 0) {\n                authenticator.setUserDnPatterns(userDnPatterns.toArray(new String[0]));\n            }\n            authenticator.afterPropertiesSet();\n            return authenticator;\n        } catch (Exception e) {\n            log.info("\u6784\u5efa BaseLdapPathContextSource \u5f02\u5e38\uff0c\u8bf7\u68c0\u67e5Ldap\u914d\u7f6e\u4fe1\u606f", e);\n            return null;\n        }\n    }\n}\n\n'})}),"\n",(0,i.jsx)(n.h3,{id:"8-dynamicprovidercontroller",children:"8. DynamicProviderController"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'package com.light.sas.controller;\n\nimport com.light.sas.model.Result;\nimport com.light.sas.properties.LdapProperties;\nimport com.light.sas.utils.LdapUtils;\nimport jakarta.annotation.Resource;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\nimport java.util.Objects;\n\n@RestController\n@RequestMapping("provider")\npublic class DynamicProviderController {\n\n    @Resource\n    private LdapProperties ldapProperties;\n\n    @Resource\n    private ProviderManager authenticationManager;\n\n    /**\n     * \u52a8\u6001\u5f00\u542fLdap\u8ba4\u8bc1\n     */\n    @PostMapping("ldap")\n    public Result<String> openLdapProvider() {\n        AbstractLdapAuthenticationProvider ldapAuthenticationProvider = LdapUtils.buildLdapProviderDelegator(ldapProperties);\n        List<AuthenticationProvider> providers = authenticationManager.getProviders();\n        for (AuthenticationProvider provider : providers) {\n            if (provider instanceof AbstractLdapAuthenticationProvider) {\n                return Result.error("Ldap Authentication Provider already exists!");\n            }\n        }\n        if (Objects.isNull(ldapAuthenticationProvider)) {\n            return Result.error("Ldap Authentication Provider properties configured with error!");\n        }\n        providers.add(0, ldapAuthenticationProvider);\n        return Result.success("Ldap Authentication Provider open success!");\n    }\n\n    /**\n     * \u52a8\u6001\u5173\u95edLdap\u8ba4\u8bc1\n     */\n    @DeleteMapping("ldap")\n    public Result<String> closeLdapProvider() {\n        List<AuthenticationProvider> providers = authenticationManager.getProviders();\n        for (int i = providers.size() - 1; i >= 0; i--) {\n            AuthenticationProvider provider = providers.get(i);\n            if (provider instanceof AbstractLdapAuthenticationProvider) {\n                providers.remove(i);\n            }\n        }\n        return Result.success("Ldap Authentication Provider close success!");\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"\u4e94\u6d4b\u8bd5",children:"\u4e94\u3001\u6d4b\u8bd5"}),"\n",(0,i.jsx)(n.h3,{id:"1-\u547d\u4ee4\u884c\u6d4b\u8bd5",children:"1. \u547d\u4ee4\u884c\u6d4b\u8bd5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"curl --include --location --request POST 'http://127.0.0.1:8080/login' \\\n    --header 'loginType: ldap' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'username=\"admin\"' \\\n    --form 'password=\"123456\"'\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-http",metastring:"request",children:'HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nSet-Cookie: SESSION=MzE2ODhlYzYtMzNlOC00NmFmLThmOGMtZGQ5NTMwMDg5NDQ4; Domain=127.0.0.1; Path=/; HttpOnly; SameSite=Lax\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Tue, 12 Mar 2024 11:21:40 GMT\n\n{"code":200,"message":"\u64cd\u4f5c\u6210\u529f.","success":true,"data":null}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-\u6d4f\u89c8\u5668\u6d4b\u8bd5",children:"2. \u6d4f\u89c8\u5668\u6d4b\u8bd5"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"# \u6d4f\u89c8\u5668\u8bbf\u95ee\u767b\u5f55\u9875\uff0c\u767b\u5f55\u65f6\u6dfb\u52a0\u8bf7\u6c42\u5934\u6216\u8005\u53c2\u6570 loginType: Ldap \u5373\u53ef\nhttp://127.0.0.1:5173\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);
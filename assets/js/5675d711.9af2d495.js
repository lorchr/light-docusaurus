"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[51159],{46892:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(74848),i=t(28453);const o={},a=void 0,c={id:"zh-cn/spring-security/Google-Authenticator",title:"Google-Authenticator",description:"\u63a5\u5165\u6d41\u7a0b",source:"@site/docs/zh-cn/spring-security/4-Google-Authenticator.md",sourceDirName:"zh-cn/spring-security",slug:"/zh-cn/spring-security/Google-Authenticator",permalink:"/docs/zh-cn/spring-security/Google-Authenticator",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-security/4-Google-Authenticator.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"troch",previous:{title:"Service-For-AD-Login",permalink:"/docs/zh-cn/spring-security/Service-For-AD-Login"},next:{title:"Untuntu-Install-Kerberos-Server",permalink:"/docs/zh-cn/spring-security/kerberos/Untuntu-Install-Kerberos-Server"}},s={},l=[{value:"\u63a5\u5165\u6d41\u7a0b",id:"\u63a5\u5165\u6d41\u7a0b",level:2},{value:"\u6dfb\u52a0\u4f9d\u8d56",id:"\u6dfb\u52a0\u4f9d\u8d56",level:2},{value:"\u751f\u6210\u5bc6\u94a5",id:"\u751f\u6210\u5bc6\u94a5",level:2},{value:"\u751f\u6210\u4e8c\u7ef4\u7801",id:"\u751f\u6210\u4e8c\u7ef4\u7801",level:2},{value:"\u9a8c\u8bc1TOTP",id:"\u9a8c\u8bc1totp",level:2}];function g(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\u63a5\u5165\u6d41\u7a0b",children:"\u63a5\u5165\u6d41\u7a0b"}),"\n",(0,r.jsx)(n.p,{children:"\u6211\u4e4b\u524d\u505a\u91cf\u5316\u7cfb\u7edf\u7684\u65f6\u5019\uff0c\u521a\u597d\u7814\u7a76\u8fc7\u8be5\u7c7b\u8ba4\u8bc1\u670d\u52a1\u7684\u63a5\u5165\u95ee\u9898\uff0c\u6211\u7ed9\u5927\u5bb6\u9610\u8ff0\u4e00\u4e0b\u6574\u4f53\u7684\u63a5\u5165\u6d41\u7a0b\uff1a"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u6dfb\u52a0\u4f9d\u8d56\u5e93\uff1a\u9996\u5148\u9700\u8981\u5f15\u5165\u652f\u6301TOTP\u7684\u5e93\uff0ccom.warrenstrange\u7684Google Authenticator\u662f\u4e00\u4e2a\u6d41\u884c\u7684\u9009\u62e9\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u751f\u6210\u5bc6\u94a5\uff1a\u4e3a\u6bcf\u4e2a\u7528\u6237\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u5bc6\u94a5\uff0c\u8fd9\u4e2a\u5bc6\u94a5\u4f1a\u88ab\u7528\u6237\u7528\u4e8eGoogle Authenticator\u5e94\u7528\u7684\u914d\u7f6e\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u751f\u6210\u4e8c\u7ef4\u7801\uff1a\u7528\u6237\u626b\u63cf\u8fd9\u4e2a\u4e8c\u7ef4\u7801\u6765\u5728Google Authenticator\u5e94\u7528\u4e2d\u914d\u7f6e\u8d26\u53f7\u3002"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"\u9a8c\u8bc1TOTP\uff1a\u9a8c\u8bc1\u7528\u6237\u5728Google Authenticator\u5e94\u7528\u4e2d\u751f\u6210\u7684\u4e00\u6b21\u6027\u5bc6\u7801(TOTP)\u662f\u5426\u6b63\u786e\u3002"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\u63a5\u4e0b\u6765\uff0c\u6211\u7ed9\u51fa\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\uff5e"}),"\n",(0,r.jsx)(n.h2,{id:"\u6dfb\u52a0\u4f9d\u8d56",children:"\u6dfb\u52a0\u4f9d\u8d56"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- https://mvnrepository.com/artifact/com.warrenstrange/googleauth --\x3e\n<dependency>\n    <groupId>com.warrenstrange</groupId>\n    <artifactId>googleauth</artifactId>\n    <version>1.5.0</version>\n</dependency>\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u751f\u6210\u5bc6\u94a5",children:"\u751f\u6210\u5bc6\u94a5"}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528GoogleAuthenticator\u5e93\u4e3a\u7528\u6237\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u5bc6\u94a5\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import com.warrenstrange.googleauth.GoogleAuthenticator;\nimport com.warrenstrange.googleauth.GoogleAuthenticatorKey;\n\npublic class TwoFactorAuth {\n    public static void main(String[] args) {\n        GoogleAuthenticator gAuth = new GoogleAuthenticator();\n        final GoogleAuthenticatorKey key = gAuth.createCredentials();\n        String secret = key.getKey();\n\n        System.out.println("Secret key: " + secret);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u751f\u6210\u4e8c\u7ef4\u7801",children:"\u751f\u6210\u4e8c\u7ef4\u7801"}),"\n",(0,r.jsx)(n.p,{children:"\u4f7f\u7528ZXing\u5e93\u751f\u6210\u4e8c\u7ef4\u7801\uff0c\u7528\u6237\u53ef\u4ee5\u626b\u63cf\u8fd9\u4e2a\u4e8c\u7ef4\u7801\u5c06\u5bc6\u94a5\u6dfb\u52a0\u5230Google Authenticator\u5e94\u7528\u4e2d\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.client.j2se.MatrixToImageWriter;\nimport com.google.zxing.common.BitMatrix;\nimport com.google.zxing.qrcode.QRCodeWriter;\nimport com.warrenstrange.googleauth.GoogleAuthenticator;\nimport com.warrenstrange.googleauth.GoogleAuthenticatorKey;\n\nimport java.io.IOException;\nimport java.nio.file.FileSystems;\nimport java.nio.file.Path;\n\npublic class GenerateQRCode {\n    public static void main(String[] args) {\n        GoogleAuthenticator gAuth = new GoogleAuthenticator();\n        final GoogleAuthenticatorKey key = gAuth.createCredentials();\n        String secret = key.getKey();\n\n        String email = "user@example.com";\n        String issuer = "ExampleApp";\n        String barCodeUrl = getGoogleAuthenticatorBarCode(secret, email, issuer);\n        System.out.println("QR Barcode URL: " + barCodeUrl);\n\n        try {\n            generateQRCodeImage(barCodeUrl, 350, 350, "QRCode.png");\n        } catch (WriterException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static String getGoogleAuthenticatorBarCode(String secretKey, String account, String issuer) {\n        return "otpauth://totp/"\n                + issuer + ":"\n                + account + "?secret=" + secretKey\n                + "&issuer=" + issuer;\n    }\n\n    private static void generateQRCodeImage(String text, int width, int height, String filePath)\n            throws WriterException, IOException {\n        QRCodeWriter qrCodeWriter = new QRCodeWriter();\n        BitMatrix bitMatrix = qrCodeWriter.encode(text, BarcodeFormat.QR_CODE, width, height);\n\n        Path path = FileSystems.getDefault().getPath(filePath);\n        MatrixToImageWriter.writeToPath(bitMatrix, "PNG", path);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u9a8c\u8bc1totp",children:"\u9a8c\u8bc1TOTP"}),"\n",(0,r.jsx)(n.p,{children:"\u7528\u6237\u5728Google Authenticator\u5e94\u7528\u4e2d\u8f93\u5165\u751f\u6210\u7684\u9a8c\u8bc1\u7801\uff0c\u4f60\u9700\u8981\u9a8c\u8bc1\u8fd9\u4e2a\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import com.warrenstrange.googleauth.GoogleAuthenticator;\n\npublic class VerifyTOTP {\n    public static void main(String[] args) {\n        GoogleAuthenticator gAuth = new GoogleAuthenticator();\n        String secretKey = "\u7528\u6237\u7684\u5bc6\u94a5";\n        int verificationCode = 123456;  // \u7528\u6237\u4eceGoogle Authenticator\u5e94\u7528\u4e2d\u8f93\u5165\u7684\u9a8c\u8bc1\u7801\n\n        boolean isCodeValid = gAuth.authorize(secretKey, verificationCode);\n        if (isCodeValid) {\n            System.out.println("\u9a8c\u8bc1\u6210\u529f");\n        } else {\n            System.out.println("\u9a8c\u8bc1\u5931\u8d25");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u4ee5\u4e0a\u5c31\u662f\u4f7f\u7528Java\u96c6\u6210Google Authenticator\u7684\u5b8c\u6574\u6d41\u7a0b\u548c\u4ee3\u7801\u5b9e\u73b0\uff0c\u4e5f\u662f\u63a5\u5165\u4e8c\u6b21\u8ba4\u8bc1\u7684\u6574\u4e2a\u6d41\u7a0b\uff0c\u4e3a\u4f60\u7684\u7cfb\u7edf\u589e\u52a0\u4e86\u4e00\u9053\u5b89\u5168\u5c4f\u969c\uff01"}),"\n",(0,r.jsx)(n.p,{children:"1\u3001\u8fd9\u91cc\uff0c\u5efa\u8bae\u7528 org.jboss.aerogear.security.otp - \u7528\u4e8e\u751f\u6210\u548c\u9a8c\u8bc1 TOTP\uff0c\u5e76\u63d0\u4f9b\u4e86\u9700\u8981\u7684\u4f9d\u8d56jar\u5305\uff0c\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.jboss.aerogear</groupId>\n    <artifactId>aerogear-otp-java</artifactId>\n    <version>1.0.0</version>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.p,{children:"2\u3001\u521b\u5efa\u4e00\u4e2a\u670d\u52a1\u6765\u751f\u6210\u548c\u9a8c\u8bc1 TOTP\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.jboss.aerogear.security.otp.Totp;\nimport org.jboss.aerogear.security.otp.api.Base32;\n\npublic class TotpService {\n\n    public String generateSecretKey() {\n        return Base32.random();\n    }\n\n    public String getTotpUri(String secretKey, String username) {\n        return "otpauth://totp/YourAppName:" + username + "?secret=" + secretKey + "&issuer=YourAppName";\n    }\n\n    public boolean verifyCode(String code, String secretKey) {\n        Totp totp = new Totp(secretKey);\n        return totp.verify(code);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"3\u3001\u7528\u6237\u6ce8\u518c\u65f6\u751f\u6210\u4e00\u4e2a\u5bc6\u94a5\uff0c\u6fc0\u6d3b\u4e8c\u6b21\u8ba4\u8bc1\u65f6\u5c06\u8be5\u5bc6\u94a5\u8f6c\u6362\u4e3a\u4e8c\u7ef4\u7801\u4f9b\u7528\u6237\u626b\u63cf\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class UserService {\n    private TotpService totpService = new TotpService();\n\n    public void registerUser(String username, String password) {\n        String secretKey = totpService.generateSecretKey();\n        // \u5c06 secretKey \u5b58\u50a8\u4e8e\u6570\u636e\u5e93\u4e2d\uff0c\u4e0e\u7528\u6237\u8d26\u6237\u5173\u8054\n    }\n\n    public String enable2Fa(String username) {\n        String secretKey = // \u4ece\u6570\u636e\u5e93\u83b7\u53d6\n        return totpService.getTotpUri(secretKey, username);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"4\u3001\u6700\u540e\uff0c\u7528\u6237\u767b\u5f55\u76f8\u5173\u7684\u4ee3\u7801\u4e5f\u7ed9\u51fa\u6765\u4e86\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class AuthenticationController {\n    private UserService userService = new UserService();\n\n    @PostMapping("/login")\n    public ResponseEntity<?> login(@RequestParam String username, @RequestParam String password, @RequestParam String totpCode) {\n        // \u6b63\u5e38\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u9a8c\u8bc1\u903b\u8f91\n        String secretKey = // \u4ece\u6570\u636e\u5e93\u83b7\u53d6\n        if (userService.verifyTotp(totpCode, secretKey)) {\n            // \u9a8c\u8bc1\u6210\u529f\uff0c\u8fdb\u5165\u5e94\u7528\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u4efd\u4ee3\u7801\u53ea\u662f\u4e00\u4e2a\u521d\u7a3f\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u6bd5\u7adf\u8fd8\u7f3a\u5c11\u9519\u8bef\u5904\u7406\u3001\u65e5\u5fd7\u8bb0\u5f55\u4ee5\u53ca\u5b89\u5168\u6027\u914d\u7f6e\u76f8\u5173\u7684\u4ee3\u7801\u3002"})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(96540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[70530],{12287:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=t(74848),r=t(28453);const o={},s=void 0,i={id:"zh-cn/spring-boot/Spring-Boot-Json-Diff",title:"Spring-Boot-Json-Diff",description:"\u80cc\u666f",source:"@site/docs/zh-cn/spring-boot/9-Spring-Boot-Json-Diff.md",sourceDirName:"zh-cn/spring-boot",slug:"/zh-cn/spring-boot/Spring-Boot-Json-Diff",permalink:"/docs/zh-cn/spring-boot/Spring-Boot-Json-Diff",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-boot/9-Spring-Boot-Json-Diff.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"troch",previous:{title:"Spring-Boot-Ip-Ragion-Parse",permalink:"/docs/zh-cn/spring-boot/Spring-Boot-Ip-Ragion-Parse"},next:{title:"Spring-Boot-Native-Memory-Leak",permalink:"/docs/zh-cn/spring-boot/Spring-Boot-Native-Memory-Leak"}},p={},l=[{value:"\u80cc\u666f",id:"\u80cc\u666f",level:2},{value:"\u8bf4\u660e",id:"\u8bf4\u660e",level:2},{value:"\u6e90\u7801",id:"\u6e90\u7801",level:2},{value:"\u6e90\u7801\u8d70\u8bfb",id:"\u6e90\u7801\u8d70\u8bfb",level:2},{value:"\u5176\u4ed6",id:"\u5176\u4ed6",level:2}];function c(n){const e={code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h2,{id:"\u80cc\u666f",children:"\u80cc\u666f"}),"\n",(0,a.jsx)(e.p,{children:"\u4e4b\u524d\u6709\u7c7b\u4f3c\u63a5\u53e3diff\u5bf9\u6bd4\uff0c\u6570\u636e\u5bf9\u6bd4\u7684\u6d4b\u8bd5\u9700\u6c42\uff0c\u6d89\u53ca\u5230json\u683c\u5f0f\u7684\u6570\u636e\u5bf9\u6bd4\uff0c\u8c03\u7814\u4e86\u51e0\u4e2a\u5927\u795e\u4eec\u5206\u4eab\u7684\u4ee3\u7801\uff0c\u9009\u4e86\u4e00\u4e2a\u6700\u7b26\u5408\u81ea\u5df1\u9700\u6c42\u7684\u7814\u7a76\u4e86\u4e0b\u3002"}),"\n",(0,a.jsx)(e.h2,{id:"\u8bf4\u660e",children:"\u8bf4\u660e"}),"\n",(0,a.jsx)(e.p,{children:"\u8fd9\u4e2a\u5bf9\u6bd4\u65b9\u6cd5\uff0c\u652f\u6301JsonObject\u548cJsonArray\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u6bd4\uff0c\u652f\u6301\uff1a"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"\u6df1\u5ea6\u7684\u5bf9\u6bd4\uff1alist\u53d8\u5316\uff08\u4e2a\u6570\u3001\u5185\u5bb9\uff09\u3001\u5c42\u7ea7\u7ed3\u6784\u53d8\u5316"}),"\n",(0,a.jsx)(e.li,{children:"\u5b57\u6bb5\u7684\u5bf9\u6bd4\uff1a\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u6570\u636e\u53ef\u5bdf\u89c9\uff0c\u80fd\u627e\u5230\u5bf9\u5e94\u7684\u65e7\u6570\u636e"}),"\n",(0,a.jsx)(e.li,{children:"\u652f\u6301\u7279\u5b9a\u5b57\u6bb5\u5ffd\u7565\u5bf9\u6bd4"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"\u8f93\u51fa\u7684\u5bf9\u6bd4\u7ed3\u679c\u683c\u5f0f\u4e3a\uff1a"}),"\n",(0,a.jsx)(e.p,{children:"\u6e90\u7801\u5206\u4e3aJsonCompareUtils\uff0c JsonAndMapSortUtils\u4e24\u4e2a\u7c7b\uff0c\u5bf9\u6bd4\u5165\u53e3\u662fcompareTwoJson\u65b9\u6cd5"}),"\n",(0,a.jsx)(e.p,{children:"\u6838\u5fc3\u903b\u8f91\u5728JsonCompareUtils\u7c7b\u4e2d\uff0cJsonAndMapSortUtils\u4e3b\u8981\u505a\u8fc7\u7a0b\u4e2d\u7684\u6570\u636e\u6392\u5e8f\u529f\u80fd\uff0c\u76f8\u5bf9\u72ec\u7acb\u3002"}),"\n",(0,a.jsx)(e.h2,{id:"\u6e90\u7801",children:"\u6e90\u7801"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'package com.xhzyqa.transcodetest.utils;\n \n \nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport org.apache.commons.lang.ArrayUtils;\nimport org.apache.commons.lang.StringUtils;\n \nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.stream.Stream;\n \npublic class JsonCompareUtils {\n \n    //\u6807\u5fd7\u4f4d\uff1a\u5bf9json\u62a5\u6587\u4e2d\u542b\u6709JsonArray\u7c7b\u578b\u7684\u6570\u636e\u662f\u5426\u8fdb\u884c\u6392\u5e8f\n    private static boolean isSort;\n \n    private Map<String, Object> oldJsonToMap = new LinkedHashMap<>();\n    private Map<String, Object> newJsonToMap = new LinkedHashMap<>();\n \n    //\u6bcf\u4e00\u4e2a\u5b9e\u4f53\u91cc\u7684\u6392\u5e8f\u5b57\u6bb5\n    private static Map<String, String> filedNameMap = new HashMap<>();\n \n    static {\n        filedNameMap.put("dogs", "dogNo");\n        filedNameMap.put("cats", "catNo");\n    }\n \n    //\u53ef\u4ee5\u8df3\u8fc7\u6bd4\u5bf9\u7684\u5b57\u6bb5\n//    private static String[] skipCompareFiledNameMap = {"dogAge", "catAge", "catName"};\n    private static String[] skipCompareFiledNameMap = {"key3"};\n \n    /**\n     * \u4e24json\u62a5\u6587\u6bd4\u5bf9\u5165\u53e3\n     *\n     * @param oldJsonStr\n     * @param newJsonStr\n     * @return\n     */\n    public String compareTwoJson(String oldJsonStr, String newJsonStr) {\n        /**\n         * \u9012\u5f52\u904d\u5386json\u5bf9\u8c61\u6240\u6709\u7684key-value\uff0c\u4ee5map\u5f62\u5f0f\u7684path:value\u8fdb\u884c\u5b58\u50a8\n         * \u7136\u540e\u5bf9\u4e24\u4e2amap\u8fdb\u884c\u6bd4\u8f83\n         */\n        convertJsonToMap(JSON.parseObject(oldJsonStr), "", false);\n        convertJsonToMap(JSON.parseObject(newJsonStr), "", true);\n        //\u83b7\u53d6\u6bd4\u8f83\u7ed3\u679c\n        Map<String, Object> differenceMap = compareTwoMaps(oldJsonToMap, newJsonToMap);\n        String diffJsonResult = convertMapToJson(differenceMap);\n        return diffJsonResult;\n    }\n \n    /**\n     * \u5c06json\u6570\u636e\u8f6c\u6362\u4e3amap\u5b58\u50a8--\u7528\u4e8e\u540e\u7eed\u6bd4\u8f83map\n     *\n     * @param json\n     * @param root\n     * @param isNew \u533a\u522b\u65b0\u65e7\u62a5\u6587\n     */\n    private void convertJsonToMap(Object json, String root, boolean isNew) {\n        if (json instanceof JSONObject) {\n            JSONObject jsonObject = ((JSONObject) json);\n            Iterator iterator = jsonObject.keySet().iterator();\n            while (iterator.hasNext()) {\n                Object key = iterator.next();\n                Object value = jsonObject.get(key);\n                String newRoot = "".equals(root) ? key + "" : root + "." + key;\n                fillInResultMap(value, newRoot, isNew);\n            }\n        } else if (json instanceof JSONArray) {\n            JSONArray jsonArray = (JSONArray) json;\n            //\u5c06jsonArray\u8fdb\u884c\u6392\u5e8f\n            if (isSort) {\n                //\u9700\u8981\u6392\u5e8f\n                String sortEntityName = root.substring(root.lastIndexOf(".") + 1);\n                String sortFiledName = filedNameMap.get(sortEntityName);//\u9700\u8981\u6392\u5e8f \u83b7\u53d6\u6392\u5e8f\u5b57\u6bb5\n                if (!StringUtils.isEmpty(sortFiledName)) {\n                    jsonArray = JsonAndMapSortUtils.jsonArrayToSort(jsonArray, sortFiledName, true);\n                }\n            }\n            final JSONArray jsonArray1 = jsonArray;\n            Stream.iterate(0, integer -> integer + 1).limit(jsonArray1.size()).forEach(index -> {\n                Object value = jsonArray1.get(index);\n                String newRoot = "".equals(root) ? "[" + index + "]" : root + ".[" + index + "]";\n                fillInResultMap(value, newRoot, isNew);\n            });\n        }\n    }\n \n    /**\n     * \u5c01\u88c5json\u8f6cmap\u540e\u7684\u6570\u636e\n     *\n     * @param value\n     * @param newRoot\n     * @param isNew   \u533a\u522b\u65b0\u65e7json\n     */\n    public void fillInResultMap(Object value, String newRoot, boolean isNew) {\n        if (value instanceof JSONObject || value instanceof JSONArray) {\n            convertJsonToMap(value, newRoot, isNew);\n        } else {\n            //\u8bbe\u7f6e\u8df3\u8fc7\u6bd4\u5bf9\u7684\u5b57\u6bb5\uff0c\u76f4\u63a5\u4e0d\u88c5\u5165map\n            boolean check = ArrayUtils.contains(JsonCompareUtils.skipCompareFiledNameMap, newRoot);\n            if (!check){\n                if (!isNew) {\n                    oldJsonToMap.put(newRoot, value);\n                } else {\n                    newJsonToMap.put(newRoot, value);\n                }\n            }\n        }\n    }\n \n    /**\n     * \u6bd4\u8f83\u4e24\u4e2amap\uff0c\u5c06\u4e0d\u540c\u7684\u6570\u636e\u4ee5map\u5f62\u5f0f\u5b58\u50a8\u5e76\u8fd4\u56de\n     *\n     * @param oldJsonMap\n     * @param newJsonMap\n     * @return\n     */\n    private Map<String, Object> compareTwoMaps(Map<String, Object> oldJsonMap, Map<String, Object> newJsonMap) {\n        //1.\u5c06newJsonMap\u7684\u4e0d\u540c\u6570\u636e\u88c5\u8fdboldJsonMap\uff0c\u540c\u65f6\u5220\u9664oldJsonMap\u4e2d\u4e0enewJsonMap\u76f8\u540c\u7684\u6570\u636e\n        newJsonMap.forEach((k, v) -> {\n            Map<String, Object> differenceMap = new HashMap<>();\n            String lastFieldKey = k.substring(k.lastIndexOf(".") + 1);\n//            boolean check = ArrayUtils.contains(JsonCompareUtils.skipCompareFiledNameMap, lastFieldKey);\n//            if (!check){\n            if (oldJsonMap.containsKey(k)) {\n//                boolean check = ArrayUtils.contains(JsonCompareUtils.skipCompareFiledNameMap, lastFieldKey);\n                Object oldValue = oldJsonMap.get(k);\n                if (v.equals(oldValue)) {\n                    oldJsonMap.remove(k);\n                } else {\n                    differenceMap.put("oldValue", oldValue);\n                    differenceMap.put("newValue", v);\n                    oldJsonMap.put(k, differenceMap);\n                }\n            } else {\n                differenceMap.put("oldValue", "no exists " + k);\n                differenceMap.put("newValue", v);\n                oldJsonMap.put(k, differenceMap);\n            }\n//            }else {\n//                oldJsonMap.remove(k);\n//            }\n        });\n        //2.\u7edf\u4e00oldJsonMap\u4e2dnewMap\u4e0d\u5b58\u5728\u7684\u6570\u636e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4fbf\u4e8e\u89e3\u6790\n        oldJsonMap.forEach((k, v) -> {\n            String lastFieldKey = k.substring(k.lastIndexOf(".") + 1);\n//            boolean check = ArrayUtils.contains(JsonCompareUtils.skipCompareFiledNameMap, lastFieldKey);\n//            if (!check && !(v instanceof Map)) {\n            if (!(v instanceof Map)) {\n                Map<String, Object> differenceMap = new HashMap<>();\n                differenceMap.put("oldValue", v);\n                differenceMap.put("newValue", "no exists " + k);\n                oldJsonMap.put(k, differenceMap);\n            }\n        });\n        return oldJsonMap;\n    }\n \n    /**\n     * \u5c06\u5df2\u7ecf\u627e\u51fa\u4e0d\u540c\u6570\u636e\u7684map\u6839\u636ekey\u7684\u5c42\u7ea7\u7ed3\u6784\u5c01\u88c5\u6210json\u8fd4\u56de\n     *\n     * @param map\n     * @return\n     */\n    private String convertMapToJson(Map<String, Object> map) {\n        JSONObject resultJSONObject = new JSONObject();\n        for (Iterator<Map.Entry<String, Object>> it = map.entrySet().iterator(); it.hasNext(); ) {\n            Map.Entry<String, Object> item = it.next();\n            String key = item.getKey();\n            Object value = item.getValue();\n            String[] paths = key.split("\\\\.");\n            int i = 0;\n            Object remarkObject = null;//\u7528\u65bc\u6df1\u5ea6\u6a19\u8b58\u5c0d\u8c61\n            int indexAll = paths.length - 1;\n            while (i <= paths.length - 1) {\n                String path = paths[i];\n                if (i == 0) {\n                    //\u521d\u59cb\u5316\u5bf9\u8c61\u6807\u8bc6\n                    if (resultJSONObject.containsKey(path)) {\n                        remarkObject = resultJSONObject.get(path);\n                    } else {\n                        if (indexAll > i) {\n                            if (paths[i + 1].matches("\\\\[[0-9]+\\\\]")) {\n                                remarkObject = new JSONArray();\n                            } else {\n                                remarkObject = new JSONObject();\n                            }\n                            resultJSONObject.put(path, remarkObject);\n                        } else {\n                            resultJSONObject.put(path, value);\n                        }\n                    }\n                    i++;\n                    continue;\n                }\n                if (path.matches("\\\\[[0-9]+\\\\]")) {//\u5339\u914d\u96c6\u5408\u5bf9\u8c61\n                    int startIndex = path.lastIndexOf("[");\n                    int endIndext = path.lastIndexOf("]");\n                    int index = Integer.parseInt(path.substring(startIndex + 1, endIndext));\n                    if (indexAll > i) {\n                        if (paths[i + 1].matches("\\\\[[0-9]+\\\\]")) {\n                            while (((JSONArray) remarkObject).size() <= index) {\n                                if (((JSONArray) remarkObject).size() == index) {\n                                    ((JSONArray) remarkObject).add(index, new JSONArray());\n                                } else {\n                                    ((JSONArray) remarkObject).add(null);\n                                }\n                            }\n                        } else {\n                            while (((JSONArray) remarkObject).size() <= index) {\n                                if (((JSONArray) remarkObject).size() == index) {\n                                    ((JSONArray) remarkObject).add(index, new JSONObject());\n                                } else {\n                                    ((JSONArray) remarkObject).add(null);\n                                }\n                            }\n                        }\n                        remarkObject = ((JSONArray) remarkObject).get(index);\n                    } else {\n                        while (((JSONArray) remarkObject).size() <= index) {\n                            if (((JSONArray) remarkObject).size() == index) {\n                                ((JSONArray) remarkObject).add(index, value);\n                            } else {\n                                ((JSONArray) remarkObject).add(null);\n                            }\n                        }\n                    }\n                } else {\n                    if (indexAll > i) {\n                        if (paths[i + 1].matches("\\\\[[0-9]+\\\\]")) {\n                            if (!((JSONObject) remarkObject).containsKey(path)) {\n                                ((JSONObject) remarkObject).put(path, new JSONArray());\n                            }\n                        } else {\n                            if (!((JSONObject) remarkObject).containsKey(path)) {\n                                ((JSONObject) remarkObject).put(path, new JSONObject());\n                            }\n                        }\n                        remarkObject = ((JSONObject) remarkObject).get(path);\n                    } else {\n                        ((JSONObject) remarkObject).put(path, value);\n                    }\n                }\n                i++;\n            }\n        }\n        return JSON.toJSONString(resultJSONObject);\n    }\n \n    public boolean isSort() {\n        return isSort;\n    }\n \n    public void setSort(boolean sort) {\n        isSort = sort;\n    }\n \n    public static void main(String[] args) {\n        String oldStr = "{key1:\'aaa\',key2:\'bbb\'}";\n        String newStr = "{key1:\'aaa\',key2:\'bbb\',key3:\'c\'}";\n        System.out.println(new JsonCompareUtils().compareTwoJson(oldStr, newStr));\n        System.out.println("\\n========\u6d4b\u8bd5\u590d\u6742json\u7684\u6bd4\u5bf9============");\n    }\n \n    /**\n     * \u6d4b\u8bd5\u7c7b\n    static class JsonCompareTest {\n        public static void compareTest() {\n            String oldJson = MakeJsonCompareDatas.getJsonDataOldStr();\n            String newJson = MakeJsonCompareDatas.getJsonDataNewStr();\n            //\u5bf9json\u62a5\u6587\u4e2d\u542b\u6709JsonArray\u7c7b\u578b\u7684\u6570\u636e\u662f\u5426\u8fdb\u884c\u6392\u5e8f\n            JsonCompareUtils.isSort = true;\n            String compareResult = new JsonCompareUtils().compareTwoJson(oldJson, newJson);\n            System.out.println("oldJson==>" + oldJson);\n            System.out.println("newJson==>" + newJson);\n            System.out.println("\\nisSort==" + isSort + "--\x3ecompareResult==>\\n" + compareResult);\n        }\n    }\n     */\n}\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'package com.xhzyqa.transcodetest.utils;\n \n \nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport sun.misc.ASCIICaseInsensitiveComparator;\n \nimport java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n \npublic class JsonAndMapSortUtils {\n \n    /**\n     * map\u6392\u5e8f\n     * @param map\n     * @param keySort\n     * @param <k>\n     * @param <v>\n     * @return\n     */\n    public static <k,v> List mapByKeyToSort(Map<k,v> map , final Comparator keySort){\n        List<Map.Entry<k,v>> entryList = new ArrayList<Map.Entry<k, v>>(map.entrySet());\n        Collections.sort(entryList, new Comparator<Map.Entry<k, v>>() {\n            public int compare(Map.Entry<k, v> o1, Map.Entry<k, v> o2) {\n                return keySort.compare(o1.getKey(),o2.getKey());\n            }\n        });\n        //return (Map<k,v>)entryList.stream().collect(Collectors.toMap(Map.Entry<k,v>::getKey, Function.identity(), (key1, key2) -> key2));\n        Map<String,String> afterToSortMap = new HashMap<>();\n        /*for (Map.Entry<k,v> m : entryList){\n            System.out.println(m.getKey()+"===>"+m.getValue());\n        }*/\n        System.out.println("\u6392\u5e8f=====");\n        entryList.forEach(m->{\n            System.out.println(m.getKey()+"===>"+m.getValue());\n        });\n        return entryList;\n    }\n \n    /**\n     * JSONArray\u6392\u5e8f\n     * @param jsonArray\n     * @param fildName\n     * @param isAsc\n     * @return\n     */\n    public static JSONArray jsonArrayToSort(JSONArray jsonArray,final String fildName,final boolean isAsc){\n        JSONArray afterSortJsonArray = new JSONArray();\n        List<JSONObject> objectList = new ArrayList<JSONObject>();\n        jsonArray.forEach(obj ->{\n            objectList.add((JSONObject)obj);\n        });\n        Collections.sort(objectList, new Comparator<JSONObject>() {\n            @Override\n            public int compare(JSONObject o1, JSONObject o2) {\n                String fildValueA = o1.getString(fildName);\n                String fildValueB = o2.getString(fildName);\n                if (isAsc)\n                    return fildValueA.compareTo(fildValueB);\n                return fildValueB.compareTo(fildValueA);\n            }\n        });\n        objectList.forEach(obj->{\n            afterSortJsonArray.add(obj);\n        });\n        return afterSortJsonArray;\n    }\n \n    /**\n     *\u51c6\u5907map\u6d4b\u8bd5\u6570\u636e\n     */\n    public static Map<String,String> getMapData(){\n        LinkedHashMap<String,String> map = new LinkedHashMap<>();\n        map.put("key1","\u9ea6\u515c");\n        map.put("key3","\u8d1d\u5854");\n        map.put("key5","\u9165\u59ae");\n        map.put("key2","\u5c0fH");\n        map.put("key4","\u5c0fO");\n        return map;\n    }\n    /**\n     *\u51c6\u5907json\u6d4b\u8bd5\u6570\u636e\n     */\n    public static JSONArray getJsonArrayData(){\n        JSONArray jsonArray = new JSONArray();\n        JSONObject jsonObject1 = new JSONObject();\n        jsonObject1.put("userId","1001");\n        jsonObject1.put("name","\u9ea6\u515c");\n        jsonArray.add(jsonObject1);\n \n        JSONObject jsonObject3 = new JSONObject();\n        jsonObject3.put("userId","1003");\n        jsonObject3.put("name","\u9165\u59ae");\n        jsonArray.add(jsonObject3);\n \n        JSONObject jsonObject2 = new JSONObject();\n        jsonObject2.put("userId","1002");\n        jsonObject2.put("name","\u8d1d\u5854");\n        jsonArray.add(jsonObject2);\n \n        return jsonArray;\n    }\n \n    public static void main(String[] args) {\n        Map<String,String> map = JsonAndMapSortUtils.getMapData();\n        JSONArray jsonArray = JsonAndMapSortUtils.getJsonArrayData();\n        List afterSortMap = JsonAndMapSortUtils.mapByKeyToSort(map,new ASCIICaseInsensitiveComparator());\n \n        JSONArray afterSortJsonArray_isAsc = JsonAndMapSortUtils.jsonArrayToSort(jsonArray,"userId",true);\n        JSONArray afterSortJsonArray_noAsc = JsonAndMapSortUtils.jsonArrayToSort(jsonArray,"userId",false);\n \n        System.out.println("map\u6392\u5e8f\u524d\uff1a"+map);\n        System.out.println("map\u6392\u5e8f\u540e\uff1a"+afterSortMap+"\\n");\n \n        System.out.println("JsonArray\u6392\u5e8f\u524d\uff1a"+jsonArray);\n        System.out.println("JsonArray\u6392\u5e8f\u540e==\u300b\u5347\u5e8f\uff1a"+afterSortJsonArray_isAsc);\n        System.out.println("JsonArray\u6392\u5e8f\u540e==\u300b\u964d\u5e8f\uff1a"+afterSortJsonArray_noAsc);\n    }\n \n \n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"\u6e90\u7801\u8d70\u8bfb",children:"\u6e90\u7801\u8d70\u8bfb"}),"\n",(0,a.jsxs)(e.p,{children:["\u6574\u4e2a\u6e90\u7801\u8c03\u7528\u94fe\u8def\u5982\u4e0b\u56fe\uff0c\u7b80\u5355\u6765\u8bf4\u8fc7\u7a0b\u5c31\u662f\uff1aobject\u62c6\u5206\u89e3\u6790-\u65b0\u65e7\u6570\u636e\u9010\u4e2a\u5bf9\u6bd4-\u7ed3\u679c\u4fe1\u606f\u7ec4\u88c5\u4e09\u4e2a\u6b65\u9aa4\n",(0,a.jsx)(e.img,{alt:"json-diff.png",src:t(42252).A+"",width:"824",height:"1561"})]}),"\n",(0,a.jsx)(e.h2,{id:"\u5176\u4ed6",children:"\u5176\u4ed6"}),"\n",(0,a.jsx)(e.p,{children:"\u539f\u59cb\u4ee3\u7801\u4e2d\u6709\u4e9b\u5c0fbug\uff0c\u5df2\u4fee\u590d\u3002\u76ee\u524d\u8fd9\u4e2a\u5de5\u5177\u4e3b\u8981\u88ab\u6211\u62ff\u6765\u7528\u5728\u4e86\u4e00\u4e2a\u63a5\u53e3\u6570\u636e\u5bf9\u6bd4\u5de5\u5177\u4e2d\uff0c\u6765\u68c0\u6d4b\u8fed\u4ee3\u524d\u540e\u7684\u63a5\u53e3\u534f\u8bae\u6570\u636e\u53d8\u66f4\uff0c\u4ee5\u5b8c\u5584\u8fed\u4ee3\u53d8\u66f4\u8303\u56f4\u6765\u786e\u8ba4\u6d4b\u8bd5\u8303\u56f4"})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},42252:(n,e,t)=>{t.d(e,{A:()=>a});const a=t.p+"assets/images/json-diff-d330510064f34b091b219eb6a2bfd42e.png"},28453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>i});var a=t(96540);const r={},o=a.createContext(r);function s(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);
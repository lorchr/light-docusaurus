"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[97049],{28453:(n,e,a)=>{a.d(e,{R:()=>i,x:()=>l});var r=a(96540);const o={},t=r.createContext(o);function i(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(t.Provider,{value:e},n.children)}},69388:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zh-cn/spring-boot/Spring-Boot-Dynamic-Load-Plugin","title":"Spring-Boot-Dynamic-Load-Plugin","description":"- Spring Boot \u52a8\u6001\u52a0\u8f7djar\u5305\uff0c\u52a8\u6001\u914d\u7f6e\u592a\u5f3a\u4e86\uff01","source":"@site/docs/zh-cn/spring-boot/Spring-Boot-Dynamic-Load-Plugin.md","sourceDirName":"zh-cn/spring-boot","slug":"/zh-cn/spring-boot/Spring-Boot-Dynamic-Load-Plugin","permalink":"/docs/zh-cn/spring-boot/Spring-Boot-Dynamic-Load-Plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-boot/Spring-Boot-Dynamic-Load-Plugin.md","tags":[],"version":"current","frontMatter":{},"sidebar":"troch","previous":{"title":"Spring-Boot-Dynamic-DataSource","permalink":"/docs/zh-cn/spring-boot/Spring-Boot-Dynamic-DataSource"},"next":{"title":"Spring-Boot-No-Stop-Update","permalink":"/docs/zh-cn/spring-boot/Spring-Boot-No-Stop-Update"}}');var o=a(74848),t=a(28453);const i={},l=void 0,s={},c=[{value:"\u4e00\u3001\u6982\u8ff0",id:"\u4e00\u6982\u8ff0",level:2},{value:"1\u3001\u80cc\u666f",id:"1\u80cc\u666f",level:3},{value:"2\u3001\u76ee\u6807",id:"2\u76ee\u6807",level:3},{value:"3\u3001\u65b9\u6848",id:"3\u65b9\u6848",level:3},{value:"\u4e8c\u3001\u52a8\u6001\u52a0\u8f7d",id:"\u4e8c\u52a8\u6001\u52a0\u8f7d",level:2},{value:"1\u3001\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668",id:"1\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668",level:3},{value:"2\u3001\u52a8\u6001\u52a0\u8f7d",id:"2\u52a8\u6001\u52a0\u8f7d",level:3},{value:"3\u3001\u52a8\u6001\u5378\u8f7d",id:"3\u52a8\u6001\u5378\u8f7d",level:3},{value:"4\u3001\u52a8\u6001\u914d\u7f6e",id:"4\u52a8\u6001\u914d\u7f6e",level:3},{value:"4.1 \u52a8\u6001\u4fee\u6539\u672c\u5730yml",id:"41-\u52a8\u6001\u4fee\u6539\u672c\u5730yml",level:4},{value:"4.1.1 \u4f9d\u8d56\u5f15\u5165",id:"411-\u4f9d\u8d56\u5f15\u5165",level:5},{value:"4.1.2 \u5de5\u5177\u7c7b",id:"412-\u5de5\u5177\u7c7b",level:5},{value:"4.2 \u52a8\u6001\u4fee\u6539nacos\u914d\u7f6e",id:"42-\u52a8\u6001\u4fee\u6539nacos\u914d\u7f6e",level:4},{value:"\u4e09\u3001\u5206\u79bb\u6253\u5305",id:"\u4e09\u5206\u79bb\u6253\u5305",level:2}];function p(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://mp.weixin.qq.com/s/Y4aXjr5F8JlZNSwzla1ebw",children:"Spring Boot \u52a8\u6001\u52a0\u8f7djar\u5305\uff0c\u52a8\u6001\u914d\u7f6e\u592a\u5f3a\u4e86\uff01"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u4e00\u6982\u8ff0",children:"\u4e00\u3001\u6982\u8ff0"}),"\n",(0,o.jsx)(e.h3,{id:"1\u80cc\u666f",children:"1\u3001\u80cc\u666f"}),"\n",(0,o.jsx)(e.p,{children:"\u76ee\u524d\u6570\u636e\u6cbb\u7406\u670d\u52a1\u4e2d\u6709\u4f17\u591a\u6cbb\u7406\u4efb\u52a1\uff0c\u5f53\u5176\u4e2d\u4efb\u4e00\u6cbb\u7406\u4efb\u52a1\u6709\u6539\u52a8\u9700\u8981\u5347\u7ea7\u6216\u65b0\u589e\u4e00\u4e2a\u6cbb\u7406\u4efb\u52a1\u65f6\uff0c\u90fd\u9700\u8981\u5c06\u6570\u636e\u6cbb\u7406\u670d\u52a1\u91cd\u542f\uff0c\u4f1a\u5f71\u54cd\u5176\u4ed6\u6cbb\u7406\u4efb\u52a1\u7684\u6b63\u5e38\u8fd0\u884c\u3002"}),"\n",(0,o.jsx)(e.h3,{id:"2\u76ee\u6807",children:"2\u3001\u76ee\u6807"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u80fd\u591f\u52a8\u6001\u542f\u52a8\u3001\u505c\u6b62\u4efb\u4e00\u6cbb\u7406\u4efb\u52a1"}),"\n",(0,o.jsx)(e.li,{children:"\u80fd\u591f\u52a8\u6001\u5347\u7ea7\u3001\u6dfb\u52a0\u6cbb\u7406\u4efb\u52a1"}),"\n",(0,o.jsx)(e.li,{children:"\u542f\u52a8\u3001\u505c\u6b62\u6cbb\u7406\u4efb\u52a1\u6216\u5347\u7ea7\u3001\u6dfb\u52a0\u6cbb\u7406\u4efb\u52a1\u4e0d\u80fd\u5f71\u54cd\u5176\u4ed6\u4efb\u52a1"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"3\u65b9\u6848",children:"3\u3001\u65b9\u6848"}),"\n",(0,o.jsx)(e.p,{children:"\u4e3a\u4e86\u652f\u6301\u4e1a\u52a1\u4ee3\u7801\u5c3d\u91cf\u7684\u89e3\u8026\uff0c\u628a\u90e8\u5206\u4e1a\u52a1\u529f\u80fd\u901a\u8fc7\u52a8\u6001\u52a0\u8f7d\u7684\u65b9\u5f0f\u52a0\u8f7d\u5230\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u4ee5\u6ee1\u8db3\u53ef\u63d2\u62d4\u5f0f\u7684\u52a0\u8f7d\u3001\u7ec4\u5408\u5f0f\u7684\u90e8\u7f72\u3002\n\u914d\u5408xxl-job\u4efb\u52a1\u8c03\u5ea6\u6846\u67b6\uff0c\u5c06\u6570\u636e\u6cbb\u7406\u4efb\u52a1\u505a\u6210xxl-job\u4efb\u52a1\u7684\u65b9\u5f0f\u6ce8\u518c\u5230xxl-job\u4e2d\uff0c\u65b9\u4fbf\u7edf\u4e00\u7ba1\u7406\u3002"}),"\n",(0,o.jsx)(e.h2,{id:"\u4e8c\u52a8\u6001\u52a0\u8f7d",children:"\u4e8c\u3001\u52a8\u6001\u52a0\u8f7d"}),"\n",(0,o.jsx)(e.h3,{id:"1\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668",children:"1\u3001\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668"}),"\n",(0,o.jsx)(e.p,{children:"URLClassLoader \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u52a0\u8f7d\u5668\uff0c\u53ef\u4ee5\u4ece\u6307\u5b9a\u7684 URL \u4e2d\u52a0\u8f7d\u7c7b\u548c\u8d44\u6e90\u3002\u5b83\u7684\u4e3b\u8981\u4f5c\u7528\u662f\u52a8\u6001\u52a0\u8f7d\u5916\u90e8\u7684 JAR \u5305\u6216\u8005\u7c7b\u6587\u4ef6\uff0c\u4ece\u800c\u5b9e\u73b0\u52a8\u6001\u6269\u5c55\u5e94\u7528\u7a0b\u5e8f\u7684\u529f\u3002\u4e3a\u4e86\u4fbf\u4e8e\u7ba1\u7406\u52a8\u6001\u52a0\u8f7d\u7684jar\u5305\uff0c\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668\u7ee7\u627fURLClassloader\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package cn.jy.sjzl.util;\n\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * \u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668\n *\n * @author lijianyu\n * @date 2023/04/03 17:54\n **/\npublic class MyClassLoader extends URLClassLoader {\n\n    private Map<String, Class<?>> loadedClasses = new ConcurrentHashMap<>();\n\n    public Map<String, Class<?>> getLoadedClasses() {\n        return loadedClasses;\n    }\n\n    public MyClassLoader(URL[] urls, ClassLoader parent) {\n        super(urls, parent);\n    }\n\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        // \u4ece\u5df2\u52a0\u8f7d\u7684\u7c7b\u96c6\u5408\u4e2d\u83b7\u53d6\u6307\u5b9a\u540d\u79f0\u7684\u7c7b\n        Class<?> clazz = loadedClasses.get(name);\n        if (clazz != null) {\n            return clazz;\n        }\n        try {\n            // \u8c03\u7528\u7236\u7c7b\u7684findClass\u65b9\u6cd5\u52a0\u8f7d\u6307\u5b9a\u540d\u79f0\u7684\u7c7b\n            clazz = super.findClass(name);\n            // \u5c06\u52a0\u8f7d\u7684\u7c7b\u6dfb\u52a0\u5230\u5df2\u52a0\u8f7d\u7684\u7c7b\u96c6\u5408\u4e2d\n            loadedClasses.put(name, clazz);\n            return clazz;\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void unload() {\n        try {\n            for (Map.Entry<String, Class<?>> entry : loadedClasses.entrySet()) {\n                // \u4ece\u5df2\u52a0\u8f7d\u7684\u7c7b\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u7c7b\n                String className = entry.getKey();\n                loadedClasses.remove(className);\n                try{\n                    // \u8c03\u7528\u8be5\u7c7b\u7684destory\u65b9\u6cd5\uff0c\u56de\u6536\u8d44\u6e90\n                    Class<?> clazz = entry.getValue();\n                    Method destory = clazz.getDeclaredMethod("destory");\n                    destory.invoke(clazz);\n                } catch (Exception e ) {\n                    // \u8868\u660e\u8be5\u7c7b\u6ca1\u6709destory\u65b9\u6cd5\n                }\n            }\n            // \u4ece\u5176\u7236\u7c7b\u52a0\u8f7d\u5668\u7684\u52a0\u8f7d\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u79fb\u9664\u8be5\u7c7b\u52a0\u8f7d\u5668\n            close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668\u4e2d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7c7b\u7684\u5378\u8f7d\uff0c\u5b9a\u4e49\u4e00\u4e2amap\u4fdd\u5b58\u5df2\u52a0\u8f7d\u7684\u7c7b\u4fe1\u606f\u3002key\u4e3a\u8fd9\u4e2a\u7c7b\u7684ClassName\uff0cvalue\u4e3a\u8fd9\u4e2a\u7c7b\u7684\u7c7b\u4fe1\u606f\u3002\n\u540c\u65f6\u5b9a\u4e49\u4e86\u7c7b\u52a0\u8f7d\u5668\u7684\u5378\u8f7d\u65b9\u6cd5\uff0c\u5378\u8f7d\u65b9\u6cd5\u4e2d\uff0c\u5c06\u5df2\u52a0\u8f7d\u7684\u7c7b\u7684\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u7c7b\u3002\u7531\u4e8e\u6b64\u7c7b\u53ef\u80fd\u4f7f\u7528\u7cfb\u7edf\u8d44\u6e90\u6216\u8c03\u7528\u7ebf\u7a0b\uff0c\u4e3a\u4e86\u907f\u514d\u8d44\u6e90\u672a\u56de\u6536\u5f15\u8d77\u7684\u5185\u5b58\u6ea2\u51fa\uff0c\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u8fd9\u4e2a\u7c7b\u4e2d\u7684destroy\u65b9\u6cd5\uff0c\u56de\u6536\u8d44\u6e90\u3002\n\u6700\u540e\u8c03\u7528close\u65b9\u6cd5\u3002"}),"\n",(0,o.jsx)(e.h3,{id:"2\u52a8\u6001\u52a0\u8f7d",children:"2\u3001\u52a8\u6001\u52a0\u8f7d"}),"\n",(0,o.jsx)(e.p,{children:"\u7531\u4e8e\u6b64\u9879\u76ee\u4f7f\u7528spring\u6846\u67b6\uff0c\u4ee5\u53caxxl-job\u4efb\u52a1\u7684\u673a\u5236\u8c03\u7528\u52a8\u6001\u52a0\u8f7d\u7684\u4ee3\u7801\uff0c\u56e0\u6b64\u8981\u5b8c\u6210\u4ee5\u4e0b\u5185\u5bb9"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u5c06\u52a8\u6001\u52a0\u8f7d\u7684jar\u5305\u8bfb\u5230\u5185\u5b58\u4e2d"}),"\n",(0,o.jsx)(e.li,{children:"\u5c06\u6709spring\u6ce8\u89e3\u7684\u7c7b\uff0c\u901a\u8fc7\u6ce8\u89e3\u626b\u63cf\u7684\u65b9\u5f0f\uff0c\u626b\u63cf\u5e76\u624b\u52a8\u6dfb\u52a0\u5230spring\u5bb9\u5668\u4e2d\u3002"}),"\n",(0,o.jsx)(e.li,{children:"\u5c06@XxlJob\u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u6ce8\u89e3\u626b\u63cf\u7684\u65b9\u5f0f\uff0c\u624b\u52a8\u6dfb\u52a0\u5230xxljob\u6267\u884c\u5668\u4e2d\u3002"}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.jy.dynamicLoad;\n\nimport com.jy.annotation.XxlJobCron;\nimport com.jy.classLoader.MyClassLoader;\nimport com.xxl.job.core.executor.impl.XxlJobSpringExecutor;\nimport com.xxl.job.core.handler.annotation.XxlJob;\nimport com.xxl.job.core.handler.impl.MethodJobHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.core.MethodIntrospector;\nimport org.springframework.core.annotation.AnnotatedElementUtils;\nimport org.springframework.stereotype.Component;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.net.JarURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.Enumeration;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\n\n/**\n * @author lijianyu\n * @date 2023/04/29 13:18\n **/\n@Component\npublic class DynamicLoad {\n\n    private static Logger logger = LoggerFactory.getLogger(DynamicLoad.class);\n\n    @Autowired\n    private ApplicationContext applicationContext;\n\n    private Map<String, MyClassLoader> myClassLoaderCenter = new ConcurrentHashMap<>();\n\n    @Value("${dynamicLoad.path}")\n    private String path;\n\n    /**\n     * \u52a8\u6001\u52a0\u8f7d\u6307\u5b9a\u8def\u5f84\u4e0b\u6307\u5b9ajar\u5305\n     * @param path\n     * @param fileName\n     * @param isRegistXxlJob  \u662f\u5426\u9700\u8981\u6ce8\u518cxxljob\u6267\u884c\u5668\uff0c\u9879\u76ee\u9996\u6b21\u542f\u52a8\u4e0d\u9700\u8981\u6ce8\u518c\u6267\u884c\u5668\n     * @return map<jobHander, Cron> \u521b\u5efaxxljob\u4efb\u52a1\u65f6\u9700\u8981\u7684\u53c2\u6570\u914d\u7f6e\n     */\n    public void loadJar(String path, String fileName, Boolean isRegistXxlJob) throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        File file = new File(path +"/" + fileName);\n        Map<String, String> jobPar = new HashMap<>();\n        // \u83b7\u53d6beanFactory\n        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory();\n        // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u7684\u6267\u884c\u5668\n        try {\n            // URLClassloader\u52a0\u8f7djar\u5305\u89c4\u8303\u5fc5\u987b\u8fd9\u4e48\u5199\n            URL url = new URL("jar:file:" + file.getAbsolutePath() + "!/");\n            URLConnection urlConnection = url.openConnection();\n            JarURLConnection jarURLConnection = (JarURLConnection)urlConnection;\n            // \u83b7\u53d6jar\u6587\u4ef6\n            JarFile jarFile = jarURLConnection.getJarFile();\n            Enumeration<JarEntry> entries = jarFile.entries();\n\n            // \u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668\uff0c\u5e76\u52a0\u5230map\u4e2d\u65b9\u4fbf\u7ba1\u7406\n            MyClassLoader myClassloader = new MyClassLoader(new URL[] { url }, ClassLoader.getSystemClassLoader());\n            myClassLoaderCenter.put(fileName, myClassloader);\n            Set<Class> initBeanClass = new HashSet<>(jarFile.size());\n            // \u904d\u5386\u6587\u4ef6\n            while (entries.hasMoreElements()) {\n                JarEntry jarEntry = entries.nextElement();\n                if (jarEntry.getName().endsWith(".class")) {\n                    // 1. \u52a0\u8f7d\u7c7b\u5230jvm\u4e2d\n                    // \u83b7\u53d6\u7c7b\u7684\u5168\u8def\u5f84\u540d\n                    String className = jarEntry.getName().replace(\'/\', \'.\').substring(0, jarEntry.getName().length() - 6);\n                    // 1.1\u8fdb\u884c\u53cd\u5c04\u83b7\u53d6\n                    myClassloader.loadClass(className);\n                }\n            }\n            Map<String, Class<?>> loadedClasses = myClassloader.getLoadedClasses();\n            XxlJobSpringExecutor xxlJobExecutor = new XxlJobSpringExecutor();\n            for(Map.Entry<String, Class<?>> entry : loadedClasses.entrySet()){\n                String className = entry.getKey();\n                Class<?> clazz = entry.getValue();\n                // 2. \u5c06\u6709@spring\u6ce8\u89e3\u7684\u7c7b\u4ea4\u7ed9spring\u7ba1\u7406\n                // 2.1 \u5224\u65ad\u662f\u5426\u6ce8\u5165spring\n                Boolean flag = SpringAnnotationUtils.hasSpringAnnotation(clazz);\n                if(flag){\n                    // 2.2\u4ea4\u7ed9spring\u7ba1\u7406\n                    BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(clazz);\n                    AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();\n                    // \u6b64\u5904beanName\u4f7f\u7528\u5168\u8def\u5f84\u540d\u662f\u4e3a\u4e86\u9632\u6b62beanName\u91cd\u590d\n                    String packageName = className.substring(0, className.lastIndexOf(".") + 1);\n                    String beanName = className.substring(className.lastIndexOf(".") + 1);\n                    beanName = packageName + beanName.substring(0, 1).toLowerCase() + beanName.substring(1);\n                    // 2.3\u6ce8\u518c\u5230spring\u7684beanFactory\u4e2d\n                    beanFactory.registerBeanDefinition(beanName, beanDefinition);\n                    // 2.4\u5141\u8bb8\u6ce8\u5165\u548c\u53cd\u5411\u6ce8\u5165\n                    beanFactory.autowireBean(clazz);\n                    beanFactory.initializeBean(clazz, beanName);\n                    /*if(Arrays.stream(clazz.getInterfaces()).collect(Collectors.toSet()).contains(InitializingBean.class)){\n                        initBeanClass.add(clazz);\n                    }*/\n                    initBeanClass.add(clazz);\n                }\n\n                // 3. \u5e26\u6709XxlJob\u6ce8\u89e3\u7684\u65b9\u6cd5\u6ce8\u518c\u4efb\u52a1\n                // 3.1 \u8fc7\u6ee4\u65b9\u6cd5\n                Map<Method, XxlJob> annotatedMethods = null;\n                try {\n                    annotatedMethods = MethodIntrospector.selectMethods(clazz,\n                            new MethodIntrospector.MetadataLookup<XxlJob>() {\n                                @Override\n                                public XxlJob inspect(Method method) {\n                                    return AnnotatedElementUtils.findMergedAnnotation(method, XxlJob.class);\n                                }\n                            });\n                } catch (Throwable ex) {\n                }\n                // 3.2 \u751f\u6210\u5e76\u6ce8\u518c\u65b9\u6cd5\u7684JobHander\n                for (Map.Entry<Method, XxlJob> methodXxlJobEntry : annotatedMethods.entrySet()) {\n                    Method executeMethod = methodXxlJobEntry.getKey();\n                    // \u83b7\u53d6jobHander\u548cCron\n                    XxlJobCron xxlJobCron = executeMethod.getAnnotation(XxlJobCron.class);\n                    if(xxlJobCron == null){\n                        throw new CustomException("500", executeMethod.getName() + "()\uff0c\u6ca1\u6709\u6dfb\u52a0@XxlJobCron\u6ce8\u89e3\u914d\u7f6e\u5b9a\u65f6\u7b56\u7565");\n                    }\n                    if (!CronExpression.isValidExpression(xxlJobCron.value())) {\n                        throw new CustomException("500", executeMethod.getName() + "(),@XxlJobCron\u53c2\u6570\u5185\u5bb9\u9519\u8bef");\n                    }\n                    XxlJob xxlJob = methodXxlJobEntry.getValue();\n                    jobPar.put(xxlJob.value(), xxlJobCron.value());\n                    if (isRegistXxlJob) {\n                        executeMethod.setAccessible(true);\n                        // regist\n                        Method initMethod = null;\n                        Method destroyMethod = null;\n                        xxlJobExecutor.registJobHandler(xxlJob.value(), new CustomerMethodJobHandler(clazz, executeMethod, initMethod, destroyMethod));\n                    }\n                }\n\n            }\n            // spring bean\u5b9e\u9645\u6ce8\u518c\n            initBeanClass.forEach(beanFactory::getBean);\n        } catch (IOException e) {\n            logger.error("\u8bfb\u53d6{} \u6587\u4ef6\u5f02\u5e38", fileName);\n            e.printStackTrace();\n            throw new RuntimeException("\u8bfb\u53d6jar\u6587\u4ef6\u5f02\u5e38: " + fileName);\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"\u4ee5\u4e0b\u662f\u5224\u65ad\u8be5\u7c7b\u662f\u5426\u6709spring\u6ce8\u89e3\u7684\u5de5\u5177\u7c7b"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'public class SpringAnnotationUtils {\n\n    private static Logger logger = LoggerFactory.getLogger(SpringAnnotationUtils.class);\n    /**\n     * \u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u6709 Spring \u6838\u5fc3\u6ce8\u89e3\n     *\n     * @param clazz \u8981\u68c0\u67e5\u7684\u7c7b\n     * @return true \u5982\u679c\u8be5\u7c7b\u4e0a\u6dfb\u52a0\u4e86\u76f8\u5e94\u7684 Spring \u6ce8\u89e3\uff1b\u5426\u5219\u8fd4\u56de false\n     */\n    public static boolean hasSpringAnnotation(Class<?> clazz) {\n        if (clazz == null) {\n            return false;\n        }\n        //\u662f\u5426\u662f\u63a5\u53e3\n        if (clazz.isInterface()) {\n            return false;\n        }\n        //\u662f\u5426\u662f\u62bd\u8c61\u7c7b\n        if (Modifier.isAbstract(clazz.getModifiers())) {\n            return false;\n        }\n\n        try {\n            if (clazz.getAnnotation(Component.class) != null ||\n            clazz.getAnnotation(Repository.class) != null ||\n            clazz.getAnnotation(Service.class) != null ||\n            clazz.getAnnotation(Controller.class) != null ||\n            clazz.getAnnotation(Configuration.class) != null) {\n                return true;\n            }\n        }catch (Exception e){\n            logger.error("\u51fa\u73b0\u5f02\u5e38\uff1a{}",e.getMessage());\n        }\n        return false;\n    }\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"\u6ce8\u518cxxljob\u6267\u884c\u5668\u7684\u64cd\u4f5c\u662f\u4eff\u7167\u7684xxljob\u4e2d\u7684XxlJobSpringExecutor\u7684\u6ce8\u518c\u65b9\u6cd5\u3002"}),"\n",(0,o.jsx)(e.h3,{id:"3\u52a8\u6001\u5378\u8f7d",children:"3\u3001\u52a8\u6001\u5378\u8f7d"}),"\n",(0,o.jsx)(e.p,{children:"\u52a8\u6001\u5378\u8f7d\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u5c06\u52a8\u6001\u52a0\u8f7d\u7684\u4ee3\u7801\uff0c\u4ece\u5185\u5b58\uff0cspring\u4ee5\u53caxxljob\u4e2d\u79fb\u9664\u3002"}),"\n",(0,o.jsx)(e.p,{children:"\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'/**\n * \u52a8\u6001\u5378\u8f7d\u6307\u5b9a\u8def\u5f84\u4e0b\u6307\u5b9ajar\u5305\n * @param fileName\n * @return map<jobHander, Cron> \u521b\u5efaxxljob\u4efb\u52a1\u65f6\u9700\u8981\u7684\u53c2\u6570\u914d\u7f6e\n */\npublic void unloadJar(String fileName) throws IllegalAccessException, NoSuchFieldException {\n    // \u83b7\u53d6\u52a0\u8f7d\u5f53\u524djar\u7684\u7c7b\u52a0\u8f7d\u5668\n    MyClassLoader myClassLoader = myClassLoaderCenter.get(fileName);\n\n    // \u83b7\u53d6jobHandlerRepository\u79c1\u6709\u5c5e\u6027,\u4e3a\u4e86\u5378\u8f7dxxljob\u4efb\u52a1\n    Field privateField = XxlJobExecutor.class.getDeclaredField("jobHandlerRepository");\n    // \u8bbe\u7f6e\u79c1\u6709\u5c5e\u6027\u53ef\u8bbf\u95ee\n    privateField.setAccessible(true);\n    // \u83b7\u53d6\u79c1\u6709\u5c5e\u6027\u7684\u503cjobHandlerRepository\n    XxlJobExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor();\n    Map<String, IJobHandler> jobHandlerRepository = (ConcurrentHashMap<String, IJobHandler>) privateField.get(xxlJobSpringExecutor);\n    // \u83b7\u53d6beanFactory\uff0c\u51c6\u5907\u4ecespring\u4e2d\u5378\u8f7d\n    DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) applicationContext.getAutowireCapableBeanFactory();\n    Map<String, Class<?>> loadedClasses = myClassLoader.getLoadedClasses();\n\n    Set<String> beanNames = new HashSet<>();\n    for (Map.Entry<String, Class<?>> entry: loadedClasses.entrySet()) {\n        // 1. \u5c06xxljob\u4efb\u52a1\u4ecexxljob\u6267\u884c\u5668\u4e2d\u79fb\u9664\n        // 1.1 \u622a\u53d6beanName\n        String key = entry.getKey();\n        String packageName = key.substring(0, key.lastIndexOf(".") + 1);\n        String beanName = key.substring(key.lastIndexOf(".") + 1);\n        beanName = packageName + beanName.substring(0, 1).toLowerCase() + beanName.substring(1);\n\n        // \u83b7\u53d6bean\uff0c\u5982\u679c\u83b7\u53d6\u5931\u8d25\uff0c\u8868\u540d\u8fd9\u4e2a\u7c7b\u6ca1\u6709\u52a0\u5230spring\u5bb9\u5668\u4e2d\uff0c\u5219\u8df3\u51fa\u672c\u6b21\u5faa\u73af\n        Object bean = null;\n        try{\n            bean = applicationContext.getBean(beanName);\n        }catch (Exception e){\n            // \u5f02\u5e38\u8bf4\u660espring\u4e2d\u6ca1\u6709\u8fd9\u4e2abean\n            continue;\n        }\n\n        // 1.2 \u8fc7\u6ee4\u65b9\u6cd5\n        Map<Method, XxlJob> annotatedMethods = null;\n        try {\n            annotatedMethods = MethodIntrospector.selectMethods(bean.getClass(),\n                    new MethodIntrospector.MetadataLookup<XxlJob>() {\n                        @Override\n                        public XxlJob inspect(Method method) {\n                            return AnnotatedElementUtils.findMergedAnnotation(method, XxlJob.class);\n                        }\n                    });\n        } catch (Throwable ex) {\n        }\n        // 1.3 \u5c06job\u4ece\u6267\u884c\u5668\u4e2d\u79fb\u9664\n        for (Map.Entry<Method, XxlJob> methodXxlJobEntry : annotatedMethods.entrySet()) {\n            XxlJob xxlJob = methodXxlJobEntry.getValue();\n            jobHandlerRepository.remove(xxlJob.value());\n        }\n        // 2.0\u4ecespring\u4e2d\u79fb\u9664\uff0c\u8fd9\u91cc\u7684\u79fb\u9664\u662f\u4ec5\u4ec5\u79fb\u9664\u7684bean\uff0c\u5e76\u672a\u79fb\u9664bean\u5b9a\u4e49\n        beanNames.add(beanName);\n        beanFactory.destroyBean(beanName, bean);\n    }\n    // \u79fb\u9664bean\u5b9a\u4e49\n    Field mergedBeanDefinitions = beanFactory.getClass()\n            .getSuperclass()\n            .getSuperclass().getDeclaredField("mergedBeanDefinitions");\n    mergedBeanDefinitions.setAccessible(true);\n    Map<String, RootBeanDefinition> rootBeanDefinitionMap = ((Map<String, RootBeanDefinition>) mergedBeanDefinitions.get(beanFactory));\n    for (String beanName : beanNames) {\n        beanFactory.removeBeanDefinition(beanName);\n        // \u7236\u7c7bbean\u5b9a\u4e49\u53bb\u9664\n        rootBeanDefinitionMap.remove(beanName);\n    }\n\n    // \u5378\u8f7d\u7236\u4efb\u52a1\uff0c\u5b50\u4efb\u52a1\u5df2\u7ecf\u5728\u5faa\u73af\u4e2d\u5378\u8f7d\n    jobHandlerRepository.remove(fileName);\n    // 3.2 \u4ece\u7c7b\u52a0\u8f7d\u4e2d\u79fb\u9664\n    try {\n        // \u4ece\u7c7b\u52a0\u8f7d\u5668\u5e95\u5c42\u7684classes\u4e2d\u79fb\u9664\u8fde\u63a5\n        Field field = ClassLoader.class.getDeclaredField("classes");\n        field.setAccessible(true);\n        Vector<Class<?>> classes = (Vector<Class<?>>) field.get(myClassLoader);\n        classes.removeAllElements();\n        // \u79fb\u9664\u7c7b\u52a0\u8f7d\u5668\u7684\u5f15\u7528\n        myClassLoaderCenter.remove(fileName);\n        // \u5378\u8f7d\u7c7b\u52a0\u8f7d\u5668\n        myClassLoader.unload();\n    } catch (NoSuchFieldException e) {\n        logger.error("\u52a8\u6001\u5378\u8f7d\u7684\u7c7b\uff0c\u4ece\u7c7b\u52a0\u8f7d\u5668\u4e2d\u5378\u8f7d\u5931\u8d25");\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        logger.error("\u52a8\u6001\u5378\u8f7d\u7684\u7c7b\uff0c\u4ece\u7c7b\u52a0\u8f7d\u5668\u4e2d\u5378\u8f7d\u5931\u8d25");\n        e.printStackTrace();\n    }\n    logger.error("{} \u52a8\u6001\u5378\u8f7d\u6210\u529f", fileName);\n\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"4\u52a8\u6001\u914d\u7f6e",children:"4\u3001\u52a8\u6001\u914d\u7f6e"}),"\n",(0,o.jsx)(e.p,{children:"\u4f7f\u7528\u52a8\u6001\u52a0\u8f7d\u65f6\uff0c\u4e3a\u4e86\u907f\u514d\u670d\u52a1\u91cd\u65b0\u542f\u52a8\u540e\u4e22\u5931\u5df2\u52a0\u8f7d\u7684\u4efb\u52a1\u5305\uff0c\u4f7f\u7528\u52a8\u6001\u914d\u7f6e\u7684\u65b9\u5f0f\uff0c\u52a0\u8f7d\u540e\u52a8\u6001\u66f4\u65b0\u521d\u59cb\u5316\u52a0\u8f7d\u914d\u7f6e\u3002"}),"\n",(0,o.jsx)(e.p,{children:"\u4ee5\u4e0b\u63d0\u4f9b\u4e86\u4e24\u79cd\u81ea\u5df1\u5b9e\u9645\u64cd\u4f5c\u8fc7\u7684\u914d\u7f6e\u65b9\u5f0f\u3002"}),"\n",(0,o.jsx)(e.h4,{id:"41-\u52a8\u6001\u4fee\u6539\u672c\u5730yml",children:"4.1 \u52a8\u6001\u4fee\u6539\u672c\u5730yml"}),"\n",(0,o.jsx)(e.p,{children:"\u52a8\u6001\u4fee\u6539\u672c\u5730yml\u914d\u7f6e\u6587\u4ef6\uff0c\u9700\u8981\u6dfb\u52a0snakeyaml\u7684\u4f9d\u8d56"}),"\n",(0,o.jsx)(e.h5,{id:"411-\u4f9d\u8d56\u5f15\u5165",children:"4.1.1 \u4f9d\u8d56\u5f15\u5165"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<dependency>\n <groupId>org.yaml</groupId>\n    <artifactId>snakeyaml</artifactId>\n    <version>1.29</version>\n</dependency>\n"})}),"\n",(0,o.jsx)(e.h5,{id:"412-\u5de5\u5177\u7c7b",children:"4.1.2 \u5de5\u5177\u7c7b"}),"\n",(0,o.jsx)(e.p,{children:"\u8bfb\u53d6\u6307\u5b9a\u8def\u5f84\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u8fdb\u884c\u4fee\u6539\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package com.jy.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.env.Environment;\nimport org.springframework.stereotype.Component;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n/**\n * \u7528\u4e8e\u52a8\u6001\u4fee\u6539bootstrap.yml\u914d\u7f6e\u6587\u4ef6\n * @author lijianyu\n * @date 2023/04/18 17:57\n **/\n@Component\npublic class ConfigUpdater {\n\n    public void updateLoadJars(List<String> jarNames) throws IOException {\n        // \u8bfb\u53d6bootstrap.yml\n        Yaml yaml = new Yaml();\n        InputStream inputStream = new FileInputStream(new File("src/main/resources/bootstrap.yml"));\n        Map<String, Object> obj = yaml.load(inputStream);\n        inputStream.close();\n\n        obj.put("loadjars", jarNames);\n\n        // \u4fee\u6539\n        FileWriter writer = new FileWriter(new File("src/main/resources/bootstrap.yml"));\n        DumperOptions options = new DumperOptions();\n        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n        options.setPrettyFlow(true);\n        Yaml yamlWriter = new Yaml(options);\n        yamlWriter.dump(obj, writer);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"42-\u52a8\u6001\u4fee\u6539nacos\u914d\u7f6e",children:"4.2 \u52a8\u6001\u4fee\u6539nacos\u914d\u7f6e"}),"\n",(0,o.jsx)(e.p,{children:"Spring Cloud Alibaba Nacos\u7ec4\u4ef6\u5b8c\u5168\u652f\u6301\u5728\u8fd0\u884c\u65f6\u901a\u8fc7\u4ee3\u7801\u52a8\u6001\u4fee\u6539\u914d\u7f6e\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9bAPI\u4f9b\u5f00\u53d1\u8005\u5728\u4ee3\u7801\u91cc\u9762\u5b9e\u73b0\u52a8\u6001\u4fee\u6539\u914d\u7f6e\u3002\u5728\u6bcf\u6b21\u52a8\u6001\u52a0\u8f7d\u6216\u5378\u8f7d\u6570\u636e\u6cbb\u7406\u4efb\u52a1jar\u5305\u65f6\uff0c\u6267\u884c\u6210\u529f\u540e\u90fd\u4f1a\u8fdb\u884c\u52a8\u6001\u66f4\u65b0nacos\u914d\u7f6e\u3002"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package cn.jy.sjzl.config;\n\nimport com.alibaba.nacos.api.NacosFactory;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Properties;\n\n@Configuration\npublic class NacosConfig {\n    @Value("${spring.cloud.nacos.server-addr}")\n    private String serverAddr;\n\n    @Value("${spring.cloud.nacos.config.namespace}")\n    private String namespace;\n\n    public ConfigService configService() throws NacosException {\n        Properties properties = new Properties();\n        properties.put("serverAddr", serverAddr);\n        properties.put("namespace", namespace);\n        return NacosFactory.createConfigService(properties);\n    }\n}\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'package cn.jy.sjzl.util;\n\nimport cn.jy.sjzl.config.NacosConfig;\nimport com.alibaba.fastjson.JSONObject;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.dataformat.yaml.YAMLMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * nacos\u914d\u7f6e\u4e2d\uff0c\u4fee\u6539sjzl-loadjars.yml\n *\n * @author lijianyu\n * @date 2023/04/19 17:59\n **/\n@Component\npublic class NacosConfigUtil {\n\n    private static Logger logger = LoggerFactory.getLogger(NacosConfigUtil.class);\n\n    @Autowired\n    private NacosConfig nacosConfig;\n\n    private String dataId = "sjzl-loadjars.yml";\n\n    @Value("${spring.cloud.nacos.config.group}")\n    private String group;\n\n    /**\n     * \u4ecenacos\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u521d\u59cb\u5316jar\u5305\u914d\u7f6e\n     * @param jarName \u8981\u79fb\u9664\u7684jar\u5305\u540d\n     * @throws Exception\n     */\n    public void addJarName(String jarName) throws Exception {\n        ConfigService configService = nacosConfig.configService();\n        String content = configService.getConfig(dataId, group, 5000);\n        // \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5185\u5bb9\n        YAMLMapper yamlMapper = new YAMLMapper();\n        ObjectMapper jsonMapper = new ObjectMapper();\n        Object yamlObject = yamlMapper.readValue(content, Object.class);\n\n        String jsonString = jsonMapper.writeValueAsString(yamlObject);\n        JSONObject jsonObject = JSONObject.parseObject(jsonString);\n        List<String> loadjars;\n        if (jsonObject.containsKey("loadjars")) {\n            loadjars = (List<String>) jsonObject.get("loadjars");\n        }else{\n            loadjars = new ArrayList<>();\n        }\n        if (!loadjars.contains(jarName)) {\n            loadjars.add(jarName);\n        }\n        jsonObject.put("loadjars" , loadjars);\n\n        Object yaml = yamlMapper.readValue(jsonMapper.writeValueAsString(jsonObject), Object.class);\n        String newYamlString = yamlMapper.writeValueAsString(yaml);\n        boolean b = configService.publishConfig(dataId, group, newYamlString);\n\n        if(b){\n            logger.info("nacos\u914d\u7f6e\u66f4\u65b0\u6210\u529f");\n        }else{\n            logger.info("nacos\u914d\u7f6e\u66f4\u65b0\u5931\u8d25");\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\u4e09\u5206\u79bb\u6253\u5305",children:"\u4e09\u3001\u5206\u79bb\u6253\u5305"}),"\n",(0,o.jsx)(e.p,{children:"\u5206\u79bb\u6253\u5305\u65f6\uff0c\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u5728pom.xml\u4e2d\u4fee\u6539\u4ee5\u4e0b\u914d\u7f6e"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>3.2.4</version>\n            <executions>\n                <execution>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                    <configuration>\n                        <filters>\n                            <filter>\n                                <artifact>*:*</artifact>\n                                <includes>\n                                    <include>com/jy/job/demo/**</include>\n                                </includes>\n                            </filter>\n                        </filters>\n                        <finalName>demoJob</finalName>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n"})})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}}}]);
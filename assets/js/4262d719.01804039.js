"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[9059],{38604:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(85893),o=t(11151);const i={},a=void 0,s={id:"zh-cn/spring-boot/Spring-Boot-Integrate-SpringDoc-Aggregation",title:"Spring-Boot-Integrate-SpringDoc-Aggregation",description:"- springdoc-openapi demo",source:"@site/docs/zh-cn/spring-boot/23-Spring-Boot-Integrate-SpringDoc-Aggregation.md",sourceDirName:"zh-cn/spring-boot",slug:"/zh-cn/spring-boot/Spring-Boot-Integrate-SpringDoc-Aggregation",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/Spring-Boot-Integrate-SpringDoc-Aggregation",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-boot/23-Spring-Boot-Integrate-SpringDoc-Aggregation.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{},sidebar:"troch",previous:{title:"Enhance-Request-And-Response",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/Enhance-Request-And-Response"},next:{title:"File-Upload-Split-Continue-on-Break",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/file/File-Upload-Split-Continue-on-Break"}},p={},l=[{value:"\u7b80\u5355\u96c6\u6210",id:"\u7b80\u5355\u96c6\u6210",level:2},{value:"1. \u6dfb\u52a0\u4f9d\u8d56\u9879",id:"1-\u6dfb\u52a0\u4f9d\u8d56\u9879",level:3},{value:"2. \u6dfb\u52a0\u914d\u7f6e",id:"2-\u6dfb\u52a0\u914d\u7f6e",level:3},{value:"3. OpenapiProperties \u5c5e\u6027\u5b9a\u4e49",id:"3-openapiproperties-\u5c5e\u6027\u5b9a\u4e49",level:3},{value:"4. RouteDefinition \u8def\u7531\u5b9a\u4e49",id:"4-routedefinition-\u8def\u7531\u5b9a\u4e49",level:3},{value:"5. OpenapiConfig \u914d\u7f6e\u7c7b",id:"5-openapiconfig-\u914d\u7f6e\u7c7b",level:3},{value:"6. SpringDocConfig \u914d\u7f6e\u7c7b",id:"6-springdocconfig-\u914d\u7f6e\u7c7b",level:3},{value:"7.OpenapiAdditionalBeanRegistry \u52a8\u6001\u6ce8\u518c\u7c7b",id:"7openapiadditionalbeanregistry-\u52a8\u6001\u6ce8\u518c\u7c7b",level:3},{value:"\u805a\u5408Api\u6587\u6863",id:"\u805a\u5408api\u6587\u6863",level:2},{value:"1. \u6dfb\u52a0\u4f9d\u8d56\u9879",id:"1-\u6dfb\u52a0\u4f9d\u8d56\u9879-1",level:3},{value:"2. \u6dfb\u52a0\u914d\u7f6e",id:"2-\u6dfb\u52a0\u914d\u7f6e-1",level:3},{value:"3. RouteProxyFilter \u8def\u7531\u8fc7\u6ee4\u5668",id:"3-routeproxyfilter-\u8def\u7531\u8fc7\u6ee4\u5668",level:3},{value:"4. SecurityBasicAuthFilter \u8ba4\u8bc1\u8fc7\u6ee4\u5668",id:"4-securitybasicauthfilter-\u8ba4\u8bc1\u8fc7\u6ee4\u5668",level:3},{value:"5. RouteDispatcher \u8def\u7531\u5206\u53d1\u5668",id:"5-routedispatcher-\u8def\u7531\u5206\u53d1\u5668",level:3},{value:"6. RouteRequestContext \u8def\u7531\u4e0a\u4e0b\u6587",id:"6-routerequestcontext-\u8def\u7531\u4e0a\u4e0b\u6587",level:3},{value:"7. RouteExecutor \u8def\u7531\u6267\u884c\u5668",id:"7-routeexecutor-\u8def\u7531\u6267\u884c\u5668",level:3},{value:"8. OkHttpClientExecutor \u8def\u7531\u6267\u884c\u5668 OkHttp \u5b9e\u73b0",id:"8-okhttpclientexecutor-\u8def\u7531\u6267\u884c\u5668-okhttp-\u5b9e\u73b0",level:3},{value:"9. ApacheClientExecutor \u8def\u7531\u6267\u884c\u5668 Apache \u5b9e\u73b0",id:"9-apacheclientexecutor-\u8def\u7531\u6267\u884c\u5668-apache-\u5b9e\u73b0",level:3},{value:"10. AggregationConfig",id:"10-aggregationconfig",level:3},{value:"\u524d\u7aef\u6539\u9020",id:"\u524d\u7aef\u6539\u9020",level:2},{value:"1.\u51c6\u5907\u5de5\u4f5c",id:"1\u51c6\u5907\u5de5\u4f5c",level:3},{value:"1. \u4e0b\u8f7d\u524d\u7aef\u6e90\u7801",id:"1-\u4e0b\u8f7d\u524d\u7aef\u6e90\u7801",level:4},{value:"2. \u4fee\u6539\u524d\u7aef\u4ee3\u7406 <code>D:\\Workspace\\Github\\knife4j\\knife4j-vue\\vue.config.js</code>",id:"2-\u4fee\u6539\u524d\u7aef\u4ee3\u7406-dworkspacegithubknife4jknife4j-vuevueconfigjs",level:4},{value:"2. \u524d\u7aef\u6e90\u7801\u6539\u9020\u6d4b\u8bd5",id:"2-\u524d\u7aef\u6e90\u7801\u6539\u9020\u6d4b\u8bd5",level:3},{value:"1. \u4fee\u6539\u63a5\u53e3\u8c03\u7528 <code>D:\\Workspace\\Github\\knife4j\\knife4j-vue\\src\\core\\Knife4jAsync.js</code>",id:"1-\u4fee\u6539\u63a5\u53e3\u8c03\u7528-dworkspacegithubknife4jknife4j-vuesrccoreknife4jasyncjs",level:4},{value:"2. <code>D:\\Workspace\\Github\\knife4j\\knife4j-vue\\src\\views\\api\\Debug.vue</code>",id:"2-dworkspacegithubknife4jknife4j-vuesrcviewsapidebugvue",level:4},{value:"3. \u540e\u7aef\u9759\u6001\u6587\u4ef6\u6539\u9020\u601d\u8def",id:"3-\u540e\u7aef\u9759\u6001\u6587\u4ef6\u6539\u9020\u601d\u8def",level:3},{value:"\u95ee\u9898",id:"\u95ee\u9898",level:2},{value:"1. \u63a5\u53e3\u7684\u8c03\u7528\u6700\u597d\u4f7f\u7528 <code>knife4j-gateway-code</code> \u53bb\u9664\u5f53\u524d\u9879\u76ee\u7684context-path \u5426\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38",id:"1-\u63a5\u53e3\u7684\u8c03\u7528\u6700\u597d\u4f7f\u7528-knife4j-gateway-code-\u53bb\u9664\u5f53\u524d\u9879\u76ee\u7684context-path-\u5426\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38",level:3},{value:"2. \u3010\u89e3\u51b3\u95ee\u9898\u4e00\u3011\u5982\u679c\u9879\u76ee\u672c\u8eab\u9700\u8981\u4f7f\u7528\u805a\u5408\u63a5\u53e3\uff0c\u9700\u8981\u5728\u6240\u6709\u63a5\u53e3\u524d\u518d\u6dfb\u52a0\u4e00\u6b21 context-path",id:"2-\u89e3\u51b3\u95ee\u9898\u4e00\u5982\u679c\u9879\u76ee\u672c\u8eab\u9700\u8981\u4f7f\u7528\u805a\u5408\u63a5\u53e3\u9700\u8981\u5728\u6240\u6709\u63a5\u53e3\u524d\u518d\u6dfb\u52a0\u4e00\u6b21-context-path",level:3},{value:"3. \u5bf9\u4e8e\u9879\u76ee\u9ed8\u8ba4\u9700\u8981Token\u6821\u9a8c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 components \u5b9e\u73b0\u53c2\u6570\u7684\u590d\u7528",id:"3-\u5bf9\u4e8e\u9879\u76ee\u9ed8\u8ba4\u9700\u8981token\u6821\u9a8c\u7684\u53ef\u4ee5\u4f7f\u7528-components-\u5b9e\u73b0\u53c2\u6570\u7684\u590d\u7528",level:3},{value:"4. \u4e00\u4e2a\u81ea\u5b9a\u4e49\u52a8\u6001\u6ce8\u518c RequestMapping \u7684 Bug",id:"4-\u4e00\u4e2a\u81ea\u5b9a\u4e49\u52a8\u6001\u6ce8\u518c-requestmapping-\u7684-bug",level:3}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/ahuadoreen/studentmanager",children:"springdoc-openapi demo"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/springdoc/springdoc-openapi",children:"springdoc-openapi github"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://springdoc.org/",children:"springdoc-openapi \u5b98\u65b9\u6587\u6863"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.csdn.net/wangzhihao1994/article/details/108408595",children:"Spring Boot \u6574\u5408 springdoc-openapi"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.csdn.net/qq_35425070/article/details/105347336",children:"Swagger3 \u6ce8\u89e3\u4f7f\u7528\uff08Open API 3\uff09"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"\u7b80\u5355\u96c6\u6210",children:"\u7b80\u5355\u96c6\u6210"}),"\n",(0,r.jsx)(n.h3,{id:"1-\u6dfb\u52a0\u4f9d\u8d56\u9879",children:"1. \u6dfb\u52a0\u4f9d\u8d56\u9879"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- Springdoc 2.x --\x3e\n\x3c!--<dependency>\n    <groupId>io.springfox</groupId>\n    <artifactId>springfox-boot-starter</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n</dependency>--\x3e\n\n\x3c!-- Springdoc 3.x --\x3e\n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>\n</dependency>\n\x3c!--<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-openapi3-spring-boot-starter</artifactId>\n</dependency>--\x3e\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\u6dfb\u52a0\u914d\u7f6e",children:"2. \u6dfb\u52a0\u914d\u7f6e"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"light:\n  cloud:\n    # Swagger \u6587\u6863\u914d\u7f6e\n    openapi:\n      enable: true\n      profiles: dev,test,nat\n      base-group: Light Cloud\n      scan-group: Demo Service\n      scan-packages: com.light.cloud.service.demo.controller\n      description: Light Cloud Restful APIs\n      version: 1.0.0\n      license-name: Apache License 2.0\n      license-url: https://www.apache.org/licenses/LICENSE-2.0\n      contact-name: Light Cloud\n      contact-email: whitetulips@163.com\n      contact-url: https://gitee.com/lorchr/spring-cloud-samples\n      terms-of-service-url: https://gitee.com/lorchr/spring-cloud-samples\n      internals:\n        tencent-sdk:\n          group-name: Tencent SDK\n          location: com.light.cloud.sdk.tencent.wechat.controller;com.light.cloud.sdk.tencent.wecom.controller\n        alibaba-sdk:\n          group-name: Alibaba SDK\n          location: com.light.cloud.sdk.alibaba.dingtalk.controller\n      # Note: \u5916\u90e8\u63a5\u53e3\u8fd9\u90e8\u5206\u5df2\u7ecf\u5e9f\u5f03 \n      externals:\n        classpath-doc:\n          group-name: Classpath Doc\n          schema: classpath\n          location: classpath:openapi.json\n        local-doc:\n          group-name: Local Doc\n          schema: file\n          location: D:/openapi.json.txt\n        http-doc:\n          group-name: HTTP Doc\n          schema: http\n          uri: localhost:8080\n          location: /v3/api-docs\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-openapiproperties-\u5c5e\u6027\u5b9a\u4e49",children:"3. OpenapiProperties \u5c5e\u6027\u5b9a\u4e49"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.properties;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport com.light.cloud.common.core.constant.PlatformConstant;\nimport lombok.Data;\n\n/**\n * Swagger\u5c5e\u6027\u914d\u7f6e\n *\n * @author Hui Liu\n * @date 2022/8/5\n */\n@Data\n@ConfigurationProperties(prefix = OpenapiProperties.OPENAPI_PREFIX)\npublic class OpenapiProperties {\n\n    public static final String OPENAPI_PREFIX = "light.cloud.openapi";\n    public static final String OPENAPI_ENABLE = "enable";\n    public static final String OPENAPI_SCAN_PACKAGES = "light.cloud.openapi.scan-packages";\n\n    private Boolean enable = true;\n\n    private String profiles = "dev,test,nat";\n\n    /**\n     * Web\u6a21\u5757\u7684\u540d\u79f0\n     */\n    private String baseGroup = PlatformConstant.PLATFORM_NAME;\n\n    /**\n     * \u626b\u63cf\u7684\u4e1a\u52a1\u670d\u52a1\u540d\u79f0\n     */\n    private String scanGroup;\n\n    /**\n     * \u626b\u63cf\u7684\u4e1a\u52a1\u670d\u52a1\u5305\u8def\u5f84 \u591a\u4e2a\u5f02",\u201c\u5206\u9694\n     */\n    private String scanPackages;\n\n    /**\n     * \u670d\u52a1\u63cf\u8ff0\u4fe1\u606f\n     */\n    private String description = "Light Cloud Restful APIs";\n    /**\n     * \u670d\u52a1\u7248\u672c\n     */\n    private String version = PlatformConstant.PLATFORM_VERSION;\n\n    /**\n     * \u8bc1\u4e66\u8bb8\u53ef\u540d\u79f0\n     */\n    private String licenseName = "Apache License 2.0";\n\n    /**\n     * \u8bc1\u4e66\u8bb8\u53efURL\n     */\n    private String licenseUrl = "https://www.apache.org/licenses/LICENSE-2.0";\n\n    /**\n     * \u8054\u7cfb\u4eba\n     */\n    private String contactName = PlatformConstant.PLATFORM_NAME;\n\n    /**\n     * \u8054\u7cfb\u4ebaURL\n     */\n    private String contactUrl = "https://gitee.com/lorchr/spring-cloud-samples";\n\n    /**\n     * \u8054\u7cfb\u4eba\u90ae\u7bb1\u5730\u5740\n     */\n    private String contactEmail = "whitetulips@163.com";\n\n    /**\n     * \u670d\u52a1\u6761\u6b3eURL\n     */\n    private String termsOfServiceUrl = "https://gitee.com/lorchr/spring-cloud-samples";\n\n    /**\n     * \u4f9d\u8d56\u7684\u5176\u4ed6\u516c\u5171\u6a21\u5757 <p>\n     * group-name: \u63a5\u53e3\u6587\u6863\u5206\u7ec4\u540d\u79f0 <p>\n     * location: \u63a5\u53e3\u6587\u6863\u7684\u5305\u8def\u5f84 <p>\n     */\n    private Map<String, RouteDefinition> internals = new HashMap<>(4);\n\n    /**\n     * @deprecated \u6b64\u65b9\u5f0f\u53ea\u80fd\u5b9e\u73b0\u63a5\u53e3\u7684\u5c55\u793a\uff0c\u4e0d\u80fd\u8de8\u670d\u52a1\u8c03\u7528\uff0c\u4f7f\u7528 knife4j aggregation \u4ee3\u66ff\n     * \u5f15\u7528\u5916\u90e8\u7684api\u6587\u4ef6\u89e3\u6790\u751f\u6210\u6587\u6863 <p>\n     * group-name: \u63a5\u53e3\u6587\u6863\u5206\u7ec4\u540d\u79f0 <p>\n     * location: \u63a5\u53e3\u6587\u6863\u7684\u5305\u8def\u5f84 <p>\n     *\n     * openapi\u6587\u6863\u5730\u5740\u652f\u6301\u591a\u79cd\u683c\u5f0f\n     * <ul>\n     *     <li>Windows\u672c\u5730\u6587\u4ef6: file:///D:/openapi.json.txt</li>\n     *     <li>Linux\u672c\u5730\u6587\u4ef6: file://var/lib/openapi.json</li>\n     *     <li>Classpath\u6587\u4ef6: classpath:openapi.json</li>\n     *     <li>Http\u8d44\u6e90\u6587\u4ef6: http://localhost:8080/v3/api-docs</li>\n     *     <li>...</li>\n     * </ul>\n     */\n    private Map<String, RouteDefinition> externals = new HashMap<>(4);\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-routedefinition-\u8def\u7531\u5b9a\u4e49",children:"4. RouteDefinition \u8def\u7531\u5b9a\u4e49"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package com.light.cloud.common.web.openapi.properties;\n\nimport lombok.Data;\n\n@Data\npublic class RouteDefinition {\n\n    /**\n     * \u63a5\u53e3\u6587\u6863\u5206\u7ec4\u540d\u79f0 <p>\n     * \u8ba4\u8bc1\u670d\u52a1\n     */\n    private String groupName;\n\n    /**\n     * \u6587\u6863\u8bfb\u53d6\u534f\u8bae http https ftp file ...  <p>\n     * http\n     */\n    private String schema;\n\n    /**\n     * \u6587\u6863\u8bfb\u53d6\u5730\u5740 <p>\n     * localhost:8080\n     */\n    private String uri;\n\n    /**\n     * \u6587\u6863\u8bfb\u53d6\u4f4d\u7f6e <p>\n     * /auth/v3/api-docs <p>\n     * com.light.cloud.sdk\n     */\n    private String location;\n\n    /**\n     * \u670d\u52a1\u5668\u5730\u5740 <p>\n     * http://localhost:8080\n     */\n    private String serverUrl;\n\n}\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-openapiconfig-\u914d\u7f6e\u7c7b",children:"5. OpenapiConfig \u914d\u7f6e\u7c7b"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.config;\n\nimport java.util.List;\n\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.ExternalDocumentation;\nimport io.swagger.v3.oas.models.media.StringSchema;\nimport io.swagger.v3.oas.models.parameters.HeaderParameter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.google.common.collect.Lists;\nimport com.light.cloud.common.core.constant.PlatformConstant;\nimport com.light.cloud.common.web.openapi.processor.OpenapiAdditionalBeanRegistry;\nimport com.light.cloud.common.web.openapi.properties.OpenapiProperties;\nimport io.swagger.v3.oas.annotations.enums.ParameterIn;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.info.Contact;\nimport io.swagger.v3.oas.models.info.Info;\nimport io.swagger.v3.oas.models.info.License;\nimport io.swagger.v3.oas.models.parameters.Parameter;\nimport io.swagger.v3.oas.models.security.OAuthFlow;\nimport io.swagger.v3.oas.models.security.OAuthFlows;\nimport io.swagger.v3.oas.models.security.Scopes;\nimport io.swagger.v3.oas.models.security.SecurityRequirement;\nimport io.swagger.v3.oas.models.security.SecurityScheme;\nimport jakarta.annotation.Resource;\n\n/**\n * Openapi\u914d\u7f6e\u7c7b\n *\n * @author Hui Liu\n * @date 2022/7/29\n */\n@Configuration\n@EnableConfigurationProperties(value = {OpenapiProperties.class})\npublic class OpenapiConfig {\n\n    @Value("${" + PlatformConstant.SPRING_APPLICATION_NAME + ":\'Light Cloud\'}")\n    private String serviceName;\n\n    @Resource\n    private OpenapiProperties openapiProperties;\n\n    @Bean\n    public OpenAPI openAPI() {\n        // \u6dfb\u52a0 components \u540e\u53ef\u4ee5\u91cd\u590d\u5f15\u7528\n        Components components = new Components()\n                .addParameters(PlatformConstant.HEADER_CLIENT_ID, clientId())\n                .addParameters(PlatformConstant.HEADER_AUTHORIZATION, authorization());\n        return new OpenAPI()\n                .info(\n                        new Info().title(serviceName)\n                                .description(openapiProperties.getDescription())\n                                .version(openapiProperties.getVersion())\n                                .license(new License()\n                                        .name(openapiProperties.getLicenseName())\n                                        .url(openapiProperties.getLicenseUrl()))\n                                .contact(new Contact()\n                                        .name(openapiProperties.getContactName())\n                                        .email(openapiProperties.getContactEmail())\n                                        .url(openapiProperties.getContactUrl()))\n                                .termsOfService(openapiProperties.getTermsOfServiceUrl())\n                )\n                //\u5916\u90e8\u6587\u6863\n                .externalDocs(new ExternalDocumentation()\n                        .description("\u5b98\u65b9\u6587\u6863").url("https://springdoc.org")\n                )\n                // webhooks\n//                .webhooks(new HashMap<>())\n                // \u5168\u5c40\u7edf\u4e00\u5b89\u5168\u8ba4\u8bc1\u914d\u7f6e \u4e00\u4e2akey\u5bf9\u5e94\u4e00\u4e2aschema\uff08\u5b89\u5168\u914d\u7f6e\uff09\uff0c\n                // \u5bf9\u63a5\u53e3\u6dfb\u52a0 @SecurityRequirement \u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u5b89\u5168\u89c4\u5219\n                .schemaRequirement(PlatformConstant.HEADER_AUTHORIZATION, apikeySecuritySchema())\n//                .schemaRequirement(PlatformConstant.HEADER_CLIENT_ID, apikeySecuritySchema())\n//                .schemaRequirement(HttpHeaders.AUTHORIZATION, oauth2SecuritySchema())\n                // \u5168\u5c40\u5b89\u5168\u6821\u9a8c\u9879\uff0c\u4e5f\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684controller\u4e0a\u52a0\u6ce8\u89e3SecurityRequirement\n                .addSecurityItem(new SecurityRequirement().addList(PlatformConstant.HEADER_AUTHORIZATION))\n                // \u7ec4\u4ef6\u5b9a\u4e49\n                .components(components);\n    }\n\n    /**\n     * \u52a8\u6001\u6ce8\u518cSwagger\u6587\u6863\u914d\u7f6e\n     */\n    @Bean\n    public OpenapiAdditionalBeanRegistry openapiAdditionalBeanRegistry() {\n        return new OpenapiAdditionalBeanRegistry();\n    }\n\n\n    // region \u7edf\u4e00\u8ba4\u8bc1\u914d\u7f6e\n\n    /**\n     * Access Token Header\u63a5\u53e3\u7ea7\u6388\u6743 <p>\n     * https://github.com/springfox/springfox/issues/3477  <p>\n     * Note: \u4f7f\u7528List\u6ce8\u5165\u65f6\u65e0\u6cd5\u63a5\u6536\u670d\u52a1\u5185\u5b9a\u4e49\u7684\u53c2\u6570\uff0c\u5355\u72ec\u6ce8\u5165\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\n     */\n    @Bean\n    public Parameter authorization() {\n        Parameter authorization = new Parameter()\n                // \u53c2\u6570\u540d\n                .name(PlatformConstant.HEADER_AUTHORIZATION)\n                // \u53c2\u6570\u914d\u7f6e\n                // \u53c2\u6570\u63cf\u8ff0\u4fe1\u606f\n                .description("\u8ba4\u8bc1\u7684 Token\u3002\u5f53\u5168\u5c40\u6388\u6743\uff08Authorize\uff09\u540e\uff0c\u6b64\u5904\u4e0d\u5fc5\u586b\u5199")\n                // \u53c2\u6570\u7c7b\u578b QUERY HEADER COOKIE PATH FORM BODY\n                .in(ParameterIn.HEADER.toString())\n                // \u53c2\u6570\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\n                .schema(new StringSchema())\n                // \u662f\u5426\u5fc5\u586b\n                .required(false);\n        return authorization;\n    }\n\n    @Bean\n    public Parameter clientId() {\n        Parameter clientId = new Parameter()\n                // \u53c2\u6570\u540d\n                .name(PlatformConstant.HEADER_CLIENT_ID)\n                // \u53c2\u6570\u914d\u7f6e\n                // \u53c2\u6570\u63cf\u8ff0\u4fe1\u606f\n                .description("ClientId \u7cfb\u7edf\u7684\u540d\u79f0")\n                // \u53c2\u6570\u7c7b\u578b QUERY HEADER COOKIE PATH FORM BODY\n                .in(ParameterIn.HEADER.toString())\n                // \u53c2\u6570\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\n                .schema(new StringSchema())\n                // \u662f\u5426\u5fc5\u586b\n                .required(false);\n        return clientId;\n    }\n\n    /**\n     * Access Token Header\u63a5\u53e3\u7ea7\u6388\u6743\n     * <p>\n     * https://github.com/springfox/springfox/issues/3477\n     */\n    public List<Parameter> openapiParameters() {\n        Parameter accessToken = new Parameter()\n                // \u53c2\u6570\u540d\n                .name(PlatformConstant.HEADER_AUTHORIZATION)\n                // \u53c2\u6570\u914d\u7f6e\n                // \u53c2\u6570\u63cf\u8ff0\u4fe1\u606f\n                .description("\u8ba4\u8bc1\u7684 Token\u3002\u5f53\u5168\u5c40\u6388\u6743\uff08Authorize\uff09\u540e\uff0c\u6b64\u5904\u4e0d\u5fc5\u586b\u5199")\n                // \u53c2\u6570\u7c7b\u578b QUERY HEADER COOKIE PATH FORM BODY\n                .in(ParameterIn.HEADER.toString())\n                // \u662f\u5426\u5fc5\u586b\n                .required(false);\n        Parameter systemName = new Parameter()\n                // \u53c2\u6570\u540d\n                .name(PlatformConstant.HEADER_CLIENT_ID)\n                // \u53c2\u6570\u914d\u7f6e\n                // \u53c2\u6570\u63cf\u8ff0\u4fe1\u606f\n                .description("ClientId \u7cfb\u7edf\u7684\u540d\u79f0")\n                // \u53c2\u6570\u7c7b\u578b QUERY HEADER COOKIE PATH FORM BODY\n                .in(ParameterIn.HEADER.toString())\n                // \u662f\u5426\u5fc5\u586b\n                .required(false);\n        return Lists.newArrayList(accessToken, systemName);\n    }\n\n    /**\n     * apikey\u8ba4\u8bc1\n     */\n    public SecurityScheme apikeySecuritySchema() {\n        return new SecurityScheme()\n                // token\u7c7b\u578b\n                .type(SecurityScheme.Type.APIKEY)\n                // token\u540d\u79f0\n                .name(PlatformConstant.HEADER_AUTHORIZATION)\n                // token\u4f4d\u7f6e\n                .in(SecurityScheme.In.HEADER);\n    }\n\n    /**\n     * http\u8ba4\u8bc1\n     */\n    public SecurityScheme httpSecuritySchema() {\n        return new SecurityScheme()\n                // token\u7c7b\u578b\n                .type(SecurityScheme.Type.HTTP)\n                // token\u540d\u79f0\n                .name(PlatformConstant.HEADER_AUTHORIZATION)\n                // token\u4f4d\u7f6e\n                .in(SecurityScheme.In.HEADER);\n    }\n\n    /**\n     * oauth\u8ba4\u8bc1\n     */\n    public SecurityScheme oauth2SecuritySchema() {\n        return new SecurityScheme()\n                // token\u7c7b\u578b\n                .type(SecurityScheme.Type.OAUTH2)\n                .name("OAuth2\u8ba4\u8bc1")\n                .description("OAuth2\u8ba4\u8bc1")\n                .flows(new OAuthFlows()\n//                        .implicit()\n//                        .clientCredentials()\n                        .password(new OAuthFlow()\n                                .authorizationUrl("/oauth2/authorize")\n                                .tokenUrl("/oauth2/token")\n                                .refreshUrl("/oauth2/refreshToken")\n                                .scopes(scopes()))\n                        .authorizationCode(new OAuthFlow()\n                                .authorizationUrl("/oauth2/authorize")\n                                .tokenUrl("/oauth2/token")\n                                .refreshUrl("/oauth2/refreshToken")\n                                .scopes(scopes())));\n    }\n\n    private Scopes scopes() {\n        return new Scopes()\n                .addString("global", "accessAnything");\n    }\n\n    // endregion\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-springdocconfig-\u914d\u7f6e\u7c7b",children:"6. SpringDocConfig \u914d\u7f6e\u7c7b"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.config;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport com.light.cloud.common.core.constant.PlatformConstant;\nimport io.swagger.v3.oas.models.parameters.HeaderParameter;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport org.springdoc.core.customizers.OpenApiCustomizer;\nimport org.springdoc.core.customizers.GlobalOpenApiCustomizer;\nimport org.springdoc.core.customizers.GlobalOperationCustomizer;\nimport org.springdoc.core.models.GroupedOpenApi;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties;\nimport org.springframework.boot.actuate.autoconfigure.web.server.ManagementPortType;\nimport org.springframework.boot.actuate.endpoint.ExposableEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.EndpointLinksResolver;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMapping;\nimport org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes;\nimport org.springframework.boot.actuate.endpoint.web.ExposableWebEndpoint;\nimport org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier;\nimport org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\nimport org.springframework.core.env.Profiles;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.web.method.HandlerMethod;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.TreeTraversingParser;\nimport com.fasterxml.jackson.databind.type.MapType;\nimport com.light.cloud.common.core.constant.BaseConstant;\nimport com.light.cloud.common.core.enums.ResponseEnum;\nimport com.light.cloud.common.core.tool.StringTool;\nimport com.light.cloud.common.web.openapi.properties.OpenapiProperties;\nimport com.light.cloud.common.web.openapi.properties.RouteDefinition;\n\nimport io.swagger.v3.core.util.Json;\nimport io.swagger.v3.core.util.Yaml;\nimport io.swagger.v3.oas.models.Components;\nimport io.swagger.v3.oas.models.media.Schema;\nimport io.swagger.v3.oas.models.OpenAPI;\nimport io.swagger.v3.oas.models.Operation;\nimport io.swagger.v3.oas.models.parameters.Parameter;\nimport io.swagger.v3.oas.models.PathItem;\nimport io.swagger.v3.oas.models.Paths;\nimport io.swagger.v3.oas.models.servers.Server;\nimport jakarta.annotation.Resource;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * SpringDoc\u914d\u7f6e\u7c7b\n *\n * @author Hui Liu\n * @date 2022/7/29\n */\n@Slf4j\n@Configuration\npublic class SpringDocConfig {\n\n    @Value(("${server.servlet.context-path:}"))\n    private String contextPath;\n\n    public static final String BASE_PACKAGE = "com.light.cloud.common.web.endpoints";\n\n    @Resource\n    private Environment environment;\n\n    @Resource\n    private OpenapiProperties openapiProperties;\n\n    @Resource\n    private List<Parameter> openapiParameters;\n\n    private CustomOperationCustomizer customOperationCustomizer = new CustomOperationCustomizer();\n\n    private CustomOpenApiCustomizer customOpenApiCustomizer = new CustomOpenApiCustomizer();\n\n    /**\n     * \u6dfb\u52a0\u5206\u7ec4\n     *\n     * @return\n     */\n    @Bean("platformApi")\n    public GroupedOpenApi platformApi() {\n        boolean isOpen = true;\n        String profileStr = openapiProperties.getProfiles();\n        if (StringUtils.isNotBlank(profileStr)) {\n            List<String> profileList = Arrays.stream(profileStr.split(BaseConstant.COMMA))\n                    .map(String::trim).collect(Collectors.toList());\n            Profiles profiles = Profiles.of(profileList.toArray(new String[0]));\n            isOpen = environment.acceptsProfiles(profiles);\n        }\n        return GroupedOpenApi.builder()\n                .group(openapiProperties.getBaseGroup())\n                // \u626b\u63cf\u8be5\u5305\u4e0b\u7684\u6240\u6709\u9700\u8981\u5728Swagger\u4e2d\u5c55\u793a\u7684API\uff0c@Hidden \u6ce8\u89e3\u6807\u6ce8\u7684\u9664\u5916\n                .packagesToScan(BASE_PACKAGE)\n                // \u6dfb\u52a0\u5168\u5c40\u53c2\u6570\n                .addOperationCustomizer(customOperationCustomizer)\n                // \u6dfb\u52a0\u7edf\u4e00\u7684\u4e0a\u4e0b\u6587\u5730\u5740 contextPath\n//                .addOpenApiCustomizer(customOpenApiCustomizer)\n                .build();\n    }\n\n    @Bean("serviceApi")\n    public GroupedOpenApi serviceApi() {\n        boolean isOpen = true;\n        String profileStr = openapiProperties.getProfiles();\n        if (StringUtils.isNotBlank(profileStr)) {\n            List<String> profileList = Arrays.stream(profileStr.split(BaseConstant.COMMA))\n                    .map(String::trim).collect(Collectors.toList());\n            Profiles profiles = Profiles.of(profileList.toArray(new String[0]));\n            isOpen = environment.acceptsProfiles(profiles);\n        }\n        return GroupedOpenApi.builder()\n                .group(openapiProperties.getScanGroup())\n                // \u626b\u63cf\u8be5\u5305\u4e0b\u7684\u6240\u6709\u9700\u8981\u5728Swagger\u4e2d\u5c55\u793a\u7684API\uff0c @Hidden \u6ce8\u89e3\u6807\u6ce8\u7684\u9664\u5916\n                .packagesToScan(openapiProperties.getScanPackages())\n                // \u6dfb\u52a0\u5168\u5c40\u53c2\u6570\n                .addOperationCustomizer(customOperationCustomizer)\n                // \u6dfb\u52a0\u7edf\u4e00\u7684\u4e0a\u4e0b\u6587\u5730\u5740 contextPath\n//                .addOpenApiCustomizer(customOpenApiCustomizer)\n                .build();\n    }\n\n    // region \u52a8\u6001\u6ce8\u518cSwagger\u6587\u6863\u914d\u7f6e\n//    /**\n//     * \u52a8\u6001\u6ce8\u518cSwagger\u6587\u6863\u914d\u7f6e\n//     */\n//    @Bean\n//    public OpenapiAdditionalBeanRegistry openapiAdditionalBeanRegistry() {\n//        return new OpenapiAdditionalBeanRegistry();\n//    }\n\n    /**\n     * \u6ce8\u518c\u9879\u76ee\u6a21\u5757\u5185\u90e8\u7684\u63a5\u53e3\u6587\u6863\n     */\n    public void registerInternalOpenApis(ConfigurableListableBeanFactory beanFactory) {\n        Map<String, GroupedOpenApi> openApis = internalOpenApis();\n        for (Map.Entry<String, GroupedOpenApi> entry : openApis.entrySet()) {\n            String docName = entry.getKey();\n            GroupedOpenApi openApi = entry.getValue();\n            beanFactory.registerSingleton(docName + "InternalApi", openApi);\n        }\n    }\n\n    /**\n     * \u6ce8\u518c\u9879\u76ee\u6a21\u5757\u5916\u90e8\u7684\u63a5\u53e3\u6587\u6863\n     *\n     * @deprecated \u6b64\u65b9\u5f0f\u53ea\u80fd\u5b9e\u73b0\u63a5\u53e3\u7684\u5c55\u793a\uff0c\u4e0d\u80fd\u8de8\u670d\u52a1\u8c03\u7528\uff0c\u4f7f\u7528 knife4j aggregation \u4ee3\u66ff\n     */\n    public void registerExternalOpenApis(ConfigurableListableBeanFactory beanFactory) {\n        Map<String, GroupedOpenApi> openApis = externalOpenApis();\n        for (Map.Entry<String, GroupedOpenApi> entry : openApis.entrySet()) {\n            String docName = entry.getKey();\n            GroupedOpenApi openApi = entry.getValue();\n            beanFactory.registerSingleton(docName + "ExternalApi", openApi);\n        }\n    }\n\n    /**\n     * \u89e3\u6790\u9879\u76ee\u6a21\u5757\u5185\u90e8\u7684\u63a5\u53e3\u6587\u6863\n     *\n     * @return key-\u7ec4\u540d\u79f0 value-Api\u6587\u6863\u5bf9\u8c61\n     */\n    public Map<String, GroupedOpenApi> internalOpenApis() {\n        Map<String, RouteDefinition> internals = openapiProperties.getInternals();\n        if (MapUtils.isEmpty(internals)) {\n            return Collections.emptyMap();\n        }\n        Map<String, GroupedOpenApi> openApiMap = new HashMap<>(internals.size());\n        for (Map.Entry<String, RouteDefinition> entry : internals.entrySet()) {\n            String entityKey = entry.getKey();\n            RouteDefinition route = entry.getValue();\n            String groupName = StringUtils.isBlank(route.getGroupName()) ? parseGroupName(entityKey) : route.getGroupName();\n            String scanPackage = route.getLocation();\n\n            GroupedOpenApi openApi = GroupedOpenApi.builder()\n                    .group(groupName)\n                    // \u626b\u63cf\u8be5\u5305\u4e0b\u7684\u6240\u6709\u9700\u8981\u5728Swagger\u4e2d\u5c55\u793a\u7684API\uff0c@Hidden \u6ce8\u89e3\u6807\u6ce8\u7684\u9664\u5916\n                    .packagesToScan(scanPackage)\n                    // \u6dfb\u52a0\u5168\u5c40\u53c2\u6570\n                    .addOperationCustomizer(customOperationCustomizer)\n                    // \u6dfb\u52a0\u7edf\u4e00\u7684\u4e0a\u4e0b\u6587\u5730\u5740 contextPath\n//                    .addOpenApiCustomizer(customOpenApiCustomizer)\n                    .build();\n\n            openApiMap.put(entityKey, openApi);\n        }\n        return openApiMap;\n    }\n\n    /**\n     * \u89e3\u6790\u9879\u76ee\u6a21\u5757\u5916\u90e8\u7684\u63a5\u53e3\u6587\u6863\n     *\n     * @return key-\u7ec4\u540d\u79f0 value-Api\u6587\u6863\u5bf9\u8c61\n     * @deprecated \u6b64\u65b9\u5f0f\u53ea\u80fd\u5b9e\u73b0\u63a5\u53e3\u7684\u5c55\u793a\uff0c\u4e0d\u80fd\u8de8\u670d\u52a1\u8c03\u7528\uff0c\u4f7f\u7528 knife4j aggregation \u4ee3\u66ff\n     */\n    public Map<String, GroupedOpenApi> externalOpenApis() {\n        Map<String, RouteDefinition> externals = openapiProperties.getExternals();\n        if (MapUtils.isEmpty(externals)) {\n            return Collections.emptyMap();\n        }\n        Map<String, GroupedOpenApi> openApiMap = new HashMap<>(externals.size());\n        for (Map.Entry<String, RouteDefinition> entry : externals.entrySet()) {\n            String entityKey = entry.getKey();\n            RouteDefinition route = entry.getValue();\n            String groupName = StringUtils.isBlank(route.getGroupName()) ? parseGroupName(entityKey) : route.getGroupName();\n            String resourcePath = buildUrl(route.getSchema().toLowerCase(), route.getUri(), route.getLocation());\n            Map<String, Object> apiSpecMap = getResourceAsMap(resourcePath);\n\n            GroupedOpenApi openApi = GroupedOpenApi.builder()\n                    .group(groupName)\n                    // \u626b\u63cf\u8be5\u5305\u4e0b\u7684\u6240\u6709\u9700\u8981\u5728Swagger\u4e2d\u5c55\u793a\u7684API\uff0c@Hidden \u6ce8\u89e3\u6807\u6ce8\u7684\u9664\u5916\n//                    .packagesToScan(scanPackage)\n                    // \u6dfb\u52a0\u5168\u5c40\u53c2\u6570\n                    .addOperationCustomizer(customOperationCustomizer)\n                    // \u6dfb\u52a0\u7edf\u4e00\u7684\u4e0a\u4e0b\u6587\u5730\u5740 contextPath\n                    .addOpenApiCustomizer(new FileOpenApiCustomizer(apiSpecMap, route.getServerUrl()))\n                    .build();\n\n            openApiMap.put(entityKey, openApi);\n        }\n        return openApiMap;\n    }\n\n    private String parseGroupName(String entityKey) {\n        String[] strings = StringUtils.splitByCharacterTypeCamelCase(entityKey);\n        return Arrays.stream(strings).map(s -> StringTool.toUpperCamelCase(s, null))\n                .collect(Collectors.joining(BaseConstant.SPACE));\n    }\n\n    private String buildUrl(String schema, String uri, String path) {\n        if (StringUtils.equalsAny(schema, "http", "https")) {\n            return schema + "://" + uri + "/" + path;\n        } else if (StringUtils.equalsAny(schema, "ftp", "sftp")) {\n            return schema + "://" + uri + "/" + path;\n        } else if (StringUtils.equalsAny(schema, "classpath")) {\n            return path;\n        } else if (StringUtils.equalsAny(schema, "file")) {\n            String osName = System.getProperty("os.name").toLowerCase();\n            if (osName.startsWith("windows")) {\n                return schema + ":///" + uri + "/" + path;\n            } else if (osName.startsWith("linux")) {\n                return schema + ":/" + uri + "/" + path;\n            }\n        }\n        throw new UnsupportedOperationException("Unsupported schema: " + schema);\n    }\n\n    private Map<String, Object> getResourceAsMap(String resourcePath) {\n        try {\n            // \u652f\u6301 classpath:  file:// http: ftp:// \u7b49\u534f\u8bae\n            org.springframework.core.io.Resource resource = new PathMatchingResourcePatternResolver()\n                    .getResource(resourcePath);\n            byte[] bytes = resource.getContentAsByteArray();\n            if (ArrayUtils.isNotEmpty(bytes)) {\n                String content = new String(bytes, StandardCharsets.UTF_8);\n\n                Map<String, Object> apiSpecMap = null;\n                if (resourcePath.endsWith(BaseConstant.DOT_YAML) || resourcePath.endsWith(BaseConstant.DOT_YML)) {\n                    apiSpecMap = yamlToMap(content, Map.class);\n                } else {\n                    apiSpecMap = jsonToMap(content, Map.class, String.class, Object.class);\n                }\n                return apiSpecMap;\n            }\n        } catch (Exception ex) {\n            log.error(ex.getMessage());\n        }\n        return null;\n    }\n\n    // endregion\n\n    // region \u53ef\u89e3\u51b3Spring 6.x \u4e0eSwagger 3.0.0 \u4e0d\u517c\u5bb9\u95ee\u9898\n\n    /**\n     * \u589e\u52a0\u5982\u4e0b\u914d\u7f6e\u53ef\u89e3\u51b3Spring 6.x \u4e0eSwagger 3.0.0 \u4e0d\u517c\u5bb9\u95ee\u9898\n     **/\n    @Bean\n    public WebMvcEndpointHandlerMapping webEndpointServletHandlerMapping(WebEndpointsSupplier webEndpointsSupplier,\n                                                                         ServletEndpointsSupplier servletEndpointsSupplier,\n                                                                         ControllerEndpointsSupplier controllerEndpointsSupplier,\n                                                                         EndpointMediaTypes endpointMediaTypes,\n                                                                         CorsEndpointProperties corsProperties,\n                                                                         WebEndpointProperties webEndpointProperties,\n                                                                         Environment environment) {\n        List<ExposableEndpoint<?>> allEndpoints = new ArrayList();\n        Collection<ExposableWebEndpoint> webEndpoints = webEndpointsSupplier.getEndpoints();\n        allEndpoints.addAll(webEndpoints);\n        allEndpoints.addAll(servletEndpointsSupplier.getEndpoints());\n        allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints());\n        String basePath = webEndpointProperties.getBasePath();\n        EndpointMapping endpointMapping = new EndpointMapping(basePath);\n        boolean shouldRegisterLinksMapping = this.shouldRegisterLinksMapping(webEndpointProperties, environment, basePath);\n        return new WebMvcEndpointHandlerMapping(endpointMapping, webEndpoints,\n                endpointMediaTypes, corsProperties.toCorsConfiguration(),\n                new EndpointLinksResolver(allEndpoints, basePath), shouldRegisterLinksMapping);\n    }\n\n    private boolean shouldRegisterLinksMapping(WebEndpointProperties webEndpointProperties,\n                                               Environment environment,\n                                               String basePath) {\n        return webEndpointProperties.getDiscovery().isEnabled()\n                && (org.springframework.util.StringUtils.hasText(basePath)\n                || ManagementPortType.get(environment).equals(ManagementPortType.DIFFERENT));\n    }\n\n    // endregion\n\n\n    // region \u5168\u5c40\u53c2\u6570\u53ca\u4e0a\u4e0b\u6587\u5904\u7406\n\n    /**\n     * \u6dfb\u52a0\u5168\u5c40\u7684\u8bf7\u6c42\u5934\u53c2\u6570\uff0c\u5e76\u4e3a\u6240\u6709\u63a5\u53e3\u6dfb\u52a0context-path\n     */\n    // @Bean\n    public OpenApiCustomizer customerGlobalOpenApiCustomizer() {\n        return openApi -> {\n            Paths paths = openApi.getPaths();\n            String[] pathSet = paths.keySet().toArray(new String[0]);\n            for (String path : pathSet) {\n                PathItem pathItem = paths.get(path);\n                // \u6dfb\u52a0\u5168\u5c40\u7684\u8bf7\u6c42\u5934\u53c2\u6570\n                pathItem.readOperations().forEach(operation -> {\n                    // \u5f15\u7528\u5728 OpenAPI \u4e2d\u5b9a\u4e49\u7684 components\n                    operation.addParametersItem(new HeaderParameter().$ref("#/components/parameters/" + PlatformConstant.HEADER_CLIENT_ID))\n                            .addParametersItem(new HeaderParameter().$ref("#/components/parameters/" + PlatformConstant.HEADER_AUTHORIZATION));\n                });\n                // \u4e3a\u63a5\u53e3\u6dfb\u52a0 context-path\n                paths.put(contextPath + path, pathItem);\n                paths.remove(path);\n            }\n        };\n    }\n\n\n    public class CustomOperationCustomizer implements GlobalOperationCustomizer {\n        @Override\n        public Operation customize(Operation operation, HandlerMethod handlerMethod) {\n            for (Parameter parameter : openapiParameters) {\n                operation.addParametersItem(parameter);\n            }\n            return operation;\n        }\n    }\n\n    public class CustomOpenApiCustomizer implements GlobalOpenApiCustomizer {\n\n        @Override\n        public void customise(OpenAPI openApi) {\n            if (StringUtils.isBlank(contextPath)) {\n                return;\n            }\n            Paths paths = openApi.getPaths();\n            // To avoid ConcurrentModificationException\n            String[] keySet = paths.keySet().toArray(new String[0]);\n            for (String key : keySet) {\n                if (key.startsWith(contextPath)) {\n                    continue;\n                }\n                PathItem pathItem = paths.get(key);\n                // add contextPath to the individual operation\n                paths.put(contextPath + key, pathItem);\n                paths.remove(key);\n            }\n\n//            Server server = openApi.getServers().get(0);\n//            // Add the basePath to the server entry\n//            server.setUrl(server.getUrl());\n        }\n    }\n\n    /**\n     * @see <a href="https://stackoverflow.com/questions/71156280/how-can-i-add-custom-json-object-to-openapi-spec-generated-by-springboot-springd">How can I add custom json object to Openapi spec generated by SpringBoot SpringDoc?</a>\n     * @see <a href="https://github.com/springdoc/springdoc-openapi/issues/705">Programatically schemas added are not showed in the generated openapi </a>\n     * @see <a href="https://github.com/springdoc/springdoc-openapi/issues/1703">How to refresh the API</a>\n     */\n    public class FileOpenApiCustomizer implements GlobalOpenApiCustomizer {\n\n        private Map<String, Object> apiSpecMap;\n        private List<String> serverUrls;\n\n        public FileOpenApiCustomizer(Map<String, Object> apiSpecMap, String serverUrls) {\n            this.apiSpecMap = apiSpecMap;\n            if (StringUtils.isNotBlank(serverUrls)) {\n                this.serverUrls = Arrays.stream(serverUrls.split(",")).toList();\n            }\n        }\n\n        @Override\n        public void customise(OpenAPI openApi) {\n            if (StringUtils.isBlank(contextPath)) {\n                contextPath = "";\n            }\n            // add external info to api\n            Map<String, Object> extensions = new HashMap<>();\n            extensions.put("external", "https://lorchr.github.io/light-docusaurus");\n            openApi.setExtensions(extensions);\n\n            // \u6dfb\u52a0server\u4fe1\u606f\uff0c\u53d1\u9001\u8bf7\u6c42\u662f curl\u811a\u672c\u4f1a\u751f\u6210\u65b0\u7684url\n            if (CollectionUtils.isNotEmpty(serverUrls)) {\n                List<Server> servers = serverUrls.stream().map(url -> {\n                    Server server = new Server();\n                    server.setUrl(url);\n                    return server;\n                }).collect(Collectors.toList());\n                openApi.setServers(servers);\n            }\n\n            Map<String, Object> pathMap = (Map<String, Object>) apiSpecMap.get("paths");\n            Paths paths = openApi.getPaths();\n            // Note: \u5982\u679c\u6b64\u5904\u4e0d\u6e05\u7a7a\uff0c\u5176\u4ed6\u63a5\u53e3\u7684\u6570\u636e\u4e5f\u4f1a\u663e\u793a\u5230\u5f53\u524d\u7684\u63a5\u53e3\u96c6\u4e2d\n            paths.clear();\n            for (Map.Entry<String, Object> entry : pathMap.entrySet()) {\n                String key = entry.getKey();\n                Map<String, Object> valueMap = (Map<String, Object>) entry.getValue();\n                PathItem pathItem = jsonToBean(beanToJson(valueMap), PathItem.class);\n//                for (Map.Entry<String, Object> innerEntry : valueMap.entrySet()) {\n//                    String innerKey = innerEntry.getKey();\n//                    Object innerValue = innerEntry.getValue();\n//                    Operation operation = jsonToBean(JsonTool.beanToJson(innerValue), Operation.class);\n//                    if (PathItem.HttpMethod.POST.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setPost(operation);\n//                    } else if (PathItem.HttpMethod.GET.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setGet(operation);\n//                    } else if (PathItem.HttpMethod.PUT.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setPut(operation);\n//                    } else if (PathItem.HttpMethod.PATCH.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setPatch(operation);\n//                    } else if (PathItem.HttpMethod.DELETE.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setDelete(operation);\n//                    } else if (PathItem.HttpMethod.HEAD.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setHead(operation);\n//                    } else if (PathItem.HttpMethod.OPTIONS.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setOptions(operation);\n//                    } else if (PathItem.HttpMethod.TRACE.name().equalsIgnoreCase(innerKey)) {\n//                        pathItem.setTrace(operation);\n//                    }\n//                }\n                paths.addPathItem(key, pathItem);\n            }\n\n//            String openapi = (String) apiSpecMap.get("openapi");\n//            List<Object> info = (List<Object>) apiSpecMap.get("info");\n//            Map<String, Object> externalDocs = (Map<String, Object>) apiSpecMap.get("externalDocs");\n//            List<Object> servers = (List<Object>) apiSpecMap.get("servers");\n//            List<Object> tags = (List<Object>) apiSpecMap.get("tags");\n//            Map<String, Object> paths = (Map<String, Object>) apiSpecMap.get("paths");\n//            List<Object> security = (List<Object>) apiSpecMap.get("security");\n//            Map<String, Object> components = (Map<String, Object>) apiSpecMap.get("components");\n\n            Components components = openApi.getComponents();\n            Map<String, Object> componentMap = (Map<String, Object>) apiSpecMap.get("components");\n            Map<String, Object> schemaMap = (Map<String, Object>) componentMap.get("schemas");\n            for (Map.Entry<String, Object> entry : schemaMap.entrySet()) {\n                String key = entry.getKey();\n                Object value = entry.getValue();\n\n                Schema schema = jsonToBean(beanToJson(value), Schema.class);\n                components.addSchemas(key, schema);\n            }\n        }\n    }\n\n    // endregion\n\n\n    /**\n     * \u4f7f\u7528Swagger\u65f6\uff0c\u6700\u597d\u4f7f\u7528\u81ea\u5e26\u7684 {@link io.swagger.v3.core.util.Json} {@link io.swagger.v3.core.util.Yaml}\u89e3\u6790\u7c7b\n     *\n     * @param content json\u5b57\u7b26\u4e32\n     * @param clazz   \u76ee\u6807\u5bf9\u8c61\u7c7b\u578b\n     * @return clazz \u7c7b\u578b\u5bf9\u8c61\n     */\n    public <T> T jsonToBean(String content, Class<T> clazz) {\n        try {\n            return Json.mapper().readValue(content, clazz);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public Map jsonToMap(String content, Class<? extends Map> mapType,\n                         Class<String> keyType, Class<Object> valueType) {\n        try {\n            ObjectMapper mapper = Json.mapper();\n            MapType type = mapper.getTypeFactory()\n                    .constructMapType(mapType, keyType, valueType);\n            return mapper.readValue(content, type);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String beanToJson(Object bean) {\n        try {\n            return Json.mapper().writeValueAsString(bean);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public <T> T yamlToBean(String content, Class<T> clazz) {\n        try {\n            return Yaml.mapper().readValue(content, clazz);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * Jackson yaml\u4e0d\u652f\u6301\u5e26\u951a\u70b9\u7684yaml\u6587\u6863\u89e3\u6790\uff1a\n     *\n     * @see <a href="https://stackoverflow.com/questions/40074700/jackson-yaml-support-for-anchors-and-references">Jackson YAML: support for anchors and references</a>\n     * @see <a href="https://github.com/FasterXML/jackson-dataformats-text/issues/98">Jackson Yaml anchors/references Support</a>\n     */\n    public static <K, V> Map<K, V> yamlToMap(String content, Class<? extends Map> mapType,\n                                             Class<K> keyType, Class<V> valueType) {\n        try {\n            ObjectMapper mapper = Yaml.mapper();\n            final JsonNode rootNode = mapper.readTree(content);\n\n            MapType type = mapper.getTypeFactory()\n                    .constructMapType(mapType, keyType, valueType);\n            TreeTraversingParser treeTraversingParser = new TreeTraversingParser(rootNode);\n            return mapper.readValue(treeTraversingParser, type);\n        } catch (Exception e) {\n            log.error(ResponseEnum.YAML_PARSE_ERROR.getDesc(), e);\n        }\n        return null;\n    }\n\n    /**\n     * \u4f7f\u7528 snakeyaml \u53ef\u4ee5\u652f\u6301\u951a\u70b9\n     */\n    public Map yamlToMap(String content, Class<? extends Map> mapType) {\n        org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml();\n        return yaml.loadAs(content, mapType);\n    }\n\n    public String beanToYaml(Object bean) {\n        try {\n            return Yaml.mapper().writeValueAsString(bean);\n        } catch (JsonProcessingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"7openapiadditionalbeanregistry-\u52a8\u6001\u6ce8\u518c\u7c7b",children:"7.OpenapiAdditionalBeanRegistry \u52a8\u6001\u6ce8\u518c\u7c7b"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.processor;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springdoc.core.properties.SpringDocConfigProperties;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.PropertyValues;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;\n\nimport com.light.cloud.common.web.openapi.config.SpringDocConfig;\nimport jakarta.annotation.Resource;\n\n/**\n * Swagger \u989d\u5916Bean\u7684\u624b\u52a8\u6ce8\u518c\n *\n * @see springfox.documentation.spring.web.plugins.DocumentationPluginsManager\n * @see org.springdoc.core.providers.SpringDocProviders\n * @see org.springdoc.core.configuration.SpringDocConfiguration#springDocProviders(java.util.Optional, java.util.Optional, java.util.Optional, java.util.Optional, java.util.Optional, java.util.Optional, java.util.Optional, org.springdoc.core.providers.ObjectMapperProvider)\n * @see org.springframework.web.servlet.DispatcherServlet#doDispatch(jakarta.servlet.http.HttpServletRequest, jakarta.servlet.http.HttpServletResponse)\n * @see org.springdoc.webmvc.ui.SwaggerConfigResource#openapiJson(HttpServletRequest)\n * @author Hui Liu\n * @date 2022/9/27\n */\npublic class OpenapiAdditionalBeanRegistry implements InstantiationAwareBeanPostProcessor, BeanFactoryAware {\n\n    @Resource\n    private SpringDocConfig springDocConfig;\n\n    @Resource\n    private SpringDocConfigProperties springDocConfigProperties;\n\n    private ConfigurableListableBeanFactory beanFactory;\n\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n        if (beanFactory instanceof ConfigurableListableBeanFactory) {\n            this.beanFactory = (ConfigurableListableBeanFactory) beanFactory;\n        }\n    }\n\n    @Override\n    public PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName) throws BeansException {\n        // springfox \u5207\u5165\u70b9\n//        if ("documentationPluginsManager".equals(beanName)) {\n//            springDocConfig.registerOpenApis(beanFactory);\n//        }\n        // springdoc \u5207\u5165\u70b9\n        if ("springDocProviders".equals(beanName)) {\n            springDocConfig.registerInternalOpenApis(beanFactory);\n            // Note: \u63a5\u53e3\u5e9f\u5f03\uff0c\u5916\u90e8\u63a5\u53e3\u8c03\u7528\u4f7f\u7528 knife4j-aggregation\n            springDocConfig.registerExternalOpenApis(beanFactory);\n\n            // \u7981\u7528\u7f13\u5b58\uff0c\u4f1a\u81ea\u52a8\u52a0\u8f7d\u65b0\u7684\u6587\u6863\n            SpringDocConfigProperties.Cache cache = springDocConfigProperties.getCache();\n            if (!cache.isDisabled()) {\n                cache.setDisabled(Boolean.TRUE);\n                springDocConfigProperties.setCache(cache);\n            }\n        }\n        return InstantiationAwareBeanPostProcessor.super.postProcessProperties(pvs, bean, beanName);\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u805a\u5408api\u6587\u6863",children:"\u805a\u5408Api\u6587\u6863"}),"\n",(0,r.jsx)(n.h3,{id:"1-\u6dfb\u52a0\u4f9d\u8d56\u9879-1",children:"1. \u6dfb\u52a0\u4f9d\u8d56\u9879"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-aggregation-spring-boot-starter</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\u6dfb\u52a0\u914d\u7f6e-1",children:"2. \u6dfb\u52a0\u914d\u7f6e"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# \u4f7f\u7528 knife4j aggregation \u5b9e\u73b0\u5916\u90e8\u63a5\u53e3\u7684\u5c55\u793a\u548c\u8c03\u7528\nknife4j:\n  enable-aggregation: true\n  cloud:\n    enable: true\n    routes:\n      - name: \u6743\u9650\u7ba1\u7406\n        uri: 192.168.3.49:80\n        location: /oauth/v3/api-docs\n      - name: \u7cfb\u7edf\u7ba1\u7406\n        uri: 192.168.3.49:80\n        location: /system/v3/api-docs\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-routeproxyfilter-\u8def\u7531\u8fc7\u6ee4\u5668",children:"3. RouteProxyFilter \u8def\u7531\u8fc7\u6ee4\u5668"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.filter;\n\nimport cn.hutool.core.io.IoUtil;\nimport cn.hutool.core.util.StrUtil;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.SwaggerRoute;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.stream.JsonReader;\nimport com.light.cloud.common.core.tool.JsonTool;\nimport com.light.cloud.common.web.openapi.aggregation.RouteDispatcher;\nimport jakarta.servlet.Filter;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.FilterConfig;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletOutputStream;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.util.ContentCachingResponseWrapper;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.spring.configuration.Knife4jAggregationAutoConfiguration\n * @see com.github.xiaoymin.knife4j.aggre.core.filter.Knife4jRouteProxyFilter\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:06\n */\npublic class RouteProxyFilter implements Filter {\n\n    private final RouteDispatcher routeDispatcher;\n    private final Gson gson = new GsonBuilder().create();\n\n    Logger logger = LoggerFactory.getLogger(RouteProxyFilter.class);\n\n    public RouteProxyFilter(RouteDispatcher routeDispatcher) {\n        this.routeDispatcher = routeDispatcher;\n    }\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) servletRequest;\n        HttpServletResponse response = (HttpServletResponse) servletResponse;\n        String uri = request.getRequestURI();\n        // Note: \u6709\u4e9b\u7248\u672c\u7684\u524d\u7aef\u4ee3\u7801\u4e2dHeader\u540d\u79f0 knife4j-gateway-request \u5b58\u5728\u62fc\u5199\u9519\u8bef\n        if (routeDispatcher.checkRoute(request.getHeader(RouteDispatcher.ROUTE_PROXY_HEADER_NAME))) {\n            if (StrUtil.endWith(uri, RouteDispatcher.OPENAPI_GROUP_INSTANCE_ENDPOINT)) {\n                String group = request.getParameter("group");\n                SwaggerRoute swaggerRoute = routeDispatcher.getRoute(group);\n                writeRouteResponse(response, null, swaggerRoute == null ? "" : swaggerRoute.getContent());\n                // \u54cd\u5e94\u5f53\u524d\u670d\u52a1disk-\u5b9e\u4f8b\n            } else {\n                if (logger.isDebugEnabled()) {\n                    logger.debug("Current Request URI:{},Proxy Request", uri);\n                }\n                routeDispatcher.execute(request, response);\n            }\n        } else {\n            // go on\n            if (StrUtil.endWith(uri, RouteDispatcher.OPENAPI_GROUP_ENDPOINT)) {\n                // \u54cd\u5e94\u5f53\u524d\u670d\u52a1\u805a\u5408\u7ed3\u6784\n                ContentCachingResponseWrapper responseWrapper = response instanceof ContentCachingResponseWrapper ?\n                        (ContentCachingResponseWrapper) response : new ContentCachingResponseWrapper(response);\n                filterChain.doFilter(request, responseWrapper);\n                String result = new String(responseWrapper.getContentAsByteArray());\n                writeRouteResponse(response, result, gson.toJson(routeDispatcher.getRoutes()));\n            } else if (StrUtil.endWith(uri, RouteDispatcher.OPENAPI_GROUP_INSTANCE_ENDPOINT)) {\n                // \u54cd\u5e94\u5f53\u524d\u670d\u52a1disk-\u5b9e\u4f8b\n                String group = request.getParameter("group");\n                SwaggerRoute swaggerRoute = routeDispatcher.getRoute(group);\n                writeRouteResponse(response, null, swaggerRoute == null ? "" : swaggerRoute.getContent());\n            } else if (uri.endsWith("/webjars/js/app.b0c0d7df.js")) {\n                // Note: \u4fee\u590d openapi 3.0 \u517c\u5bb9\u6027\u95ee\u9898\n                ContentCachingResponseWrapper responseWrapper = response instanceof ContentCachingResponseWrapper ?\n                        (ContentCachingResponseWrapper) response : new ContentCachingResponseWrapper(response);\n                filterChain.doFilter(request, responseWrapper);\n                String result = new String(responseWrapper.getContentAsByteArray());\n                String newResult = result.replace("url:re.a.getValue(e,\\"url\\",\\"\\",!0)", "url:re.a.getValue(e,\\"url\\",\\"\\",!0),header:re.a.getValue(e,\\"header\\",\\"\\",!0)")\n                        .replace("url:re.a.getValue(t,\\"url\\",\\"\\",!0)", "url:re.a.getValue(t,\\"url\\",\\"\\",!0),header:re.a.getValue(t,\\"header\\",\\"\\",!0)")\n                        .replace("t.servicePath=re.a.getValue(e,\\"servicePath\\",null,!0)", "t.servicePath=re.a.getValue(e,\\"servicePath\\",null,!0),t.header=re.a.getValue(e,\\"header\\",null,!0)");\n                byte[] bytes = newResult.getBytes(StandardCharsets.UTF_8);\n                responseWrapper.setContentLengthLong(bytes.length);\n                responseWrapper.setContentLength(bytes.length);\n                responseWrapper.setBufferSize(bytes.length);\n                responseWrapper.getOutputStream().write(bytes);\n                responseWrapper.copyBodyToResponse();\n            } else {\n                filterChain.doFilter(servletRequest, servletResponse);\n            }\n        }\n    }\n\n    /**\n     * \u54cd\u5e94\u670d\u52a1\u7aef\u7684\u5185\u5bb9\n     * @param response \u54cd\u5e94\u6d41\n     * @param content \u5185\u5bb9\n     * @throws IOException \u5f02\u5e38\n     */\n    protected void writeRouteResponse(HttpServletResponse response, String result, String content) throws IOException {\n        byte[] bytes = content.getBytes(StandardCharsets.UTF_8);\n        if (StringUtils.isNotBlank(result)) {\n            Map<String, Object> resultMap = JsonTool.jsonToMap(result, Map.class, String.class, Object.class);\n            List<Map<String, Object>> routes = JsonTool.jsonToBean(content, new TypeReference<List<Map<String, Object>>>() {\n            });\n            if (CollectionUtils.isNotEmpty(routes)) {\n                // \u6dfb\u52a0\u5916\u90e8\u6587\u6863\n                List<Map<String, Object>> urls = (List<Map<String, Object>>) resultMap.getOrDefault("urls", new ArrayList<>());\n                for (Map<String, Object> route : routes) {\n                    route.put("url", routeDispatcher.getRootPath() + route.get("location"));\n                    urls.add(route);\n                }\n                // \u79fb\u9664\u5355\u72ec\u7684\u6587\u6863\u914d\u7f6e\n                // resultMap.remove("url");\n                resultMap.put("urls", urls);\n                bytes = JsonTool.beanToJson(resultMap).getBytes(StandardCharsets.UTF_8);\n            }\n        }\n        ServletOutputStream outputStream = response.getOutputStream();\n        outputStream.write(bytes);\n        outputStream.flush();\n        outputStream.close();\n    }\n    @Override\n    public void destroy() {\n\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-securitybasicauthfilter-\u8ba4\u8bc1\u8fc7\u6ee4\u5668",children:"4. SecurityBasicAuthFilter \u8ba4\u8bc1\u8fc7\u6ee4\u5668"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.filter;\n\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.BasicAuth;\nimport jakarta.servlet.Filter;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.FilterConfig;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.ServletResponse;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.util.Base64;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.spring.configuration.Knife4jAggregationAutoConfiguration\n * @see com.github.xiaoymin.knife4j.aggre.core.filter.Knife4jSecurityBasicAuthFilter\n * @since  2.0.9\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/11/25 19:55\n */\npublic class SecurityBasicAuthFilter implements Filter {\n\n    Logger logger = LoggerFactory.getLogger(SecurityBasicAuthFilter.class);\n    /***\n     * basic auth\u9a8c\u8bc1\n     */\n    public static final String SwaggerBootstrapUiBasicAuthSession = "Knife4jAggregationBasicAuthSession";\n\n    /***\n     * \u662f\u5426\u5f00\u542fbasic\u9a8c\u8bc1,\u9ed8\u8ba4\u4e0d\u5f00\u542f\n     */\n    /**\n     * \u6587\u6863Basic\u4fdd\u62a4\n     */\n    private BasicAuth basicAuth;\n\n    public SecurityBasicAuthFilter(BasicAuth basicAuth) {\n        this.basicAuth = basicAuth;\n    }\n\n    protected String decodeBase64(String source) {\n        String decodeStr = null;\n        if (source != null) {\n            // BASE64Decoder decoder=new BASE64Decoder();\n            try {\n                // byte[] bytes=decoder.decodeBuffer(source);\n                byte[] bytes = Base64.getDecoder().decode(source);\n                decodeStr = new String(bytes);\n            } catch (Exception e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return decodeStr;\n    }\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest servletRequest = (HttpServletRequest) request;\n        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n        // \u9488\u5bf9swagger\u8d44\u6e90\u8bf7\u6c42\u8fc7\u6ee4\n        if (basicAuth != null && basicAuth.isEnable()) {\n            // \u5224\u65adSession\u4e2d\u662f\u5426\u5b58\u5728\n            Object swaggerSessionValue = servletRequest.getSession().getAttribute(SwaggerBootstrapUiBasicAuthSession);\n            if (swaggerSessionValue != null) {\n                chain.doFilter(request, response);\n            } else {\n                // \u5339\u914d\u5230,\u5224\u65adauth\n                // \u83b7\u53d6\u8bf7\u6c42\u5934Authorization\n                String auth = servletRequest.getHeader("Authorization");\n                if (auth == null || "".equals(auth)) {\n                    writeForbiddenCode(httpServletResponse);\n                    return;\n                }\n                String userAndPass = decodeBase64(auth.substring(6));\n                String[] upArr = userAndPass.split(":");\n                if (upArr.length != 2) {\n                    writeForbiddenCode(httpServletResponse);\n                } else {\n                    String iptUser = upArr[0];\n                    String iptPass = upArr[1];\n                    // \u5339\u914d\u670d\u52a1\u7aef\u7528\u6237\u540d\u53ca\u5bc6\u7801\n                    if (iptUser.equals(basicAuth.getUsername()) && iptPass.equals(basicAuth.getPassword())) {\n                        servletRequest.getSession().setAttribute(SwaggerBootstrapUiBasicAuthSession, basicAuth.getUsername());\n                        chain.doFilter(request, response);\n                    } else {\n                        writeForbiddenCode(httpServletResponse);\n                        return;\n                    }\n                }\n            }\n        } else {\n            chain.doFilter(request, response);\n        }\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n\n    private void writeForbiddenCode(HttpServletResponse httpServletResponse) throws IOException {\n        httpServletResponse.setStatus(401);\n        httpServletResponse.setHeader("WWW-Authenticate", "Basic realm=\\"input OpenAPI userName & password \\"");\n        httpServletResponse.getWriter().write("You do not have permission to access this resource");\n    }\n\n}\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"5-routedispatcher-\u8def\u7531\u5206\u53d1\u5668",children:"5. RouteDispatcher \u8def\u7531\u5206\u53d1\u5668"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation;\n\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport cn.hutool.core.io.IoUtil;\nimport cn.hutool.core.lang.Assert;\nimport cn.hutool.core.util.StrUtil;\nimport cn.hutool.json.JSONObject;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteCache;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteRepository;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteResponse;\nimport com.github.xiaoymin.knife4j.aggre.core.common.ExecutorEnum;\nimport com.github.xiaoymin.knife4j.aggre.core.common.RouteUtils;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.BasicAuth;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.HeaderWrapper;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.SwaggerRoute;\nimport com.light.cloud.common.web.openapi.aggregation.executor.ApacheClientExecutor;\nimport com.light.cloud.common.web.openapi.aggregation.executor.OkHttpClientExecutor;\nimport com.light.cloud.common.web.openapi.aggregation.executor.RouteExecutor;\nimport jakarta.servlet.ServletOutputStream;\nimport jakarta.servlet.http.Part;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.util.StringUtils;\n\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.net.URI;\nimport java.util.*;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.core.RouteDispatcher\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:08\n */\npublic class RouteDispatcher {\n\n    /**\n     * header\n     */\n    public static final String ROUTE_PROXY_HEADER_NAME = "knife4j-gateway-request";\n    public static final String ROUTE_PROXY_HEADER_BASIC_NAME = "knife4j-gateway-basic-request";\n    public static final String OPENAPI_GROUP_ENDPOINT = "/swagger-config";\n    public static final String OPENAPI_GROUP_INSTANCE_ENDPOINT = "/swagger-instance";\n    public static final String ROUTE_BASE_PATH = "/";\n\n    Logger logger = LoggerFactory.getLogger(com.github.xiaoymin.knife4j.aggre.core.RouteDispatcher.class);\n    /**\n     * current project contextPath\n     */\n    private String rootPath;\n\n    private RouteRepository routeRepository;\n\n    private RouteExecutor routeExecutor;\n\n    private RouteCache<String, SwaggerRoute> routeCache;\n\n    private Set<String> ignoreHeaders = new HashSet<>();\n\n    public RouteDispatcher(RouteRepository routeRepository, RouteCache<String, SwaggerRoute> routeRouteCache,\n                           ExecutorEnum executorEnum, String rootPath) {\n        this.routeRepository = routeRepository;\n        this.routeCache = routeRouteCache;\n        this.rootPath = rootPath;\n        initExecutor(executorEnum);\n        ignoreHeaders.addAll(Arrays.asList(new String[]{\n                "host", "content-length", ROUTE_PROXY_HEADER_NAME, ROUTE_PROXY_HEADER_BASIC_NAME, "Request-Origion", "language", "knife4j-gateway-code"\n        }));\n    }\n\n    private void initExecutor(ExecutorEnum executorEnum) {\n        if (executorEnum == null) {\n            throw new IllegalArgumentException("ExecutorEnum can not be empty");\n        }\n        switch (executorEnum) {\n            case APACHE:\n                this.routeExecutor = new ApacheClientExecutor();\n                break;\n            case OKHTTP:\n                this.routeExecutor = new OkHttpClientExecutor();\n                break;\n            default:\n                throw new UnsupportedOperationException("UnSupported ExecutorType:" + executorEnum.name());\n        }\n    }\n\n    public boolean checkRoute(String header) {\n        if (StrUtil.isNotBlank(header)) {\n            SwaggerRoute swaggerRoute = routeRepository.getRoute(header);\n            if (swaggerRoute != null) {\n                return StrUtil.isNotBlank(swaggerRoute.getUri());\n            }\n        }\n        return false;\n    }\n\n    public void execute(HttpServletRequest request, HttpServletResponse response) {\n        try {\n            RouteRequestContext routeContext = new RouteRequestContext();\n            this.buildContext(routeContext, request);\n            RouteResponse routeResponse = routeExecutor.executor(routeContext);\n            writeResponseStatus(routeResponse, response);\n            writeResponseHeader(routeResponse, response);\n            writeBody(routeResponse, response);\n        } catch (Exception e) {\n            logger.error("has Error:{}", e.getMessage());\n            logger.error(e.getMessage(), e);\n            // write Default\n            writeDefault(request, response, e.getMessage());\n        }\n    }\n\n    protected void writeDefault(HttpServletRequest request, HttpServletResponse response, String errMsg) {\n        response.setContentType("application/json");\n        response.setCharacterEncoding("UTF-8");\n        try {\n            PrintWriter printWriter = response.getWriter();\n            Map<String, String> map = new HashMap<>();\n            map.put("message", errMsg);\n            map.put("code", "500");\n            map.put("path", request.getRequestURI());\n            new JSONObject(map).write(printWriter);\n            printWriter.close();\n        } catch (IOException e) {\n            // ignore\n        }\n    }\n\n    /**\n     * Write Http Status Code\n     *\n     * @param routeResponse routeResponse\n     * @param response      response\n     */\n    protected void writeResponseStatus(RouteResponse routeResponse, HttpServletResponse response) {\n        if (routeResponse != null) {\n            response.setStatus(routeResponse.getStatusCode());\n        }\n    }\n\n    /**\n     * Write Response Header\n     *\n     * @param routeResponse route instance\n     * @param response Servlet Response\n     */\n    protected void writeResponseHeader(RouteResponse routeResponse, HttpServletResponse response) {\n        if (routeResponse != null) {\n            if (CollectionUtil.isNotEmpty(routeResponse.getHeaders())) {\n                for (HeaderWrapper header : routeResponse.getHeaders()) {\n                    if (!StrUtil.equalsIgnoreCase(header.getName(), "Transfer-Encoding")) {\n                        response.addHeader(header.getName(), header.getValue());\n                    }\n                }\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug("Content-Type:{},Charset-Encoding:{}", routeResponse.getContentType(), routeResponse.getCharsetEncoding());\n            }\n            response.setContentType(routeResponse.getContentType());\n            if (routeResponse.getContentLength() > 0) {\n                response.setContentLengthLong(routeResponse.getContentLength());\n            }\n            response.setCharacterEncoding(routeResponse.getCharsetEncoding().displayName());\n        }\n    }\n\n    /**\n     * Write Body\n     *\n     * @param routeResponse route\n     * @param response Servlet Response\n     */\n    protected void writeBody(RouteResponse routeResponse, HttpServletResponse response) throws IOException {\n        if (routeResponse != null) {\n            if (routeResponse.success()) {\n                InputStream inputStream = routeResponse.getBody();\n                if (inputStream != null) {\n                    int read = -1;\n                    byte[] bytes = new byte[1024 * 1024];\n                    ServletOutputStream outputStream = response.getOutputStream();\n                    while ((read = inputStream.read(bytes)) != -1) {\n                        outputStream.write(bytes, 0, read);\n                    }\n                    IoUtil.close(inputStream);\n                    IoUtil.close(outputStream);\n                }\n            } else {\n                String text = routeResponse.text();\n                if (StrUtil.isNotBlank(text)) {\n                    PrintWriter printWriter = response.getWriter();\n                    printWriter.write(text);\n                    printWriter.close();\n                }\n            }\n\n        }\n    }\n\n    /**\n     * Build Context of Route\n     * @param routeRequestContext Route Context\n     * @param request Servlet Request\n     */\n    protected void buildContext(RouteRequestContext routeRequestContext, HttpServletRequest request) throws IOException {\n        // Whether Basic\n        String basicHeader = request.getHeader(ROUTE_PROXY_HEADER_BASIC_NAME);\n        if (StrUtil.isNotBlank(basicHeader)) {\n            BasicAuth basicAuth = routeRepository.getAuth(basicHeader);\n            if (basicAuth != null) {\n                // add Basic header\n                routeRequestContext.addHeader("Authorization", RouteUtils.authorize(basicAuth.getUsername(),\n                        basicAuth.getPassword()));\n            }\n        }\n        SwaggerRoute swaggerRoute = getRoute(request.getHeader(ROUTE_PROXY_HEADER_NAME));\n        // String uri="http://knife4j.xiaominfo.com";\n        String uri = swaggerRoute.getUri();\n        String fromUri = request.getRequestURI();\n        // get project servlet.contextPath\n        if (StrUtil.isNotBlank(this.rootPath) && !StrUtil.equals(this.rootPath, ROUTE_BASE_PATH)) {\n            fromUri = fromUri.replaceFirst(this.rootPath, "");\n            // \u6b64\u5904\u9700\u8981\u8ffd\u52a0\u4e00\u4e2a\u8bf7\u6c42\u5934basePath\uff0c\u56e0\u4e3a\u7236\u9879\u76ee\u8bbe\u7f6e\u4e86context-path\n            routeRequestContext.addHeader("X-Forwarded-Prefix", this.rootPath);\n        }\n        // \u5224\u65adservicePath\n        if (StrUtil.isNotBlank(swaggerRoute.getServicePath()) && !StrUtil.equals(swaggerRoute.getServicePath(),\n                ROUTE_BASE_PATH)) {\n            if (StrUtil.startWith(fromUri, swaggerRoute.getServicePath())) {\n                // \u5b9e\u9645\u5728\u8bf7\u6c42\u65f6,\u5254\u9664servicePath,\u5426\u5219\u4f1a\u9020\u6210404\n                fromUri = fromUri.replaceFirst(swaggerRoute.getServicePath(), "");\n            }\n        }\n        if (StrUtil.isNotBlank(swaggerRoute.getLocation())) {\n            if (swaggerRoute.getLocation().indexOf(fromUri) == -1) {\n                logger.debug("location:{},fromURI:{}", swaggerRoute.getLocation(), fromUri);\n                // \u5f53\u524d\u8def\u5f84\u662f\u8bf7\u6c42\u975e\u83b7\u53d6OpenAPI\u5b9e\u4f8b\u8def\u5f84\u5730\u5740\uff0c\u5224\u65addebugURL\n                if (StrUtil.isNotBlank(swaggerRoute.getDebugUrl())) {\n                    // \u8bbe\u7f6e\u4e3a\u8c03\u8bd5\u5730\u5740\n                    uri = swaggerRoute.getDebugUrl();\n                }\n            }\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug("Debug URI:{},fromURI:{}", uri, fromUri);\n        }\n        Assert.notEmpty(uri, "Uri is Empty");\n        StringBuilder requestUrlBuilder = new StringBuilder();\n        requestUrlBuilder.append(uri);\n        requestUrlBuilder.append(fromUri);\n        // String requestUrl=uri+fromUri;\n        String requestUrl = requestUrlBuilder.toString();\n        String host = URI.create(uri).getHost();\n        if (logger.isDebugEnabled()) {\n            logger.debug("\u76ee\u6807\u8bf7\u6c42Url:{},\u8bf7\u6c42\u7c7b\u578b:{},Host:{}", requestUrl, request.getMethod(), host);\n        }\n        routeRequestContext.setOriginalUri(fromUri);\n        routeRequestContext.setUrl(requestUrl);\n        routeRequestContext.setMethod(request.getMethod());\n        Enumeration<String> enumeration = request.getHeaderNames();\n        while (enumeration.hasMoreElements()) {\n            String key = enumeration.nextElement();\n            String value = request.getHeader(key);\n            if (!ignoreHeaders.contains(key.toLowerCase())) {\n                routeRequestContext.addHeader(key, value);\n            }\n        }\n        routeRequestContext.addHeader("Host", host);\n        Enumeration<String> params = request.getParameterNames();\n        while (params.hasMoreElements()) {\n            String name = params.nextElement();\n            String value = request.getParameter(name);\n            // logger.info("param-name:{},value:{}",name,value);\n            routeRequestContext.addParam(name, value);\n        }\n        // \u589e\u52a0\u6587\u4ef6\uff0csinc 2.0.9\n        String contentType = request.getContentType();\n        if ((!StringUtils.isEmpty(contentType)) &&\n                contentType.contains("multipart/form-data")) {\n            try {\n                Collection<Part> parts = request.getParts();\n                if (CollectionUtil.isNotEmpty(parts)) {\n                    Map<String, String> paramMap = routeRequestContext.getParams();\n                    parts.forEach(part -> {\n                        String key = part.getName();\n                        if (!paramMap.containsKey(key)) {\n                            routeRequestContext.addPart(part);\n                        }\n                    });\n                }\n            } catch (ServletException e) {\n                // ignore\n                logger.warn("get part error,message:" + e.getMessage());\n            }\n        }\n        routeRequestContext.setRequestContent(request.getInputStream());\n    }\n\n    public SwaggerRoute getRoute(String header) {\n        // \u53bb\u9664\u7f13\u5b58\u673a\u5236\uff0c\u7531\u4e8eEureka\u4ee5\u53caNacos\u8bbe\u7acb\u4e86\u5fc3\u8df3\u68c0\u6d4b\u673a\u5236\uff0c\u670d\u52a1\u5728\u591a\u8282\u70b9\u90e8\u7f72\u65f6\uff0c\u8282\u70b9ip\u53ef\u80fd\u5b58\u5728\u53d8\u5316,\u5bfc\u81f4\u8c03\u8bd5\u6700\u7ec8\u8f6c\u53d1\u7ed9\u5df2\u7ecf\u4e0b\u7ebf\u7684\u670d\u52a1\n        // since 2.0.9\n        SwaggerRoute swaggerRoute = routeRepository.getRoute(header);\n        return swaggerRoute;\n    }\n\n    public List<SwaggerRoute> getRoutes() {\n        return routeRepository.getRoutes();\n    }\n\n    public String getRootPath() {\n        return rootPath;\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-routerequestcontext-\u8def\u7531\u4e0a\u4e0b\u6587",children:"6. RouteRequestContext \u8def\u7531\u4e0a\u4e0b\u6587"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation;\n\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.BasicAuth;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.HeaderWrapper;\nimport jakarta.servlet.http.Part;\n\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/***\n *\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:34\n */\npublic class RouteRequestContext {\n\n    /**\n     * \u5f53\u524d\u8bf7\u6c42\u7684\u63a5\u53e3\u5730\u5740\n     */\n    private String originalUri;\n    /**\n     * \u8bf7\u6c42\u63a5\u53e3\n     */\n    private String url;\n    /**\n     * \u8bf7\u6c42\u7c7b\u578b\n     */\n    private String method;\n    /**\n     * \u8bf7\u6c42\u5934\n     */\n    private List<HeaderWrapper> headers = new ArrayList<>();\n    /**\n     * \u67e5\u8be2\u53c2\u6570\n     */\n    private Map<String, String> params = new HashMap<>();\n    /**\n     * \u6587\u4ef6\n     */\n    private List<Part> parts = new ArrayList<>();\n\n    /**\n     * \u8bf7\u6c42\u5185\u5bb9\n     */\n    private InputStream requestContent;\n\n    /**\n     * \u8bf7\u6c42\u957f\u5ea6\n     */\n    private Long contentLength;\n    /**\n     * Basic\u9a8c\u8bc1\n     */\n    private BasicAuth basicAuth;\n\n    /**\n     * \u6dfb\u52a0\u8bf7\u6c42\u5934\n     * @param key \u8bf7\u6c42\u5934\n     * @param value \u503c\n     */\n    public void addHeader(String key, String value) {\n        this.headers.add(new HeaderWrapper(key, value));\n    }\n\n    /**\n     * \u6dfb\u52a0params\u53c2\u6570\n     * @param name \u53c2\u6570\u540d\u79f0\n     * @param value \u53c2\u6570\u503c\n     */\n    public void addParam(String name, String value) {\n        this.params.put(name, value);\n    }\n\n    /**\n     * \u589e\u52a0\u6587\u4ef6\u53c2\u6570\n     * @param part  \u6587\u4ef6\n     */\n    public void addPart(Part part) {\n        this.parts.add(part);\n    }\n\n    public BasicAuth getBasicAuth() {\n        return basicAuth;\n    }\n\n    public void setBasicAuth(BasicAuth basicAuth) {\n        this.basicAuth = basicAuth;\n    }\n\n    public String getOriginalUri() {\n        return originalUri;\n    }\n\n    public void setOriginalUri(String originalUri) {\n        this.originalUri = originalUri;\n    }\n\n    public Long getContentLength() {\n        return contentLength;\n    }\n\n    public void setContentLength(Long contentLength) {\n        this.contentLength = contentLength;\n    }\n\n    public Map<String, String> getParams() {\n        return params;\n    }\n\n    public void setParams(Map<String, String> params) {\n        this.params = params;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getMethod() {\n        return method;\n    }\n\n    public void setMethod(String method) {\n        this.method = method;\n    }\n\n    public List<HeaderWrapper> getHeaders() {\n        return headers;\n    }\n\n    public void setHeaders(List<HeaderWrapper> headers) {\n        this.headers = headers;\n    }\n\n    public InputStream getRequestContent() {\n        return requestContent;\n    }\n\n    public void setRequestContent(InputStream requestContent) {\n        this.requestContent = requestContent;\n    }\n\n    public List<Part> getParts() {\n        return parts;\n    }\n\n    public void setParts(List<Part> parts) {\n        this.parts = parts;\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"7-routeexecutor-\u8def\u7531\u6267\u884c\u5668",children:"7. RouteExecutor \u8def\u7531\u6267\u884c\u5668"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.executor;\n\nimport com.github.xiaoymin.knife4j.aggre.core.RouteResponse;\nimport com.light.cloud.common.web.openapi.aggregation.RouteRequestContext;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.core.RouteExecutor\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:33\n */\npublic interface RouteExecutor {\n\n    /**\n     * \u6267\u884c\u5668\n     * @param routeContext \u8bf7\u6c42\u4e0a\u4e0b\u6587\n     * @return \u54cd\u5e94\u5bf9\u8c61\n     */\n    RouteResponse executor(RouteRequestContext routeContext);\n}\n\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8-okhttpclientexecutor-\u8def\u7531\u6267\u884c\u5668-okhttp-\u5b9e\u73b0",children:"8. OkHttpClientExecutor \u8def\u7531\u6267\u884c\u5668 OkHttp \u5b9e\u73b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.executor;\n\n\nimport com.github.xiaoymin.knife4j.aggre.core.RouteResponse;\nimport com.light.cloud.common.web.openapi.aggregation.RouteRequestContext;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.core.executor.OkHttpClientExecutor\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:40\n */\npublic class OkHttpClientExecutor implements RouteExecutor {\n\n    @Override\n    public RouteResponse executor(RouteRequestContext routeContext) {\n        return null;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"9-apacheclientexecutor-\u8def\u7531\u6267\u884c\u5668-apache-\u5b9e\u73b0",children:"9. ApacheClientExecutor \u8def\u7531\u6267\u884c\u5668 Apache \u5b9e\u73b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.executor;\n\nimport cn.hutool.core.collection.CollectionUtil;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteResponse;\nimport com.github.xiaoymin.knife4j.aggre.core.executor.ApacheClientResponse;\nimport com.github.xiaoymin.knife4j.aggre.core.executor.DefaultClientResponse;\nimport com.github.xiaoymin.knife4j.aggre.core.ext.PoolingConnectionManager;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.HeaderWrapper;\nimport com.light.cloud.common.web.openapi.aggregation.RouteRequestContext;\nimport jakarta.servlet.http.Part;\nimport org.apache.http.Header;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.client.methods.RequestBuilder;\nimport org.apache.http.conn.HttpHostConnectException;\nimport org.apache.http.entity.BasicHttpEntity;\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.mime.HttpMultipartMode;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\n/***\n * @see com.github.xiaoymin.knife4j.aggre.core.executor.ApacheClientExecutor\n * \u57fa\u4e8eHttpClient\u7ec4\u4ef6\u7684\u8f6c\u53d1\u7b56\u7565\n * @since  2.0.8\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a>\n * 2020/10/29 20:35\n */\npublic class ApacheClientExecutor extends PoolingConnectionManager implements RouteExecutor {\n\n    Logger logger = LoggerFactory.getLogger(com.github.xiaoymin.knife4j.aggre.core.executor.ApacheClientExecutor.class);\n\n    private HttpUriRequest buildRequest(RouteRequestContext routeContext) {\n        RequestBuilder builder = RequestBuilder.create(routeContext.getMethod());\n        if (logger.isDebugEnabled()) {\n            logger.debug("ApacheClient Uri:{}", routeContext.getUrl());\n        }\n        builder.setUri(routeContext.getUrl());\n        if (CollectionUtil.isNotEmpty(routeContext.getHeaders())) {\n            // \u6784\u5efaHeader\n            for (HeaderWrapper headerWrapper : routeContext.getHeaders()) {\n                builder.addHeader(headerWrapper.getName(), headerWrapper.getValue());\n            }\n        }\n        if (CollectionUtil.isNotEmpty(routeContext.getParams())) {\n            // \u6784\u5efaParams\n            for (Map.Entry<String, String> entry : routeContext.getParams().entrySet()) {\n                builder.addParameter(entry.getKey(), entry.getValue());\n            }\n        }\n        if (routeContext.getRequestContent() != null) {\n            // \u6587\u4ef6\u8bf7\u6c42\u662f\u5426\u4e3a\u7a7a since 2.0.9\n            if (CollectionUtil.isNotEmpty(routeContext.getParts())) {\n                MultipartEntityBuilder partFileBuilder = MultipartEntityBuilder.create();\n                partFileBuilder.setCharset(StandardCharsets.UTF_8);\n                partFileBuilder.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);\n                // \u4ece\u8bf7\u6c42\u5934\u83b7\u53d6context-type\n                Header header = builder.getFirstHeader("content-type");\n                if (header != null) {\n                    // \u8d4b\u503c\n                    partFileBuilder.setContentType(ContentType.parse(header.getValue()));\n                }\n                for (Part part : routeContext.getParts()) {\n                    try {\n                        partFileBuilder.addBinaryBody(part.getName(), part.getInputStream(), ContentType.MULTIPART_FORM_DATA, part.getSubmittedFileName());// \u6587\u4ef6\u6d41\n                    } catch (IOException e) {\n                        logger.warn("add part file error,message:" + e.getMessage());\n                    }\n                }\n                builder.setEntity(partFileBuilder.build());\n            } else {\n                // \u666e\u901a\u8bf7\u6c42\uff0c\u6784\u5efa\u8bf7\u6c42\u4f53\n                BasicHttpEntity basicHttpEntity = new BasicHttpEntity();\n                basicHttpEntity.setContent(routeContext.getRequestContent());\n                // if the entity contentLength isn\'t set, transfer-encoding will be set\n                // to chunked in org.apache.http.protocol.RequestContent. See gh-1042\n                builder.setEntity(basicHttpEntity);\n            }\n        }\n        builder.setConfig(getRequestConfig());\n        return builder.build();\n    }\n\n    @Override\n    public RouteResponse executor(RouteRequestContext routeContext) {\n        RouteResponse routeResponse = null;\n        try {\n            // \u5224\u65ad\u5f53\u524d\u63a5\u53e3\u662f\u5426\u9700\u8981\u6267\u884cbasic\n            CloseableHttpResponse closeableHttpResponse = getClient().execute(buildRequest(routeContext));\n            routeResponse = new ApacheClientResponse(closeableHttpResponse);\n        } catch (Exception e) {\n            logger.error("Executor Failed,message:" + e.getMessage(), e);\n            // \u5f53\u524d\u5f02\u5e38\u6709\u53ef\u80fd\u662f\u670d\u52a1\u4e0b\u7ebf\u5bfc\u81f4\n            if (e instanceof HttpHostConnectException) {\n                // \u670d\u52a1\u4e0b\u7ebf\uff0c\u8fde\u63a5\u5931\u8d25\n                routeResponse = new DefaultClientResponse(routeContext.getOriginalUri(), e.getMessage(), 504);\n            } else {\n                routeResponse = new DefaultClientResponse(routeContext.getOriginalUri(), e.getMessage());\n            }\n        }\n        return routeResponse;\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"10-aggregationconfig",children:"10. AggregationConfig"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"\u6ce8\u610f"})," \u56e0\u4e3a\u4f7f\u7528\u4e86knif4j\u96c6\u6210\u4f9d\u8d56\u7684\u4e00\u4e9b\u5b9e\u4f53\u5bf9\u8c61\uff0c\u6240\u4ee5\u9700\u8981\u624b\u52a8\u6392\u9664 ",(0,r.jsx)(n.code,{children:"Knife4jAggregationAutoConfiguration"})," \u914d\u7f6e\u7c7b"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.cloud.common.web.openapi.aggregation.config;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteCache;\nimport com.github.xiaoymin.knife4j.aggre.core.RouteRepository;\nimport com.github.xiaoymin.knife4j.aggre.core.cache.RouteInMemoryCache;\nimport com.github.xiaoymin.knife4j.aggre.core.common.ExecutorEnum;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.BasicAuth;\nimport com.github.xiaoymin.knife4j.aggre.core.pojo.SwaggerRoute;\nimport com.github.xiaoymin.knife4j.aggre.repository.CloudRepository;\nimport com.github.xiaoymin.knife4j.aggre.repository.DiskRepository;\nimport com.github.xiaoymin.knife4j.aggre.repository.EurekaRepository;\nimport com.github.xiaoymin.knife4j.aggre.repository.NacosRepository;\nimport com.github.xiaoymin.knife4j.aggre.spring.configuration.HttpConnectionSetting;\nimport com.github.xiaoymin.knife4j.aggre.spring.configuration.Knife4jAggregationProperties;\nimport com.github.xiaoymin.knife4j.aggre.spring.support.CloudSetting;\nimport com.github.xiaoymin.knife4j.aggre.spring.support.DiskSetting;\nimport com.github.xiaoymin.knife4j.aggre.spring.support.EurekaSetting;\nimport com.github.xiaoymin.knife4j.aggre.spring.support.NacosSetting;\nimport com.light.cloud.common.web.openapi.aggregation.RouteDispatcher;\nimport com.light.cloud.common.web.openapi.aggregation.filter.RouteProxyFilter;\nimport com.light.cloud.common.web.openapi.aggregation.filter.SecurityBasicAuthFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.boot.web.servlet.filter.OrderedFormContentFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Conditional;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.env.Environment;\n\nimport java.util.Objects;\n\n/**\n * @see com.github.xiaoymin.knife4j.aggre.spring.configuration.Knife4jAggregationAutoConfiguration\n */\n@Configuration\n@EnableConfigurationProperties({Knife4jAggregationProperties.class, HttpConnectionSetting.class,\n        DiskSetting.class, CloudSetting.class, EurekaSetting.class,\n        NacosSetting.class, BasicAuth.class})\n@ConditionalOnProperty(name = "knife4j.enable-aggregation", havingValue = "true")\npublic class AggregationConfig {\n\n    final Environment environment;\n\n    @Autowired\n    public AggregationConfig(Environment environment) {\n        this.environment = environment;\n    }\n\n    @Bean\n    public RouteCache<String, SwaggerRoute> routeCache() {\n        return new RouteInMemoryCache();\n    }\n\n    @Bean(initMethod = "start", destroyMethod = "close")\n    @ConditionalOnProperty(name = "knife4j.cloud.enable", havingValue = "true")\n    public CloudRepository cloudRepository(@Autowired Knife4jAggregationProperties knife4jAggregationProperties) {\n        return new CloudRepository(knife4jAggregationProperties.getCloud());\n    }\n\n    @Bean(initMethod = "start", destroyMethod = "close")\n    @ConditionalOnProperty(name = "knife4j.eureka.enable", havingValue = "true")\n    public EurekaRepository eurekaRepository(@Autowired Knife4jAggregationProperties knife4jAggregationProperties) {\n        return new EurekaRepository(knife4jAggregationProperties.getEureka());\n    }\n\n    @Bean(initMethod = "start", destroyMethod = "close")\n    @ConditionalOnProperty(name = "knife4j.nacos.enable", havingValue = "true")\n    public NacosRepository nacosRepository(@Autowired Knife4jAggregationProperties knife4jAggregationProperties) {\n        return new NacosRepository(knife4jAggregationProperties.getNacos());\n    }\n\n    @Bean\n    @ConditionalOnProperty(name = "knife4j.disk.enable", havingValue = "true")\n    public DiskRepository diskRepository(@Autowired Knife4jAggregationProperties knife4jAggregationProperties) {\n        return new DiskRepository(knife4jAggregationProperties.getDisk());\n    }\n\n    @Bean\n    public RouteDispatcher routeDispatcher(@Autowired RouteRepository routeRepository,\n                                           @Autowired RouteCache<String, SwaggerRoute> routeCache) {\n        // \u83b7\u53d6\u5f53\u524d\u9879\u76ee\u7684contextPath\n        String contextPath = Objects.toString(environment.getProperty("server.servlet.context-path"), "");\n        if (StrUtil.isBlank(contextPath)) {\n            contextPath = "/";\n        }\n        if (StrUtil.isNotBlank(contextPath) && !StrUtil.equals(contextPath, RouteDispatcher.ROUTE_BASE_PATH)) {\n            // \u5224\u65ad\u662f\u5426/\u5f00\u5934\n            if (!StrUtil.startWith(contextPath, RouteDispatcher.ROUTE_BASE_PATH)) {\n                contextPath = RouteDispatcher.ROUTE_BASE_PATH + contextPath;\n            }\n        }\n        return new RouteDispatcher(routeRepository, routeCache, ExecutorEnum.APACHE, contextPath);\n    }\n\n    /**\n     * \u6ce8\u610f\u8fc7\u6ee4\u5668\u7684\u987a\u5e8f\uff0c\u5982\u679c\u6b64\u8fc7\u6ee4\u5668\u5728\u9274\u6743\u8fc7\u6ee4\u5668\u540e\u65b9\uff0c\u4f1a\u5bfc\u81f4\u8f6c\u53d1\u5931\u8d25\n     * @param routeDispatcher\n     * @return\n     */\n    @Bean\n    public FilterRegistrationBean routeProxyFilter(@Autowired RouteDispatcher routeDispatcher) {\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new RouteProxyFilter(routeDispatcher));\n        filterRegistrationBean.setOrder(OrderedFormContentFilter.DEFAULT_ORDER + 1);\n        filterRegistrationBean.setEnabled(true);\n        filterRegistrationBean.addUrlPatterns("/*");\n        return filterRegistrationBean;\n    }\n\n    @Bean\n    @ConditionalOnProperty(name = "knife4j.basic-auth.enable", havingValue = "true")\n    public FilterRegistrationBean routeBasicFilter(@Autowired Knife4jAggregationProperties knife4jAggregationProperties) {\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\n        filterRegistrationBean.setFilter(new SecurityBasicAuthFilter(knife4jAggregationProperties.getBasicAuth()));\n        filterRegistrationBean.setOrder(10);\n        filterRegistrationBean.setEnabled(true);\n        filterRegistrationBean.addUrlPatterns("/*");\n        return filterRegistrationBean;\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u524d\u7aef\u6539\u9020",children:"\u524d\u7aef\u6539\u9020"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"knife4j-openapi3-spring-boot-starter 4.5.0"}),"\n",(0,r.jsx)(n.li,{children:"knife4j-openapi3-ui 4.4.0"}),"\n",(0,r.jsx)(n.li,{children:"knife4j-openapi3-ui 4.5.0"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u56e0\u4e3a knife4j \u8fdb\u884c\u805a\u5408\u540e\u8fdb\u884c\u63a5\u53e3\u8c03\u8bd5\uff0c\u9700\u8981\u6839\u636e ",(0,r.jsx)(n.code,{children:"knife4j-gateway-request"})," Header\u5934\u8fdb\u884c\u8def\u7531\uff0c\u6539\u9020\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c06\u8fd9\u4e2a\u53c2\u6570\u6dfb\u52a0\u5230\u8bf7\u6c42\u4e2d"]}),"\n",(0,r.jsxs)(n.p,{children:["\u6709\u4e9b\u7248\u672c\uff0c\u5982: ",(0,r.jsx)(n.code,{children:"knife4j-openapi3-ui 4.1.0"})," \u6b64\u5c5e\u6027\u62fc\u5199\u9519\u8bef ",(0,r.jsx)(n.code,{children:"knfie4j-gateway-request"})]}),"\n",(0,r.jsx)(n.h3,{id:"1\u51c6\u5907\u5de5\u4f5c",children:"1.\u51c6\u5907\u5de5\u4f5c"}),"\n",(0,r.jsx)(n.h4,{id:"1-\u4e0b\u8f7d\u524d\u7aef\u6e90\u7801",children:"1. \u4e0b\u8f7d\u524d\u7aef\u6e90\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"git clone -b v4.5.0 https://github.com/xiaoymin/knife4j\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2-\u4fee\u6539\u524d\u7aef\u4ee3\u7406-dworkspacegithubknife4jknife4j-vuevueconfigjs",children:["2. \u4fee\u6539\u524d\u7aef\u4ee3\u7406 ",(0,r.jsx)(n.code,{children:"D:\\Workspace\\Github\\knife4j\\knife4j-vue\\vue.config.js"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"proxy: {\n    \"/\": {\n    //target: 'http://localhost:8990/',\n    target: 'http://localhost:31112/system/',\n    /* target: 'http://knife4j.xiaominfo.com/', */\n    ws: true,\n    changeOrigin: true\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\u524d\u7aef\u6e90\u7801\u6539\u9020\u6d4b\u8bd5",children:"2. \u524d\u7aef\u6e90\u7801\u6539\u9020\u6d4b\u8bd5"}),"\n",(0,r.jsxs)(n.h4,{id:"1-\u4fee\u6539\u63a5\u53e3\u8c03\u7528-dworkspacegithubknife4jknife4j-vuesrccoreknife4jasyncjs",children:["1. \u4fee\u6539\u63a5\u53e3\u8c03\u7528 ",(0,r.jsx)(n.code,{children:"D:\\Workspace\\Github\\knife4j\\knife4j-vue\\src\\core\\Knife4jAsync.js"})]}),"\n",(0,r.jsx)(n.p,{children:"\u5c06\u540e\u53f0\u8fd4\u56de\u7684 header \u503c\u8bbe\u7f6e\u5230\u524d\u7aef\u7f13\u5b58\u7684\u5206\u7ec4\u5b9e\u4f8b\u5bf9\u8c61\u4e2d\uff0c\u4ee5\u4fbf\u8c03\u7528\u65f6\u8bfb\u53d6"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"/**\n * \u89e3\u6790springdoc-OpenAPI\n * @param {*} data\n */\nSwaggerBootstrapUi.prototype.analysisSpringDocOpenApiGroupSuccess = function (data) {\n  var that = this;\n  var t = typeof data;\n  var groupData = null;\n  if (t == 'string') {\n    // groupData = JSON.parse(data)\n    groupData = KUtils.json5parse(data);\n  } else {\n    groupData = data;\n  }\n  that.log('\u54cd\u5e94\u5206\u7ec4json\u6570\u636e');\n  that.log(groupData);\n  var serviceOptions = [];\n  var allGroupIds = [];\n  var groupUrls = KUtils.getValue(groupData, 'urls', [], true);\n  var newGroupData = [];\n  if (KUtils.arrNotEmpty(groupUrls)) {\n    groupUrls.forEach(gu => {\n      var newGroup = {\n        name: KUtils.getValue(gu, 'name', 'default', true),\n        url: KUtils.getValue(gu, 'url', '', true),\n        header: KUtils.getValue(gu, 'header', '', true),                  // Add Line\n        location: KUtils.getValue(gu, 'url', '', true),\n        swaggerVersion: '3.0.3',\n        tagSort: KUtils.getValue(groupData, 'tagsSorter', 'order', true),\n        operationSort: KUtils.getValue(groupData, 'operationsSorter', 'order', true),\n        servicePath: KUtils.getValue(gu, 'servicePath', null, true),\n        contextPath: KUtils.getValue(gu, 'contextPath', null, true)\n      };\n      newGroupData.push(newGroup);\n    })\n  } else {\n    // https://gitee.com/xiaoym/knife4j/issues/I5L440#note_12238431\n    // \u5982\u679c\u5f00\u53d1\u8005\u6ca1\u6709\u521b\u5efabean\u5bf9\u8c61\uff0curls\u5bf9\u8c61\u4e3a\u7a7a\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u76f4\u63a5\u8fd4\u56deurl\n    newGroupData.push({\n      name: KUtils.getValue(groupData, 'name', 'default', true),\n      url: KUtils.getValue(groupData, 'url', '', true),\n      location: KUtils.getValue(groupData, 'url', '', true),\n      swaggerVersion: '3.0.3',\n      tagSort: KUtils.getValue(groupData, 'tagsSorter', 'order', true),\n      operationSort: KUtils.getValue(groupData, 'operationsSorter', 'order', true),\n      servicePath: KUtils.getValue(groupData, 'servicePath', null, true),\n      contextPath: KUtils.getValue(groupData, 'contextPath', null, true)\n    })\n  }\n  newGroupData.forEach(function (group) {\n    var g = new SwaggerBootstrapUiInstance(\n      KUtils.toString(group.name, '').replace(/\\//g, '-'),\n      group.location,\n      group.swaggerVersion\n    );\n    console.log(\"groupInfo\", group);                                // Add Line\n    console.log(\"desktop\", that.desktop);                           // Add Line\n    console.log(\"desktopCode\", that.desktopCode);                   // Add Line\n    g.url = group.url.replace(\"/system\", \"\");                       // Add Line\n    g.header = KUtils.getValue(group, 'header', '', true),          // Add Line\n    g.desktop = that.desktop;\n    g.desktopCode = that.desktopCode;\n    //\u6392\u5e8f\u89c4\u52192022.12.6\n    g.tagSort = group.tagSort;\n    g.operationSort = group.operationSort;\n    //\u589e\u52a0basePath\uff0c\u4e3b\u8981\u662f\u7f51\u5173\u805a\u5408\u7684\u573a\u666f\n    g.servicePath = KUtils.getValue(group, 'servicePath', null, true);\n    g.contextPath = KUtils.getValue(group, 'contextPath', null, true);\n    // g.url='/test/json';\n    var newUrl = '';\n    // \u6b64\u5904\u9700\u8981\u5224\u65adbasePath\u8def\u5f84\u7684\u60c5\u51b5\n    if (group.url != null && group.url != undefined && group.url != '') {\n      newUrl = group.url;\n    } else {\n      newUrl = group.location;\n    }\n    g.extUrl = newUrl;\n    if (that.validateExtUrl == '') {\n      that.validateExtUrl = g.extUrl;\n    }\n    // \u5224\u65ad\u5f53\u524d\u5206\u7ec4url\u662f\u5426\u5b58\u5728basePath\n    if (\n      group.basePath != null &&\n      group.basePath != undefined &&\n      group.basePath != ''\n    ) {\n      g.baseUrl = group.basePath;\n    }\n    // \u8d4b\u503c\u67e5\u627e\u7f13\u5b58\u7684id\n    if (that.cacheApis.length > 0) {\n      var cainstance = null;\n      that.cacheApis.forEach(ca => {\n        if (ca.id == g.groupId) {\n          cainstance = ca;\n        }\n      })\n      /*  $.each(that.cacheApis, function (x, ca) {\n         if (ca.id == g.groupId) {\n           cainstance = ca\n         }\n       }) */\n      if (cainstance != null) {\n        g.firstLoad = false;\n        // \u5224\u65ad\u65e7\u7248\u672c\u662f\u5426\u5305\u542bupdatesApi\u5c5e\u6027\n        if (!cainstance.hasOwnProperty('updateApis')) {\n          cainstance['updateApis'] = {};\n        }\n        g.cacheInstance = cainstance;\n        that.log(g);\n        // g.groupApis=cainstance.cacheApis;\n      } else {\n        g.cacheInstance = new SwaggerBootstrapUiCacheApis({\n          id: g.groupId,\n          name: g.name\n        });\n      }\n    } else {\n      g.cacheInstance = new SwaggerBootstrapUiCacheApis({\n        id: g.groupId,\n        name: g.name\n      });\n    }\n    // \u53cc\u5411\u7ed1\u5b9a\n    serviceOptions.push({\n      label: g.name,\n      value: g.id\n    });\n    // \u589e\u52a0\u6240\u6709\u5206\u7ec4id\uff0c\u4e3aafterScript\u7279\u6027\n    allGroupIds.push(g.id);\n    that.instances.push(g);\n  })\n  // \u8d4b\u503c\u5206\u7ec4id\n  if (KUtils.arrNotEmpty(that.instances)) {\n    that.instances.forEach(inst => {\n      inst.allGroupIds = allGroupIds;\n    })\n  }\n  // \u521d\u59cb\u5316\u6240\u6709\n  this.serviceOptions = serviceOptions;\n  this.store.dispatch('globals/setServiceOptions', serviceOptions);\n  // that.$Vue.serviceOptions = serviceOptions;\n  if (serviceOptions.length > 0) {\n    // that.$Vue.defaultServiceOption = serviceOptions[0].value;\n    this.defaultServiceOption = serviceOptions[0].value;\n    this.store.dispatch('globals/setDefaultService', serviceOptions[0].value);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2-dworkspacegithubknife4jknife4j-vuesrcviewsapidebugvue",children:["2. ",(0,r.jsx)(n.code,{children:"D:\\Workspace\\Github\\knife4j\\knife4j-vue\\src\\views\\api\\Debug.vue"})]}),"\n",(0,r.jsx)(n.p,{children:"\u5c06\u5206\u7ec4\u5b9e\u4f8b\u5bf9\u8c61\u4e2d\u7684header\u53c2\u6570\u8bbe\u7f6e\u5230\u8bf7\u6c42\u7684 header \u4e2d\uff0c\u5b9e\u73b0\u63a5\u53e3\u7684\u8c03\u7528"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'    debugSendRawRequest() {\n      // \u53d1\u9001raw\u7c7b\u578b\u7684\u8bf7\u6c42\n      // console("\u53d1\u9001raw\u63a5\u53e3");\n      var validateForm = this.validateRawForm();\n      if (validateForm.validate) {\n        this.debugLoading = true;\n        // \u53d1\u9001\u72b6\u6001\u7f6e\u4e3a\u5df2\u53d1\u9001\u8bf7\u6c42\n        this.debugSend = true;\n        // raw\u7c7b\u578b\u7684\u8bf7\u6c42\u9700\u8981\u5224\u65ad\u662f\u4f55\u79cd\u7c7b\u578b\n        var headers = this.debugHeaders();\n        var url = this.debugUrl;\n        var methodType = this.debugMethodType.toLowerCase();\n        var data = this.rawText;\n        var formParams = this.debugRawFormParams();\n        // \u5f97\u5230key-value\u7684\u53c2\u6570\u503c,\u5bf9\u8bf7\u6c42\u7c7b\u578b\u8fdb\u884c\u5224\u65ad\uff0c\u5224\u65ad\u662f\u5426\u4e3apath\n        if (this.debugPathFlag) {\n          const realFormParams = {};\n          // \u662fpath\u7c7b\u578b\u7684\u63a5\u53e3,\u9700\u8981\u5bf9\u5730\u5740\u3001\u53c2\u6570\u8fdb\u884creplace\u5904\u7406\n          this.debugPathParams.forEach(pathKey => {\n            var replaceRege = "{" + pathKey + "}";\n            // var value = formParams[pathKey];\n            var value = KUtils.getValue(formParams, pathKey, "", true);\n            url = url.replace(replaceRege, value);\n          });\n          for (var key in formParams) {\n            // \u5224\u65adkey\u5728debugPath\u4e2d\u662f\u5426\u5b58\u5728\n            if (this.debugPathParams.indexOf(key) == -1) {\n              // \u4e0d\u5b58\u5728\n              realFormParams[key] = formParams[key];\n            }\n          }\n          // \u91cd\u65b0\u8d4b\u503c\n          formParams = realFormParams;\n        }\n        var checkResult = this.checkUrlParams(url);\n        if (checkResult.result) {\n          url = checkResult.url;\n          formParams = Object.assign(formParams, checkResult.params);\n        }\n        var baseUrl = \'\';\n        // \u662f\u5426\u542f\u7528Host\n        if (this.enableHost) {\n          baseUrl = this.enableHostText;\n        }\n        var requestConfig = {\n          baseURL: baseUrl,\n          url: this.debugCheckUrl(url),\n          method: methodType,\n          headers: headers,\n          params: formParams,\n          data: data,\n          // Cookie\u6807\u5fd7\n          withCredentials: this.debugSendHasCookie(headers),\n          timeout: 0\n        }\n        // \u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u4e0b\u8f7d\u8bf7\u6c42\n        // https://gitee.com/xiaoym/knife4j/issues/I1U4LA\n        // \u5224\u65ad\u5f53\u524d\u63a5\u53e3\u89c4\u8303\u662fOAS3\u8fd8\u662fSwagger2\n        if (this.oas2) {\n          // OAS2\u89c4\u8303\u5236\u5b9a\u4e86produces\u7684\u5b9a\u4e49,\u9700\u8981\u5224\u65ad\u8bf7\u6c42\u5934\n          // \u9700\u8981\u5224\u65ad\u662f\u5426\u662f\u4e0b\u8f7d\u8bf7\u6c42\n          if (this.debugStreamFlag()) {\n            // \u6d41\u8bf7\u6c42\n            requestConfig = { ...requestConfig, responseType: "blob" };\n          }\n        } else {\n          // \u7edf\u4e00\u8ffd\u52a0\u4e00\u4e2ablob\u7c7b\u578b\u7684\u54cd\u5e94,\u5728OpenAPI3.0\u7684\u89c4\u8303\u4e2d,\u6ca1\u6709\u5173\u4e8eproduces\u7684\u8bbe\u5b9a\uff0c\u56e0\u6b64\u65e0\u6cd5\u5224\u65ad\u5f53\u524d\u8bf7\u6c42\u662f\u5426\u662f\u6d41\u7684\u8bf7\u6c42\n          // https://gitee.com/xiaoym/knife4j/issues/I374SP\n          requestConfig = { ...requestConfig, responseType: "blob" };\n        }\n        // console(headers);\n        // console(this.rawText);\n        console.log("headers", headers);                              // Add Line\n        console.log("formParams", formParams);                        // Add Line\n        console.log("requestConfig", requestConfig);                  // Add Line\n        requestConfig.url = requestConfig.url.replace("/system", "")  // Add Line\n        var startTime = new Date();\n        DebugAxios.create()\n          .request(requestConfig)\n          .then(res => {\n            this.debugLoading = false;\n            this.handleDebugSuccess(startTime, new Date(), res);\n          })\n          .catch(err => {\n            this.debugLoading = false;\n            if (err.response) {\n              this.handleDebugError(startTime, new Date(), err.response);\n            } else {\n              this.$message.error(err.message);\n            }\n          });\n      } else {\n        this.$message.info(validateForm.message);\n      }\n    },\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u6539\u4e86\u4e0a\u9762\u7684\u5730\u65b9\u4e4b\u540e\uff0c\u5e94\u8be5\u5c31\u53ef\u4ee5\u6210\u529f\u4ee3\u7406\u4e86"}),"\n",(0,r.jsx)(n.h3,{id:"3-\u540e\u7aef\u9759\u6001\u6587\u4ef6\u6539\u9020\u601d\u8def",children:"3. \u540e\u7aef\u9759\u6001\u6587\u4ef6\u6539\u9020\u601d\u8def"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'# \u641c\u7d22\u4e0b\u9762\u65b9\u6cd5\nanalysisSpringDocOpenApiGroupSuccess\n\n# \u627e\u5230\u5bf9\u5e94\u7684\u6587\u4ef6\napp.5de26223.js   # knife4j-openapi2-ui 4.5.0\napp.c31badf5.js   # knife4j-openapi3-ui 4.5.0\napp.b0c0d7df.js   # knife4j-openapi3-ui 4.4.0\n\n# \u6e90\u7801\u4e2d\u7684\u663e\u773c\u5355\u8bcd\u5b9a\u4f4d \u5982\uff1a that.log(\'\u54cd\u5e94\u5206\u7ec4json\u6570\u636e\'); \u4e2d\u7684 `\u54cd\u5e94\u5206\u7ec4json\u6570\u636e`\n\n# \u5206\u522b\u6dfb\u52a0\u83b7\u53d6\u8bbe\u7f6e header \u7684\u8bed\u53e5\nurl:re.a.getValue(e,"url","",!0)\nurl:re.a.getValue(e,"url","",!0),header:re.a.getValue(e,"header","",!0)\n\nurl:re.a.getValue(t,"url","",!0)\nurl:re.a.getValue(t,"url","",!0),header:re.a.getValue(t,"header","",!0)\n\nt.servicePath=re.a.getValue(e,"servicePath",null,!0)\nt.servicePath=re.a.getValue(e,"servicePath",null,!0),t.header=re.a.getValue(e,"header",null,!0)\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\u95ee\u9898",children:"\u95ee\u9898"}),"\n",(0,r.jsxs)(n.h3,{id:"1-\u63a5\u53e3\u7684\u8c03\u7528\u6700\u597d\u4f7f\u7528-knife4j-gateway-code-\u53bb\u9664\u5f53\u524d\u9879\u76ee\u7684context-path-\u5426\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38",children:["1. \u63a5\u53e3\u7684\u8c03\u7528\u6700\u597d\u4f7f\u7528 ",(0,r.jsx)(n.code,{children:"knife4j-gateway-code"})," \u53bb\u9664\u5f53\u524d\u9879\u76ee\u7684context-path \u5426\u5219\u4f1a\u51fa\u73b0\u5f02\u5e38"]}),"\n",(0,r.jsx)(n.h3,{id:"2-\u89e3\u51b3\u95ee\u9898\u4e00\u5982\u679c\u9879\u76ee\u672c\u8eab\u9700\u8981\u4f7f\u7528\u805a\u5408\u63a5\u53e3\u9700\u8981\u5728\u6240\u6709\u63a5\u53e3\u524d\u518d\u6dfb\u52a0\u4e00\u6b21-context-path",children:"2. \u3010\u89e3\u51b3\u95ee\u9898\u4e00\u3011\u5982\u679c\u9879\u76ee\u672c\u8eab\u9700\u8981\u4f7f\u7528\u805a\u5408\u63a5\u53e3\uff0c\u9700\u8981\u5728\u6240\u6709\u63a5\u53e3\u524d\u518d\u6dfb\u52a0\u4e00\u6b21 context-path"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Bean\npublic OpenAPI openAPI() {\n    // \u6dfb\u52a0 components \u540e\u53ef\u4ee5\u91cd\u590d\u5f15\u7528\n    Components components = new Components()\n            .addParameters(PlatformConstant.HEADER_CLIENT_ID, clientId())\n            .addParameters(PlatformConstant.HEADER_AUTHORIZATION, authorization());\n    return new OpenAPI()\n            .info(\n                    new Info().title(serviceName)\n                            .description(openapiProperties.getDescription())\n                            .version(openapiProperties.getVersion())\n                            .license(new License()\n                                    .name(openapiProperties.getLicenseName())\n                                    .url(openapiProperties.getLicenseUrl()))\n                            .contact(new Contact()\n                                    .name(openapiProperties.getContactName())\n                                    .email(openapiProperties.getContactEmail())\n                                    .url(openapiProperties.getContactUrl()))\n                            .termsOfService(openapiProperties.getTermsOfServiceUrl())\n            )\n            //\u5916\u90e8\u6587\u6863\n            .externalDocs(new ExternalDocumentation()\n                    .description("\u5b98\u65b9\u6587\u6863").url("https://springdoc.org")\n            )\n            // webhooks\n//                .webhooks(new HashMap<>())\n            // \u5168\u5c40\u7edf\u4e00\u5b89\u5168\u8ba4\u8bc1\u914d\u7f6e \u4e00\u4e2akey\u5bf9\u5e94\u4e00\u4e2aschema\uff08\u5b89\u5168\u914d\u7f6e\uff09\uff0c\n            // \u5bf9\u63a5\u53e3\u6dfb\u52a0 @SecurityRequirement \u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u5b89\u5168\u89c4\u5219\n            .schemaRequirement(PlatformConstant.HEADER_AUTHORIZATION, apikeySecuritySchema())\n//                .schemaRequirement(PlatformConstant.HEADER_CLIENT_ID, apikeySecuritySchema())\n//                .schemaRequirement(HttpHeaders.AUTHORIZATION, oauth2SecuritySchema())\n            // \u5168\u5c40\u5b89\u5168\u6821\u9a8c\u9879\uff0c\u4e5f\u53ef\u4ee5\u5728\u5bf9\u5e94\u7684controller\u4e0a\u52a0\u6ce8\u89e3SecurityRequirement\n            .addSecurityItem(new SecurityRequirement().addList(PlatformConstant.HEADER_AUTHORIZATION))\n            // \u7ec4\u4ef6\u5b9a\u4e49\n            .components(components);\n}\n\n/**\n * \u6dfb\u52a0\u5168\u5c40\u7684\u8bf7\u6c42\u5934\u53c2\u6570\uff0c\u5e76\u4e3a\u6240\u6709\u63a5\u53e3\u6dfb\u52a0context-path\n */\n@Bean\npublic OpenApiCustomizer customerGlobalOpenApiCustomizer() {\n    return openApi -> {\n        Paths paths = openApi.getPaths();\n        String[] pathSet = paths.keySet().toArray(new String[0]);\n        for (String path : pathSet) {\n            PathItem pathItem = paths.get(path);\n            // \u6dfb\u52a0\u5168\u5c40\u7684\u8bf7\u6c42\u5934\u53c2\u6570\n            pathItem.readOperations().forEach(operation -> {\n                // \u5f15\u7528\u5728 OpenAPI \u4e2d\u5b9a\u4e49\u7684 components\n                operation.addParametersItem(new HeaderParameter().$ref("#/components/parameters/" + PlatformConstant.HEADER_CLIENT_ID))\n                        .addParametersItem(new HeaderParameter().$ref("#/components/parameters/" + PlatformConstant.HEADER_AUTHORIZATION));\n            });\n            // \u4e3a\u63a5\u53e3\u6dfb\u52a0 context-path\n            paths.put(contextPath + path, pathItem);\n            paths.remove(path);\n        }\n    };\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Note: \u8fd9\u79cd\u65b9\u5f0f\u4f1a\u5bfc\u81f4\u76f4\u63a5\u8c03\u7528\u672c\u5730\u63a5\u53e3\uff08\u975e\u805a\u5408\u65b9\u5f0f\uff09\u62a5\u9519"}),"\n",(0,r.jsx)(n.h3,{id:"3-\u5bf9\u4e8e\u9879\u76ee\u9ed8\u8ba4\u9700\u8981token\u6821\u9a8c\u7684\u53ef\u4ee5\u4f7f\u7528-components-\u5b9e\u73b0\u53c2\u6570\u7684\u590d\u7528",children:"3. \u5bf9\u4e8e\u9879\u76ee\u9ed8\u8ba4\u9700\u8981Token\u6821\u9a8c\u7684\uff0c\u53ef\u4ee5\u4f7f\u7528 components \u5b9e\u73b0\u53c2\u6570\u7684\u590d\u7528"}),"\n",(0,r.jsx)(n.h3,{id:"4-\u4e00\u4e2a\u81ea\u5b9a\u4e49\u52a8\u6001\u6ce8\u518c-requestmapping-\u7684-bug",children:"4. \u4e00\u4e2a\u81ea\u5b9a\u4e49\u52a8\u6001\u6ce8\u518c RequestMapping \u7684 Bug"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.csdn.net/mole_exp/article/details/123992395",children:"Java\u5185\u5b58\u9a6c-SpringMVC\u7bc7"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://blog.csdn.net/maple_son/article/details/122572869",children:"springboot 2.6.x \u81ea\u5b9a\u4e49\u6ce8\u518c RequestMapping"})}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'java.lang.IllegalArgumentException:  Expected lookupPath in request attribute "org.springframework.web.util.UrlPathHelper.PATH".\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"spring:\n  # Spring MVC \u5904\u7406\u6620\u5c04\u5339\u914d\u7684\u9ed8\u8ba4\u7b56\u7565\u5df2\u4eceAntPathMatcher\u66f4\u6539\u4e3aPathPatternParser\u3002\n  # \u6b64\u5904\u914d\u7f6e\u4e3a\u4f7f\u7528AntPathMatcher\u517c\u5bb9 swagger \u76f8\u5173\u7684\u8def\u5f84\u5339\u914d\n  mvc:\n    path-match:\n      matching-strategy: ANT_PATH_MATCHER\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{ah:()=>i});var r=t(67294);const o=r.createContext({});function i(e){const n=r.useContext(o);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
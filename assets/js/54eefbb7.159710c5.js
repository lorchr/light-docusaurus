"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[82511],{28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>s});var r=n(96540);const i={},o=r.createContext(i);function a(t){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),r.createElement(o.Provider,{value:e},t.children)}},31607:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zh-cn/spring-authorization-server/LDAP-Grant-Type","title":"LDAP-Grant-Type","description":"- [\u8ba4\u8bc1 & \u6388\u6743] 1. OAuth2\u6388\u6743","source":"@site/docs/zh-cn/spring-authorization-server/24-LDAP-Grant-Type.md","sourceDirName":"zh-cn/spring-authorization-server","slug":"/zh-cn/spring-authorization-server/LDAP-Grant-Type","permalink":"/docs/zh-cn/spring-authorization-server/LDAP-Grant-Type","draft":false,"unlisted":false,"editUrl":"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/24-LDAP-Grant-Type.md","tags":[],"version":"current","sidebarPosition":24,"frontMatter":{},"sidebar":"troch","previous":{"title":"LDAP-Login","permalink":"/docs/zh-cn/spring-authorization-server/LDAP-Login"},"next":{"title":"SAS-Saml2-Login-Grant","permalink":"/docs/zh-cn/spring-authorization-server/SAS-Saml2-Login-Grant"}}');var i=n(74848),o=n(28453);const a={},s=void 0,u={},c=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001\u5206\u6790",id:"\u4e8c\u5206\u6790",level:2},{value:"\u4e09\u3001\u7f16\u7801",id:"\u4e09\u7f16\u7801",level:2},{value:"1. LdapGrantAuthenticationToken",id:"1-ldapgrantauthenticationtoken",level:3},{value:"2. LdapGrantAuthenticationConverter",id:"2-ldapgrantauthenticationconverter",level:3},{value:"3. AuthenticationProviderAdapter",id:"3-authenticationprovideradapter",level:3},{value:"4. LdapGrantAuthenticationProvider",id:"4-ldapgrantauthenticationprovider",level:3},{value:"5. LdapParameterNames",id:"5-ldapparameternames",level:3},{value:"6. SmsCaptchaGrantAuthenticationProvider",id:"6-smscaptchagrantauthenticationprovider",level:3},{value:"7. AuthorizationConfig",id:"7-authorizationconfig",level:3},{value:"\u56db\u3001\u6d4b\u8bd5",id:"\u56db\u6d4b\u8bd5",level:2},{value:"1. \u83b7\u53d6Token",id:"1-\u83b7\u53d6token",level:3},{value:"2. \u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",id:"2-\u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",level:3},{value:"3. \u9519\u8bef\u9a8c\u8bc1\u7801",id:"3-\u9519\u8bef\u9a8c\u8bc1\u7801",level:3}];function h(t){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://www.cnblogs.com/linianhui/p/oauth2-authorization.html",children:"[\u8ba4\u8bc1 & \u6388\u6743] 1. OAuth2\u6388\u6743 "})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://cloud.tencent.com/developer/article/2134895",children:"\u5728OAuth2\u6388\u6743\u6d41\u7a0b\u4e2d\u5b9e\u73b0\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://segmentfault.com/a/1190000039911540",children:"Spring OAuth2\uff085\uff09 - \u57fa\u4e8eLDAP\u9a8c\u8bc1\u7528\u6237"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u4e00\u524d\u8a00",children:"\u4e00\u3001\u524d\u8a00"}),"\n",(0,i.jsx)(e.h2,{id:"\u4e8c\u5206\u6790",children:"\u4e8c\u3001\u5206\u6790"}),"\n",(0,i.jsx)(e.h2,{id:"\u4e09\u7f16\u7801",children:"\u4e09\u3001\u7f16\u7801"}),"\n",(0,i.jsx)(e.h3,{id:"1-ldapgrantauthenticationtoken",children:"1. LdapGrantAuthenticationToken"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package com.light.sas.authorization.ldap;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.security.authentication.AbstractAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * \u81ea\u5b9a\u4e49LDAP\u767b\u5f55Token\u7c7b\n */\npublic class LdapGrantAuthenticationToken extends AbstractAuthenticationToken {\n\n    /**\n     * \u672c\u6b21\u767b\u5f55\u7533\u8bf7\u7684scope\n     */\n    private final Set<String> scopes;\n\n    /**\n     * \u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\n     */\n    private final Authentication clientPrincipal;\n\n    /**\n     * \u5f53\u524d\u8bf7\u6c42\u7684\u53c2\u6570\n     */\n    private final Map<String, Object> additionalParameters;\n\n    /**\n     * \u8ba4\u8bc1\u65b9\u5f0f\n     */\n    private final AuthorizationGrantType authorizationGrantType;\n\n    public LdapGrantAuthenticationToken(AuthorizationGrantType authorizationGrantType,\n                                        Authentication clientPrincipal,\n                                        @Nullable Set<String> scopes,\n                                        @Nullable Map<String, Object> additionalParameters) {\n        super(Collections.emptyList());\n        this.scopes = Collections.unmodifiableSet(\n                scopes != null ?\n                        new HashSet<>(scopes) :\n                        Collections.emptySet());\n        this.clientPrincipal = clientPrincipal;\n        this.additionalParameters = Collections.unmodifiableMap(\n                additionalParameters != null ?\n                        new HashMap<>(additionalParameters) :\n                        Collections.emptyMap());\n        this.authorizationGrantType = authorizationGrantType;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return clientPrincipal;\n    }\n\n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u7684scope(s)\n     *\n     * @return \u8bf7\u6c42\u7684scope(s)\n     */\n    public Set<String> getScopes() {\n        return this.scopes;\n    }\n\n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u4e2d\u7684authorization grant type\n     *\n     * @return authorization grant type\n     */\n    public AuthorizationGrantType getAuthorizationGrantType() {\n        return this.authorizationGrantType;\n    }\n\n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u4e2d\u7684\u9644\u52a0\u53c2\u6570\n     *\n     * @return \u9644\u52a0\u53c2\u6570\n     */\n    public Map<String, Object> getAdditionalParameters() {\n        return this.additionalParameters;\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(e.h3,{id:"2-ldapgrantauthenticationconverter",children:"2. LdapGrantAuthenticationConverter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.authorization.ldap;\n\nimport com.light.sas.constant.LdapParameterNames;\nimport com.light.sas.utils.SecurityUtils;\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * LDAP\u767b\u5f55Token\u8f6c\u6362\u5668\n */\npublic class LdapGrantAuthenticationConverter implements AuthenticationConverter {\n\n    static final String ACCESS_TOKEN_REQUEST_ERROR_URI = "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2";\n\n    @Override\n    public Authentication convert(HttpServletRequest request) {\n        // grant_type (REQUIRED)\n        String grantType = request.getParameter(OAuth2ParameterNames.GRANT_TYPE);\n        if (!LdapParameterNames.GRANT_TYPE_LDAP.equals(grantType)) {\n            return null;\n        }\n\n        // \u8fd9\u91cc\u76ee\u524d\u662f\u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\n        Authentication clientPrincipal = SecurityContextHolder.getContext().getAuthentication();\n\n        // \u83b7\u53d6\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\n        MultiValueMap<String, String> parameters = SecurityUtils.getFormParameters(request);\n\n        // scope (OPTIONAL)\n        String scope = parameters.getFirst(OAuth2ParameterNames.SCOPE);\n        if (StringUtils.hasText(scope) &&\n                parameters.get(OAuth2ParameterNames.SCOPE).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + OAuth2ParameterNames.SCOPE,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n        Set<String> requestedScopes = null;\n        if (StringUtils.hasText(scope)) {\n            requestedScopes = new HashSet<>(\n                    Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n\n        // Mobile phone number (REQUIRED)\n        String username = parameters.getFirst(OAuth2ParameterNames.USERNAME);\n        if (!StringUtils.hasText(username) || parameters.get(OAuth2ParameterNames.USERNAME).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + OAuth2ParameterNames.USERNAME,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n\n        // SMS verification code (REQUIRED)\n        String password = parameters.getFirst(OAuth2ParameterNames.PASSWORD);\n        if (!StringUtils.hasText(password) || parameters.get(OAuth2ParameterNames.PASSWORD).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + OAuth2ParameterNames.PASSWORD,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n\n        // \u63d0\u53d6\u9644\u52a0\u53c2\u6570\n        Map<String, Object> additionalParameters = new HashMap<>();\n        parameters.forEach((key, value) -> {\n            if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) &&\n                    !key.equals(OAuth2ParameterNames.CLIENT_ID)) {\n                additionalParameters.put(key, value.get(0));\n            }\n        });\n\n        // \u6784\u5efaAbstractAuthenticationToken\u5b50\u7c7b\u5b9e\u4f8b\u5e76\u8fd4\u56de\n        return new LdapGrantAuthenticationToken(new AuthorizationGrantType(LdapParameterNames.GRANT_TYPE_LDAP), clientPrincipal, requestedScopes, additionalParameters);\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"3-authenticationprovideradapter",children:"3. AuthenticationProviderAdapter"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.authorization.baisc.adapter;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\nimport org.springframework.util.Assert;\n\n/**\n * \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n */\n@Slf4j\npublic abstract class AuthenticationProviderAdapter implements AuthenticationProvider {\n\n    protected OAuth2TokenGenerator<?> tokenGenerator;\n\n    protected AuthenticationManager authenticationManager;\n\n    protected OAuth2AuthorizationService authorizationService;\n\n    protected AuthenticationProvider authenticationProvider;\n\n    protected static final String ERROR_URI = "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2";\n\n    protected static final OAuth2TokenType ID_TOKEN_TOKEN_TYPE = new OAuth2TokenType(OidcParameterNames.ID_TOKEN);\n\n    public void setTokenGenerator(OAuth2TokenGenerator<?> tokenGenerator) {\n        Assert.notNull(tokenGenerator, "tokenGenerator cannot be null");\n        this.tokenGenerator = tokenGenerator;\n    }\n\n    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n        Assert.notNull(authorizationService, "authenticationManager cannot be null");\n        this.authenticationManager = authenticationManager;\n    }\n\n    public void setAuthenticationProvider(AuthenticationProvider authenticationProvider) {\n        Assert.notNull(authenticationProvider, "authenticationProvider cannot be null");\n        this.authenticationProvider = authenticationProvider;\n    }\n\n    public void setAuthorizationService(OAuth2AuthorizationService authorizationService) {\n        Assert.notNull(authorizationService, "authorizationService cannot be null");\n        this.authorizationService = authorizationService;\n    }\n}\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"4-ldapgrantauthenticationprovider",children:"4. LdapGrantAuthenticationProvider"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.authorization.ldap;\n\nimport com.light.sas.authorization.baisc.adapter.AuthenticationProviderAdapter;\nimport com.light.sas.utils.SecurityUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.ClaimAccessor;\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.core.OAuth2RefreshToken;\nimport org.springframework.security.oauth2.core.OAuth2Token;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.oidc.OidcIdToken;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.security.oauth2.server.authorization.OAuth2Authorization;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2AccessTokenAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ClientAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.context.AuthorizationServerContextHolder;\nimport org.springframework.security.oauth2.server.authorization.token.DefaultOAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenContext;\nimport org.springframework.util.ObjectUtils;\n\nimport java.security.Principal;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n/**\n * LDAP\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n */\n@Slf4j\npublic class LdapGrantAuthenticationProvider extends AuthenticationProviderAdapter {\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        LdapGrantAuthenticationToken authenticationToken = (LdapGrantAuthenticationToken) authentication;\n\n        // Ensure the client is authenticated\n        OAuth2ClientAuthenticationToken clientPrincipal =\n                SecurityUtils.getAuthenticatedClientElseThrowInvalidClient(authenticationToken);\n        RegisteredClient registeredClient = clientPrincipal.getRegisteredClient();\n        // Ensure the client is configured to use this authorization grant type\n        if (registeredClient == null || !registeredClient.getAuthorizationGrantTypes().contains(authenticationToken.getAuthorizationGrantType())) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.UNAUTHORIZED_CLIENT);\n        }\n\n        // \u9a8c\u8bc1scope\n        Set<String> authorizedScopes = getAuthorizedScopes(registeredClient, authenticationToken.getScopes());\n\n        // \u8fdb\u884c\u8ba4\u8bc1\n        Authentication authenticate = getAuthenticatedUser(authenticationToken);\n\n        // \u4ee5\u4e0b\u5185\u5bb9\u6458\u6284\u81eaOAuth2AuthorizationCodeAuthenticationProvider\n        DefaultOAuth2TokenContext.Builder tokenContextBuilder = DefaultOAuth2TokenContext.builder()\n                .registeredClient(registeredClient)\n                .principal(authenticate)\n                .authorizationServerContext(AuthorizationServerContextHolder.getContext())\n                .authorizedScopes(authorizedScopes)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType())\n                .authorizationGrant(authenticationToken);\n\n        // Initialize the OAuth2Authorization\n        OAuth2Authorization.Builder authorizationBuilder = OAuth2Authorization.withRegisteredClient(registeredClient)\n                // 2023-07-15\u4fee\u6539\u903b\u8f91\uff0c\u52a0\u5165\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\uff0c\u9632\u6b62\u5237\u65b0token\u65f6\u56e0\u83b7\u53d6\u4e0d\u5230\u8ba4\u8bc1\u4fe1\u606f\u800c\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\n                // \u5b58\u5165\u6388\u6743scope\n                .authorizedScopes(authorizedScopes)\n                // \u5f53\u524d\u6388\u6743\u7528\u6237\u540d\u79f0\n                .principalName(authenticate.getName())\n                // \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\n                .attribute(Principal.class.getName(), authenticate)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType());\n\n        // ----- Access token -----\n        OAuth2TokenContext tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.ACCESS_TOKEN).build();\n        OAuth2Token generatedAccessToken = this.tokenGenerator.generate(tokenContext);\n        if (generatedAccessToken == null) {\n            OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                    "The token generator failed to generate the access token.", ERROR_URI);\n            throw new OAuth2AuthenticationException(error);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Generated access token");\n        }\n        OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n                generatedAccessToken.getTokenValue(), generatedAccessToken.getIssuedAt(),\n                generatedAccessToken.getExpiresAt(), tokenContext.getAuthorizedScopes());\n        if (generatedAccessToken instanceof ClaimAccessor) {\n            authorizationBuilder.token(accessToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, ((ClaimAccessor) generatedAccessToken).getClaims()));\n        } else {\n            authorizationBuilder.accessToken(accessToken);\n        }\n        // ----- Refresh token -----\n        OAuth2RefreshToken refreshToken = null;\n        if (registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.REFRESH_TOKEN) &&\n                // Do not issue refresh token to public client\n                !clientPrincipal.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.NONE)) {\n\n            tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.REFRESH_TOKEN).build();\n            OAuth2Token generatedRefreshToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedRefreshToken instanceof OAuth2RefreshToken)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the refresh token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated refresh token");\n            }\n            refreshToken = (OAuth2RefreshToken) generatedRefreshToken;\n            authorizationBuilder.refreshToken(refreshToken);\n        }\n\n        // ----- ID token -----\n        OidcIdToken idToken;\n        if (authorizedScopes.contains(OidcScopes.OPENID)) {\n            tokenContext = tokenContextBuilder\n                    .tokenType(ID_TOKEN_TOKEN_TYPE)\n                    // ID token customizer may need access to the access token and/or refresh token\n                    .authorization(authorizationBuilder.build())\n                    .build();\n            // @formatter:on\n            OAuth2Token generatedIdToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedIdToken instanceof Jwt)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the ID token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated id token");\n            }\n\n            idToken = new OidcIdToken(generatedIdToken.getTokenValue(), generatedIdToken.getIssuedAt(),\n                    generatedIdToken.getExpiresAt(), ((Jwt) generatedIdToken).getClaims());\n            authorizationBuilder.token(idToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, idToken.getClaims()));\n        } else {\n            idToken = null;\n        }\n\n        OAuth2Authorization authorization = authorizationBuilder.build();\n\n        // Save the OAuth2Authorization\n        this.authorizationService.save(authorization);\n\n        Map<String, Object> additionalParameters = new HashMap<>(1);\n        if (idToken != null) {\n            // \u653e\u5165idToken\n            additionalParameters.put(OidcParameterNames.ID_TOKEN, idToken.getTokenValue());\n        }\n\n        return new OAuth2AccessTokenAuthenticationToken(registeredClient, clientPrincipal, accessToken, refreshToken, additionalParameters);\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684scope\n     *\n     * @param registeredClient \u5ba2\u6237\u7aef\n     * @param requestedScopes  \u8bf7\u6c42\u4e2d\u7684scope\n     * @return \u8ba4\u8bc1\u8fc7\u7684scope\n     */\n    private Set<String> getAuthorizedScopes(RegisteredClient registeredClient, Set<String> requestedScopes) {\n        // Default to configured scopes\n        Set<String> authorizedScopes = registeredClient.getScopes();\n        if (!ObjectUtils.isEmpty(requestedScopes)) {\n            Set<String> unauthorizedScopes = requestedScopes.stream()\n                    .filter(requestedScope -> !registeredClient.getScopes().contains(requestedScope))\n                    .collect(Collectors.toSet());\n            if (!ObjectUtils.isEmpty(unauthorizedScopes)) {\n                SecurityUtils.throwError(\n                        OAuth2ErrorCodes.INVALID_REQUEST,\n                        "OAuth 2.0 Parameter: " + OAuth2ParameterNames.SCOPE,\n                        ERROR_URI);\n            }\n\n            authorizedScopes = new LinkedHashSet<>(requestedScopes);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Validated token request parameters");\n        }\n        return authorizedScopes;\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684\u7528\u6237\u4fe1\u606f\n     *\n     * @param authenticationToken converter\u6784\u5efa\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u8fd9\u91cc\u662f\u5305\u542b\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u7684\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    public Authentication getAuthenticatedUser(LdapGrantAuthenticationToken authenticationToken) {\n        // \u83b7\u53d6\u624b\u673a\u53f7\u5bc6\u7801\n        Map<String, Object> additionalParameters = authenticationToken.getAdditionalParameters();\n        String username = (String) additionalParameters.get(OAuth2ParameterNames.USERNAME);\n        String password = (String) additionalParameters.get(OAuth2ParameterNames.PASSWORD);\n        // \u6784\u5efaUsernamePasswordAuthenticationToken\u901a\u8fc7AbstractUserDetailsAuthenticationProvider\u53ca\u5176\u5b50\u7c7b\u5bf9\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u8fdb\u884c\u6821\u9a8c\n        // \u8fd9\u91cc\u5c31\u662f\u6211\u8bf4\u7684\u77ed\u4fe1\u9a8c\u8bc1\u4e0e\u5bc6\u7801\u6a21\u5f0f\u533a\u522b\u4e0d\u5927\uff0c\u5982\u679c\u662f\u77ed\u4fe1\u9a8c\u8bc1\u6a21\u5f0f\u5219\u5728SmsCaptchaLoginAuthenticationProvider\u4e2d\u52a0\u4e00\u4e2a\u6821\u9a8c\uff0c\n        // \u4f7f\u6846\u67b6\u652f\u6301\u624b\u673a\u53f7\u3001\u9a8c\u8bc1\u7801\u6821\u9a8c\uff0c\u53cd\u4e4b\u4e0d\u52a0\u5c31\u662f\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\n        UsernamePasswordAuthenticationToken unauthenticated = UsernamePasswordAuthenticationToken.unauthenticated(username, password);\n        Authentication authenticate = null;\n        try {\n            authenticate = authenticationProvider.authenticate(unauthenticated);\n        } catch (Exception e) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "\u8ba4\u8bc1\u5931\u8d25\uff1a\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef.",\n                    ERROR_URI\n            );\n        }\n        return authenticate;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return LdapGrantAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"5-ldapparameternames",children:"5. LdapParameterNames"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.constant;\n\n/**\n * Ldap\u8ba4\u8bc1\u76f8\u5173\u5e38\u91cf\u53c2\u6570\n */\npublic class LdapParameterNames {\n\n    /**\n     * \u4e09\u65b9\u767b\u5f55\u7c7b\u578b\u2014\u2014Ldap\n     */\n    public static final String THIRD_LOGIN_LDAP = "ldap";\n\n    /**\n     * \u81ea\u5b9a\u4e49 grant type \u2014\u2014 Ldap\n     */\n    public static final String GRANT_TYPE_LDAP = "urn:ietf:params:oauth:grant-type:ldap";\n\n    public static final String CN = "cn";\n    public static final String DN = "dn";\n    public static final String SN = "sn";\n    public static final String GIVEN_NAME = "givenName";\n    public static final String TELEPHONE_NUMBER = "telephoneNumber";\n    public static final String DESCRIPTION = "description";\n    public static final String UID = "uid";\n    public static final String TITLE = "title";\n    public static final String EMPLOYEE_NUMBER = "employeeNumber";\n    public static final String DISPLAY_NAME = "displayName";\n    public static final String DEPARTMENT_NUMBER = "departmentNumber";\n    public static final String MAIL = "mail";\n    public static final String MOBILE = "mobile";\n    public static final String POSTAL_CODE = "postalCode";\n    public static final String POSTAL_ADDRESS = "postalAddress";\n    public static final String HOME_PHONE = "homePhone";\n    public static final String HOME_POSTAL_ADDRESS = "homePostalAddress";\n    public static final String STREET = "street";\n    public static final String ROOM_NUMBER = "roomNumber";\n}\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"6-smscaptchagrantauthenticationprovider",children:"6. SmsCaptchaGrantAuthenticationProvider"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.authorization.sms;\n\nimport com.light.sas.authorization.baisc.adapter.AuthenticationProviderAdapter;\nimport com.light.sas.constant.SecurityConstants;\nimport com.light.sas.utils.SecurityUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.oauth2.core.*;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.oidc.OidcIdToken;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.security.oauth2.server.authorization.OAuth2Authorization;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2AccessTokenAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ClientAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.context.AuthorizationServerContextHolder;\nimport org.springframework.security.oauth2.server.authorization.token.DefaultOAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\nimport java.security.Principal;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n */\n@Slf4j\npublic class SmsCaptchaGrantAuthenticationProvider extends AuthenticationProviderAdapter {\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        SmsCaptchaGrantAuthenticationToken authenticationToken = (SmsCaptchaGrantAuthenticationToken) authentication;\n\n        // Ensure the client is authenticated\n        OAuth2ClientAuthenticationToken clientPrincipal =\n                SecurityUtils.getAuthenticatedClientElseThrowInvalidClient(authenticationToken);\n        RegisteredClient registeredClient = clientPrincipal.getRegisteredClient();\n        // Ensure the client is configured to use this authorization grant type\n        if (registeredClient == null || !registeredClient.getAuthorizationGrantTypes().contains(authenticationToken.getAuthorizationGrantType())) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.UNAUTHORIZED_CLIENT);\n        }\n\n        // \u9a8c\u8bc1scope\n        Set<String> authorizedScopes = getAuthorizedScopes(registeredClient, authenticationToken.getScopes());\n\n        // \u8fdb\u884c\u8ba4\u8bc1\n        Authentication authenticate = getAuthenticatedUser(authenticationToken);\n\n        // \u4ee5\u4e0b\u5185\u5bb9\u6458\u6284\u81eaOAuth2AuthorizationCodeAuthenticationProvider\n        DefaultOAuth2TokenContext.Builder tokenContextBuilder = DefaultOAuth2TokenContext.builder()\n                .registeredClient(registeredClient)\n                .principal(authenticate)\n                .authorizationServerContext(AuthorizationServerContextHolder.getContext())\n                .authorizedScopes(authorizedScopes)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType())\n                .authorizationGrant(authenticationToken);\n\n        // Initialize the OAuth2Authorization\n        OAuth2Authorization.Builder authorizationBuilder = OAuth2Authorization.withRegisteredClient(registeredClient)\n                // 2023-07-15\u4fee\u6539\u903b\u8f91\uff0c\u52a0\u5165\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\uff0c\u9632\u6b62\u5237\u65b0token\u65f6\u56e0\u83b7\u53d6\u4e0d\u5230\u8ba4\u8bc1\u4fe1\u606f\u800c\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\n                // \u5b58\u5165\u6388\u6743scope\n                .authorizedScopes(authorizedScopes)\n                // \u5f53\u524d\u6388\u6743\u7528\u6237\u540d\u79f0\n                .principalName(authenticate.getName())\n                // \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\n                .attribute(Principal.class.getName(), authenticate)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType());\n\n        // ----- Access token -----\n        OAuth2TokenContext tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.ACCESS_TOKEN).build();\n        OAuth2Token generatedAccessToken = this.tokenGenerator.generate(tokenContext);\n        if (generatedAccessToken == null) {\n            OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                    "The token generator failed to generate the access token.", ERROR_URI);\n            throw new OAuth2AuthenticationException(error);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Generated access token");\n        }\n        OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n                generatedAccessToken.getTokenValue(), generatedAccessToken.getIssuedAt(),\n                generatedAccessToken.getExpiresAt(), tokenContext.getAuthorizedScopes());\n        if (generatedAccessToken instanceof ClaimAccessor) {\n            authorizationBuilder.token(accessToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, ((ClaimAccessor) generatedAccessToken).getClaims()));\n        } else {\n            authorizationBuilder.accessToken(accessToken);\n        }\n        // ----- Refresh token -----\n        OAuth2RefreshToken refreshToken = null;\n        if (registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.REFRESH_TOKEN) &&\n                // Do not issue refresh token to public client\n                !clientPrincipal.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.NONE)) {\n\n            tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.REFRESH_TOKEN).build();\n            OAuth2Token generatedRefreshToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedRefreshToken instanceof OAuth2RefreshToken)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the refresh token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated refresh token");\n            }\n            refreshToken = (OAuth2RefreshToken) generatedRefreshToken;\n            authorizationBuilder.refreshToken(refreshToken);\n        }\n\n        // ----- ID token -----\n        OidcIdToken idToken;\n        if (authorizedScopes.contains(OidcScopes.OPENID)) {\n            tokenContext = tokenContextBuilder\n                    .tokenType(ID_TOKEN_TOKEN_TYPE)\n                    // ID token customizer may need access to the access token and/or refresh token\n                    .authorization(authorizationBuilder.build())\n                    .build();\n            // @formatter:on\n            OAuth2Token generatedIdToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedIdToken instanceof Jwt)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the ID token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated id token");\n            }\n\n            idToken = new OidcIdToken(generatedIdToken.getTokenValue(), generatedIdToken.getIssuedAt(),\n                    generatedIdToken.getExpiresAt(), ((Jwt) generatedIdToken).getClaims());\n            authorizationBuilder.token(idToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, idToken.getClaims()));\n        } else {\n            idToken = null;\n        }\n\n        OAuth2Authorization authorization = authorizationBuilder.build();\n\n        // Save the OAuth2Authorization\n        this.authorizationService.save(authorization);\n\n        Map<String, Object> additionalParameters = new HashMap<>(1);\n        if (idToken != null) {\n            // \u653e\u5165idToken\n            additionalParameters.put(OidcParameterNames.ID_TOKEN, idToken.getTokenValue());\n        }\n\n        return new OAuth2AccessTokenAuthenticationToken(registeredClient, clientPrincipal, accessToken, refreshToken, additionalParameters);\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684scope\n     *\n     * @param registeredClient \u5ba2\u6237\u7aef\n     * @param requestedScopes  \u8bf7\u6c42\u4e2d\u7684scope\n     * @return \u8ba4\u8bc1\u8fc7\u7684scope\n     */\n    private Set<String> getAuthorizedScopes(RegisteredClient registeredClient, Set<String> requestedScopes) {\n        // Default to configured scopes\n        Set<String> authorizedScopes = registeredClient.getScopes();\n        if (!ObjectUtils.isEmpty(requestedScopes)) {\n            Set<String> unauthorizedScopes = requestedScopes.stream()\n                    .filter(requestedScope -> !registeredClient.getScopes().contains(requestedScope))\n                    .collect(Collectors.toSet());\n            if (!ObjectUtils.isEmpty(unauthorizedScopes)) {\n                SecurityUtils.throwError(\n                        OAuth2ErrorCodes.INVALID_REQUEST,\n                        "OAuth 2.0 Parameter: " + OAuth2ParameterNames.SCOPE,\n                        ERROR_URI);\n            }\n\n            authorizedScopes = new LinkedHashSet<>(requestedScopes);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Validated token request parameters");\n        }\n        return authorizedScopes;\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684\u7528\u6237\u4fe1\u606f\n     *\n     * @param authenticationToken converter\u6784\u5efa\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u8fd9\u91cc\u662f\u5305\u542b\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u7684\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    public Authentication getAuthenticatedUser(SmsCaptchaGrantAuthenticationToken authenticationToken) {\n        // \u83b7\u53d6\u624b\u673a\u53f7\u5bc6\u7801\n        Map<String, Object> additionalParameters = authenticationToken.getAdditionalParameters();\n        String phone = (String) additionalParameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_PHONE);\n        String smsCaptcha = (String) additionalParameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_SMS_CAPTCHA);\n        // \u6784\u5efaUsernamePasswordAuthenticationToken\u901a\u8fc7AbstractUserDetailsAuthenticationProvider\u53ca\u5176\u5b50\u7c7b\u5bf9\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u8fdb\u884c\u6821\u9a8c\n        // \u8fd9\u91cc\u5c31\u662f\u6211\u8bf4\u7684\u77ed\u4fe1\u9a8c\u8bc1\u4e0e\u5bc6\u7801\u6a21\u5f0f\u533a\u522b\u4e0d\u5927\uff0c\u5982\u679c\u662f\u77ed\u4fe1\u9a8c\u8bc1\u6a21\u5f0f\u5219\u5728SmsCaptchaLoginAuthenticationProvider\u4e2d\u52a0\u4e00\u4e2a\u6821\u9a8c\uff0c\n        // \u4f7f\u6846\u67b6\u652f\u6301\u624b\u673a\u53f7\u3001\u9a8c\u8bc1\u7801\u6821\u9a8c\uff0c\u53cd\u4e4b\u4e0d\u52a0\u5c31\u662f\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\n        UsernamePasswordAuthenticationToken unauthenticated = UsernamePasswordAuthenticationToken.unauthenticated(phone, smsCaptcha);\n        Authentication authenticate = null;\n        try {\n            authenticate = authenticationManager.authenticate(unauthenticated);\n        } catch (Exception e) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "\u8ba4\u8bc1\u5931\u8d25\uff1a\u624b\u673a\u53f7\u6216\u9a8c\u8bc1\u7801\u9519\u8bef.",\n                    ERROR_URI\n            );\n        }\n        return authenticate;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return SmsCaptchaGrantAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(e.h3,{id:"7-authorizationconfig",children:"7. AuthorizationConfig"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.light.sas.config;\n\nimport com.light.sas.authorization.baisc.adapter.AuthenticationProviderAdapter;\nimport com.light.sas.authorization.federation.FederatedIdentityIdTokenCustomizer;\nimport com.light.sas.authorization.ldap.LdapGrantAuthenticationConverter;\nimport com.light.sas.authorization.ldap.LdapGrantAuthenticationProvider;\nimport com.light.sas.authorization.ldap.LdapLoginAuthenticationProvider;\nimport com.light.sas.authorization.sms.SmsCaptchaGrantAuthenticationConverter;\nimport com.light.sas.authorization.sms.SmsCaptchaGrantAuthenticationProvider;\nimport com.light.sas.authorization.sms.SmsCaptchaLoginAuthenticationProvider;\nimport com.light.sas.constant.RedisConstants;\nimport com.light.sas.constant.SecurityConstants;\nimport com.light.sas.properties.CustomSecurityProperties;\nimport com.light.sas.support.RedisOperator;\nimport com.light.sas.utils.SecurityUtils;\nimport com.nimbusds.jose.jwk.JWKSet;\nimport com.nimbusds.jose.jwk.RSAKey;\nimport com.nimbusds.jose.jwk.source.ImmutableJWKSet;\nimport com.nimbusds.jose.jwk.source.JWKSource;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport lombok.RequiredArgsConstructor;\nimport lombok.SneakyThrows;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;\nimport org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;\nimport org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;\nimport org.springframework.security.oauth2.server.authorization.token.JwtEncodingContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenCustomizer;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.web.filter.CorsFilter;\n\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\n/**\n * \u8ba4\u8bc1\u914d\u7f6e\n */\n@Configuration\n@RequiredArgsConstructor\n@EnableConfigurationProperties(value = CustomSecurityProperties.class)\npublic class AuthorizationConfig {\n\n    private final CorsFilter corsFilter;\n\n    private final RedisOperator<String> redisOperator;\n\n    private final CustomSecurityProperties customSecurityProperties;\n\n    /**\n     * \u914d\u7f6e\u7aef\u70b9\u7684\u8fc7\u6ee4\u5668\u94fe\n     *\n     * @param http spring security\u6838\u5fc3\u914d\u7f6e\u7c7b\n     * @return \u8fc7\u6ee4\u5668\u94fe\n     * @throws Exception \u629b\u51fa\n     */\n    @Bean\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\n                                                                      RegisteredClientRepository registeredClientRepository,\n                                                                      AuthorizationServerSettings authorizationServerSettings,\n                                                                      SmsCaptchaLoginAuthenticationProvider smsCaptchaLoginAuthenticationProvider,\n                                                                      LdapLoginAuthenticationProvider ldapLoginAuthenticationProvider) throws Exception {\n        // \u914d\u7f6e\u9ed8\u8ba4\u7684\u8bbe\u7f6e\uff0c\u5ffd\u7565\u8ba4\u8bc1\u7aef\u70b9\u7684csrf\u6821\u9a8c\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\n\n        // \u6dfb\u52a0\u57fa\u7840\u7684\u8ba4\u8bc1\u914d\u7f6e\n        SecurityUtils.applyBasicSecurity(http, corsFilter, customSecurityProperties);\n\n        // \u8bbe\u7f6e\u8bbe\u5907\u7801\u914d\u7f6e\n        SecurityUtils.applyDeviceSecurity(http, customSecurityProperties, registeredClientRepository, authorizationServerSettings);\n\n        // \u81ea\u5b9a\u4e49\u767b\u5f55\u8f6c\u6362\u5668\n        List<AuthenticationConverter> authenticationConverters = accessTokenRequestConverters();\n        // \u81ea\u5b9a\u4e49\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\n        List<AuthenticationProviderAdapter> authenticationProviders = authenticationProviders(smsCaptchaLoginAuthenticationProvider, ldapLoginAuthenticationProvider);\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n                // \u6dfb\u52a0\u81ea\u5b9a\u4e49grant_type\u2014\u2014\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\n                .tokenEndpoint(tokenEndpoint -> tokenEndpoint\n                        .accessTokenRequestConverters(consumer -> consumer.addAll(authenticationConverters))\n                        .authenticationProviders(consumer -> consumer.addAll(authenticationProviders)));\n\n        DefaultSecurityFilterChain build = http.build();\n\n        // \u4ece\u6846\u67b6\u4e2d\u83b7\u53d6provider\u4e2d\u6240\u9700\u7684bean\n        OAuth2TokenGenerator<?> tokenGenerator = http.getSharedObject(OAuth2TokenGenerator.class);\n        // Note: \u6b64\u5904\u83b7\u53d6\u5230\u7684 AuthenticationManager \u4e0d\u662f\u4e0b\u9762 authenticationManager() \u6ce8\u5165\u7684Bean\n        AuthenticationManager authenticationManager = http.getSharedObject(AuthenticationManager.class);\n        OAuth2AuthorizationService authorizationService = http.getSharedObject(OAuth2AuthorizationService.class);\n        // \u4ee5\u4e0a\u4e09\u4e2abean\u5728build()\u65b9\u6cd5\u4e4b\u540e\u8c03\u7528\u662f\u56e0\u4e3a\u8c03\u7528build\u65b9\u6cd5\u65f6\u6846\u67b6\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u8fd9\u4e9b\u7c7b\uff0c\n        // \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u5219\u521d\u59cb\u5316\u4e00\u4e2a\u5b9e\u4f8b\u653e\u5165SharedObject\u4e2d\uff0c\u6240\u4ee5\u8981\u5728build\u65b9\u6cd5\u8c03\u7528\u4e4b\u540e\u83b7\u53d6\n        // \u5728\u901a\u8fc7set\u65b9\u6cd5\u8bbe\u7f6e\u8fdbprovider\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u5728build\u65b9\u6cd5\u4e4b\u540e\u8c03\u7528authenticationProvider(provider)\n        // \u6846\u67b6\u4f1a\u63d0\u793aunsupported_grant_type\uff0c\u56e0\u4e3a\u5df2\u7ecf\u521d\u59cb\u5316\u5b8c\u4e86\uff0c\u5728\u6dfb\u52a0\u5c31\u4e0d\u4f1a\u751f\u6548\u4e86\n        for (AuthenticationProviderAdapter authenticationProvider : authenticationProviders) {\n            authenticationProvider.setTokenGenerator(tokenGenerator);\n            authenticationProvider.setAuthorizationService(authorizationService);\n            authenticationProvider.setAuthenticationManager(authenticationManager);\n        }\n\n        return build;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u8f6c\u6362\u5668\n     * @return \u8ba4\u8bc1\u8f6c\u6362\u5668\u5217\u8868\n     */\n    public List<AuthenticationConverter> accessTokenRequestConverters() {\n        List<AuthenticationConverter> converters = new ArrayList<>();\n        // \u81ea\u5b9a\u4e49\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\u8f6c\u6362\u5668\n        SmsCaptchaGrantAuthenticationConverter smsCaptchaConverter = new SmsCaptchaGrantAuthenticationConverter();\n        // \u81ea\u5b9a\u4e49LDAP\u767b\u5f55\u8f6c\u6362\u5668\n        LdapGrantAuthenticationConverter ldapConverter = new LdapGrantAuthenticationConverter();\n\n        converters.add(smsCaptchaConverter);\n        converters.add(ldapConverter);\n        return converters;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n     * @return \u8ba4\u8bc1\u63d0\u4f9b\u8005\u5217\u8868\n     */\n    public List<AuthenticationProviderAdapter> authenticationProviders(SmsCaptchaLoginAuthenticationProvider smsCaptchaLoginAuthenticationProvider,\n                                                                       LdapLoginAuthenticationProvider ldapLoginAuthenticationProvider) {\n        List<AuthenticationProviderAdapter> providers = new ArrayList<>();\n        // \u81ea\u5b9a\u4e49\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\n        SmsCaptchaGrantAuthenticationProvider smsCaptchaProvider = new SmsCaptchaGrantAuthenticationProvider();\n        smsCaptchaProvider.setAuthenticationProvider(smsCaptchaLoginAuthenticationProvider);\n\n        // \u81ea\u5b9a\u4e49LDAP\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\n        LdapGrantAuthenticationProvider ldapProvider = new LdapGrantAuthenticationProvider();\n        ldapProvider.setAuthenticationProvider(ldapLoginAuthenticationProvider);\n\n        providers.add(smsCaptchaProvider);\n        providers.add(ldapProvider);\n        return providers;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49jwt\uff0c\u5c06\u6743\u9650\u4fe1\u606f\u653e\u81f3jwt\u4e2d\n     *\n     * @return OAuth2TokenCustomizer\u7684\u5b9e\u4f8b\n     */\n    @Bean\n    public OAuth2TokenCustomizer<JwtEncodingContext> oAuth2TokenCustomizer() {\n        return new FederatedIdentityIdTokenCustomizer();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49jwt\u89e3\u6790\u5668\uff0c\u8bbe\u7f6e\u89e3\u6790\u51fa\u6765\u7684\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\u4e0e\u5728jwt\u4e2d\u7684key\n     *\n     * @return jwt\u89e3\u6790\u5668 JwtAuthenticationConverter\n     */\n    @Bean\n    public JwtAuthenticationConverter jwtAuthenticationConverter() {\n        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\n        // \u8bbe\u7f6e\u89e3\u6790\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\uff0c\u8bbe\u7f6e\u4e3a\u7a7a\u662f\u53bb\u6389\u524d\u7f00\n        grantedAuthoritiesConverter.setAuthorityPrefix("");\n        // \u8bbe\u7f6e\u6743\u9650\u4fe1\u606f\u5728jwt claims\u4e2d\u7684key\n        grantedAuthoritiesConverter.setAuthoritiesClaimName(SecurityConstants.AUTHORITIES_KEY);\n\n        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\n        return jwtAuthenticationConverter;\n    }\n\n    /**\n     * \u5c06AuthenticationManager\u6ce8\u5165ioc\u4e2d\uff0c\u5176\u5b83\u9700\u8981\u4f7f\u7528\u5730\u65b9\u53ef\u4ee5\u76f4\u63a5\u4eceioc\u4e2d\u83b7\u53d6\n     *\n     * @param authenticationConfiguration \u5bfc\u51fa\u8ba4\u8bc1\u914d\u7f6e\n     * @return AuthenticationManager \u8ba4\u8bc1\u7ba1\u7406\u5668\n     */\n    @Bean\n    @SneakyThrows\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n    /**\n     * \u914d\u7f6e\u5bc6\u7801\u89e3\u6790\u5668\uff0c\u4f7f\u7528BCrypt\u7684\u65b9\u5f0f\u5bf9\u5bc6\u7801\u8fdb\u884c\u52a0\u5bc6\u548c\u9a8c\u8bc1\n     *\n     * @return BCryptPasswordEncoder\n     */\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * \u914d\u7f6ejwk\u6e90\uff0c\u4f7f\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\uff0c\u516c\u5f00\u7528\u4e8e\u68c0\u7d22\u5339\u914d\u6307\u5b9a\u9009\u62e9\u5668\u7684JWK\u7684\u65b9\u6cd5\n     *\n     * @return JWKSource\n     */\n    @Bean\n    public JWKSource<SecurityContext> jwkSource() throws ParseException {\n        // \u5148\u4eceredis\u83b7\u53d6\n        String jwkSetCache = redisOperator.get(RedisConstants.AUTHORIZATION_JWS_PREFIX_KEY);\n        if (!ObjectUtils.isEmpty(jwkSetCache)) {\n            // \u89e3\u6790\u5b58\u50a8\u7684jws\n            JWKSet jwkSet = JWKSet.parse(jwkSetCache);\n            return new ImmutableJWKSet<>(jwkSet);\n        }\n        KeyPair keyPair = generateRsaKey();\n        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n        RSAKey rsaKey = new RSAKey.Builder(publicKey)\n                .privateKey(privateKey)\n                .keyID(UUID.randomUUID().toString())\n                .build();\n        // \u751f\u6210jws\n        JWKSet jwkSet = new JWKSet(rsaKey);\n        // \u8f6c\u4e3ajson\u5b57\u7b26\u4e32\n        String jwkSetString = jwkSet.toString(Boolean.FALSE);\n        // \u5b58\u5165redis\n        redisOperator.set(RedisConstants.AUTHORIZATION_JWS_PREFIX_KEY, jwkSetString);\n        return new ImmutableJWKSet<>(jwkSet);\n    }\n\n    /**\n     * \u751f\u6210rsa\u5bc6\u94a5\u5bf9\uff0c\u63d0\u4f9b\u7ed9jwk\n     *\n     * @return \u5bc6\u94a5\u5bf9\n     */\n    private static KeyPair generateRsaKey() {\n        KeyPair keyPair;\n        try {\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\n            keyPairGenerator.initialize(2048);\n            keyPair = keyPairGenerator.generateKeyPair();\n        } catch (Exception ex) {\n            throw new IllegalStateException(ex);\n        }\n        return keyPair;\n    }\n\n    /**\n     * \u914d\u7f6ejwt\u89e3\u6790\u5668\n     *\n     * @param jwkSource jwk\u6e90\n     * @return JwtDecoder\n     */\n    @Bean\n    public JwtDecoder jwtDecoder(JWKSource<SecurityContext> jwkSource) {\n        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\n    }\n\n    /**\n     * \u6dfb\u52a0\u8ba4\u8bc1\u670d\u52a1\u5668\u914d\u7f6e\uff0c\u8bbe\u7f6ejwt\u7b7e\u53d1\u8005\u3001\u9ed8\u8ba4\u7aef\u70b9\u8bf7\u6c42\u5730\u5740\u7b49\n     *\n     * @return AuthorizationServerSettings\n     */\n    @Bean\n    public AuthorizationServerSettings authorizationServerSettings() {\n        return AuthorizationServerSettings.builder()\n                /*\n                    \u8bbe\u7f6etoken\u7b7e\u53d1\u5730\u5740(http(s)://{ip}:{port}/context-path, http(s)://domain.com/context-path)\n                    \u5982\u679c\u9700\u8981\u901a\u8fc7ip\u8bbf\u95ee\u8fd9\u91cc\u5c31\u662fip\uff0c\u5982\u679c\u662f\u6709\u57df\u540d\u6620\u5c04\u5c31\u586b\u57df\u540d\uff0c\u901a\u8fc7\u4ec0\u4e48\u65b9\u5f0f\u8bbf\u95ee\u8be5\u670d\u52a1\u8fd9\u91cc\u5c31\u586b\u4ec0\u4e48\n                 */\n                .issuer(customSecurityProperties.getIssuerUrl())\n                .build();\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u56db\u6d4b\u8bd5",children:"\u56db\u3001\u6d4b\u8bd5"}),"\n",(0,i.jsxs)(e.p,{children:["\u7ed9\u5ba2\u6237\u7aef ",(0,i.jsx)(e.code,{children:"messaging-client"})," \u6dfb\u52a0 grant_type ",(0,i.jsx)(e.code,{children:"urn:ietf:params:oauth:grant-type:ldap"})]}),"\n",(0,i.jsx)(e.h3,{id:"1-\u83b7\u53d6token",children:"1. \u83b7\u53d6Token"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"curl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic bWVzc2FnaW5nLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'grant_type=\"urn:ietf:params:oauth:grant-type:ldap\"' \\\n    --form 'username=\"admin\"' \\\n    --form 'password=\"password\"' \\\n    --form 'scope=\"message.write\"'\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "access_token": "eyJraWQiOiI2Mzk5ZGQ3MC00YjNmLTQ2MjEtOTU3YS00ZWRjZDE5N2VjZjEiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6Im1lc3NhZ2luZy1jbGllbnQiLCJuYmYiOjE3MTAyNDEwMDIsInNjb3BlIjpbIm1lc3NhZ2Uud3JpdGUiXSwiaXNzIjoiaHR0cDovLzEyNy4wLjAuMTo4MDgwIiwiZXhwIjoxNzEwMjQ4MjAyLCJpYXQiOjE3MTAyNDEwMDIsImp0aSI6ImE5YzFlZGY4LTI5MzctNGUzNi05MDM1LWFkYTdmYjFkNGM1NCIsImF1dGhvcml0aWVzIjpbIm1lc3NhZ2Uud3JpdGUiXX0.esRSwkil8XQHEOa1x5p2dTJ51bHnyIciSABrd8YCbfoQB8e-6ZSU7HM9YJJPcplx6GRVIdStFrhj8z8uGmgd7MIjnU5fKsxW2WNiRq5uzuloPiogzuG5t5JVfhR5vdIBPZsXBLtgOh2uO6cajGG2ZJQEmAsMqmwyi2CpFEOt0pJAB12G4YpNehVX_1D-UT8oPxheBzU0xZdOkHX7DHulxoizhrB-JyvGz8WjQOHSYk9y9pcB5pJpFY0GU7HWHdq6B4nRchTOeY0YOKs1_ro9-COxa3zRDdGB7Gs_BeoG0oq7_NMaOBoCUO_tsCUKT1a5yT3O_dFosiCXGY4WMBiNSw",\n   "refresh_token": "M16Op1OOfVYyyyAt2uzboxsqXTFr8iPN6_ELoB1LlOTeEqQLxuUrgn2GUvGCuu0_7snrE8rNlh36MrImXKef5XekzRdnxTpanIL4js69JwUmnkJrVmDROXj_uGMRz41K",\n   "scope": "message.write",\n   "token_type": "Bearer",\n   "expires_in": 7199\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"2-\u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",children:"2. \u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"curl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic bWVzc2FnaW5nLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'grant_type=\"urn:ietf:params:oauth:grant-type:ldap\"' \\\n    --form 'username=\"admin\"' \\\n    --form 'password=\"password\"' \\\n    --form 'scope=\"message.delete\"'\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "error_description": "OAuth 2.0 Parameter: scope",\n   "error": "invalid_request",\n   "error_uri": "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2"\n}\n'})}),"\n",(0,i.jsx)(e.h3,{id:"3-\u9519\u8bef\u9a8c\u8bc1\u7801",children:"3. \u9519\u8bef\u9a8c\u8bc1\u7801"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"# \u6ce8\u610f\uff0c\u9700\u8981\u5c06\u4e0a\u4e00\u6b65\u7684data \u548c JSESSIONID \u6dfb\u52a0\u5230\u4e0b\u9762\u7684\u8bf7\u6c42\u4e2d\uff0c\u6d4b\u8bd5\u73af\u5883\u662f\u5c06\u9a8c\u8bc1\u7801\u653e\u5165SESSION\u4e2d\u7684\ncurl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic bWVzc2FnaW5nLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'grant_type=\"urn:ietf:params:oauth:grant-type:ldap\"' \\\n    --form 'username=\"admin\"' \\\n    --form 'password=\"password1\"' \\\n    --form 'scope=\"message.write\"'\n\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n   "error_description": "\u8ba4\u8bc1\u5931\u8d25\uff1a\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef.",\n   "error": "invalid_request",\n   "error_uri": "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2"\n}\n'})})]})}function p(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(h,{...t})}):h(t)}}}]);
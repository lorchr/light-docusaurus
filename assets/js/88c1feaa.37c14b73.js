"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[3047],{3905:(n,t,e)=>{e.d(t,{Zo:()=>c,kt:()=>k});var r=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)e=i[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var p=r.createContext({}),l=function(n){var t=r.useContext(p),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},c=function(n){var t=l(n.components);return r.createElement(p.Provider,{value:t},n.children)},u="mdxType",m={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,i=n.originalType,p=n.parentName,c=s(n,["components","mdxType","originalType","parentName"]),u=l(e),d=a,k=u["".concat(p,".").concat(d)]||u[d]||m[d]||i;return e?r.createElement(k,o(o({ref:t},c),{},{components:e})):r.createElement(k,o({ref:t},c))}));function k(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var i=e.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=n,s[u]="string"==typeof n?n:a,o[1]=s;for(var l=2;l<i;l++)o[l]=e[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},6191:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=e(7462),a=(e(7294),e(3905));const i={},o=void 0,s={unversionedId:"kafka/Kafka-4",id:"kafka/Kafka-4",title:"Kafka-4",description:"- Kafka\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861",source:"@site/middleware/kafka/Kafka-4.md",sourceDirName:"kafka",slug:"/kafka/Kafka-4",permalink:"/light-docusaurus/middleware/kafka/Kafka-4",draft:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/middleware/kafka/Kafka-4.md",tags:[],version:"current",lastUpdatedBy:"Hui Liu",lastUpdatedAt:1696095236,formattedLastUpdatedAt:"2023\u5e749\u670830\u65e5",frontMatter:{}},p={},l=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u6d88\u8d39\u8005\u7fa4\u7ec4",id:"\u6d88\u8d39\u8005\u7fa4\u7ec4",level:2},{value:"\u6d88\u8d39\u6a21\u5f0f",id:"\u6d88\u8d39\u6a21\u5f0f",level:2},{value:"\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f",id:"\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f",level:3},{value:"\u70b9\u5bf9\u70b9\u6a21\u5f0f",id:"\u70b9\u5bf9\u70b9\u6a21\u5f0f",level:3},{value:"\u8d1f\u8f7d\u5747\u8861",id:"\u8d1f\u8f7d\u5747\u8861",level:2},{value:"\u5b9e\u73b0\u9ad8\u6548\u6d88\u606f\u5904\u7406",id:"\u5b9e\u73b0\u9ad8\u6548\u6d88\u606f\u5904\u7406",level:2},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}],c={toc:l},u="wrapper";function m(n){let{components:t,...e}=n;return(0,a.kt)(u,(0,r.Z)({},c,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://mp.weixin.qq.com/s/HRmj-yL9S5h6AyREGkDpGA"},"Kafka\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861"))),(0,a.kt)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,a.kt)("p",null,"\u5728\u5927\u6570\u636e\u65f6\u4ee3\uff0c\u6d88\u606f\u5904\u7406\u6210\u4e3a\u4f17\u591a\u4f01\u4e1a\u5173\u6ce8\u7684\u7126\u70b9\u3002\u800cKafka\u4f5c\u4e3a\u4e00\u79cd\u9ad8\u6027\u80fd\u3001\u5206\u5e03\u5f0f\u7684\u6d88\u606f\u7cfb\u7edf\uff0c\u901a\u8fc7\u5176\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861\u7684\u7279\u6027\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u6d88\u606f\u5904\u7406\u548c\u53ef\u9760\u7684\u6570\u636e\u4f20\u9012\u3002"),(0,a.kt)("h2",{id:"\u6d88\u8d39\u8005\u7fa4\u7ec4"},"\u6d88\u8d39\u8005\u7fa4\u7ec4"),(0,a.kt)("p",null,"Kafka\u7684\u6d88\u8d39\u8005\u7fa4\u7ec4\u662f\u4e00\u79cd\u7075\u6d3b\u800c\u5f3a\u5927\u7684\u673a\u5236\uff0c\u5141\u8bb8\u591a\u4e2a\u6d88\u8d39\u8005\u534f\u540c\u5de5\u4f5c\u4ee5\u5b9e\u73b0\u9ad8\u541e\u5410\u91cf\u7684\u6d88\u606f\u5904\u7406\u3002\u6d88\u8d39\u8005\u7fa4\u7ec4\u901a\u8fc7\u8ba2\u9605\u540c\u4e00\u4e2a\u4e3b\u9898\u7684\u4e0d\u540c\u5206\u533a\uff0c\u5b9e\u73b0\u6d88\u606f\u7684\u5e76\u884c\u5904\u7406\u3002\u5f53\u6709\u65b0\u6d88\u606f\u5230\u8fbe\u65f6\uff0cKafka\u6839\u636e\u4e00\u5b9a\u7684\u7b56\u7565\u5c06\u6d88\u606f\u5747\u5300\u5730\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u7fa4\u7ec4\u6210\u5458\u6d88\u8d39\u3002"),(0,a.kt)("p",null,"\u56fe\u7247\n\u6d88\u8d39\u8005\u7fa4\u7ec4\u7684\u597d\u5904\u4e0d\u4ec5\u4f53\u73b0\u5728\u63d0\u9ad8\u6d88\u606f\u5904\u7406\u7684\u541e\u5410\u91cf\uff0c\u8fd8\u5728\u4e8e\u5b9e\u73b0\u4e86\u8d1f\u8f7d\u5747\u8861\u3002\u6d88\u8d39\u8005\u7fa4\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6d88\u8d39\u8005\u5c06\u88ab\u5206\u914d\u5230\u4e0d\u540c\u7684\u5206\u533a\u4e0a\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6d88\u8d39\u8005\u53ea\u9700\u5904\u7406\u90e8\u5206\u6d88\u606f\uff0c\u5927\u5927\u51cf\u8f7b\u4e86\u5355\u4e2a\u6d88\u8d39\u8005\u7684\u8d1f\u62c5\uff0c\u63d0\u9ad8\u4e86\u6574\u4f53\u7684\u5904\u7406\u6548\u7387\u3002"),(0,a.kt)("h2",{id:"\u6d88\u8d39\u6a21\u5f0f"},"\u6d88\u8d39\u6a21\u5f0f"),(0,a.kt)("h3",{id:"\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f"},"\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f"),(0,a.kt)("p",null,"\u987e\u540d\u601d\u4e49\u5c31\u662f\u751f\u4ea7\u8005\u53d1\u5e03\u6d88\u606f\u4ee5\u540e\uff0c\u6d88\u8d39\u8005\u8ba2\u9605\u5bf9\u5e94\u7684\u4e3b\u9898\u5206\u533a\uff0c\u7136\u540e\u8fdb\u884c\u6d88\u8d39\uff0c\u5b83\u662f\u4e00\u5bf9\u591a\u7684\uff0c\u5c31\u50cf\u672c\u53f7\uff0c\u4e00\u4e2a\u8ba2\u9605\u53f7\u4f1a\u6709\u5f88\u591a\u4eba\u5173\u6ce8\uff0c\u5f53\u6211\u4eec\u53d1\u5e03\u4e00\u7bc7\u6587\u7ae0\uff0c\u5404\u4f4d\u5173\u6ce8\u7684\u5e05\u54e5\u7f8e\u5973\u90fd\u80fd\u6536\u5230\u3002"),(0,a.kt)("p",null,"\u90a3\u4e48kafka\u7684\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f\u600e\u4e48\u5b9e\u73b0\u7684\u5462\uff1f"),(0,a.kt)("p",null,"\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e0d\u540c\u7684\u6d88\u8d39\u7ec4\u5c31\u80fd\u5b9e\u73b0\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f\uff0c\u5728\u4e0a\u9762\u6211\u4eec\u8bf4\u4e86\u4e00\u4e2a\u5206\u533a\u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005\u6d88\u8d39\uff0c\u90a3\u4e48\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u6d88\u8d39\u7ec4\u7684\u6d88\u8d39\u8005\u6d88\u8d39\u540c\u4e00\u4e2a\u5206\u533a\u5c31\u884c\u4e86\uff0c\u8fd9\u5c31\u5b9e\u73b0\u4e86\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f\uff0c\u5047\u5982\u6709\u4e09\u4e2a\u6d88\u8d39\u7ec4a\uff0cb\uff0cc\u7684\u6d88\u8d39\u8005c1\uff0cc2\uff0cc3\u6d88\u8d39\u540c\u4e00\u4e2a\u5206\u533a\uff0c\u5728kafka\u4e2d\u4f7f\u7528groupId\u6765\u8868\u793a\u6d88\u8d39\u7ec4\uff0c\u5982\u679c\u6240\u6709\u7684\u6d88\u8d39\u8005\u7684groupId\u90fd\u8bbe\u7f6e\u4e00\u6837\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u5c5e\u4e8e\u540c\u4e00\u4e2a\u6d88\u8d39\u7ec4\uff0c\u5177\u4f53\u5982\u4e0b\u56fe\uff1a"),(0,a.kt)("p",null,"\u56fe\u7247\n\u53d1\u5e03\u8ba2\u9605\u6a21\u5f0f\u7684\u5e94\u7528\u573a\u666f\u6709\u5f88\u591a\uff0c\u6bd4\u5982\u4e0b\u6e38\u6709\u5f88\u591a\u670d\u52a1\u90fd\u9700\u8981\u4f7f\u7528\u540c\u4e00\u4efd\u6570\u636e\uff0c\u5982\u679c\u901a\u8fc7\u7f16\u7801\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u7684\u8bdd\uff0c\u53ef\u4ee5\u901a\u8fc7RPC\u65b9\u5f0f\u6765\u8c03\u7528\uff0c\u4f46\u662f\u5c31\u4f1a\u9020\u6210\u7cfb\u7edf\u7684\u8026\u5408\uff0c\u4f7f\u7528\u6d88\u606f\u4e2d\u95f4\u4ef6\u7684\u8bdd\uff0c\u4e0a\u6e38\u53ea\u7ba1\u6295\u9012\u6d88\u606f\uff0c\u4e0b\u6e38\u670d\u52a1\u8ba2\u9605\u540e\uff0c\u5c31\u53ef\u4ee5\u6d88\u8d39\u5230\u6d88\u606f\uff0c\u5927\u5927\u964d\u4f4e\u4e86\u8026\u5408\u3002"),(0,a.kt)("h3",{id:"\u70b9\u5bf9\u70b9\u6a21\u5f0f"},"\u70b9\u5bf9\u70b9\u6a21\u5f0f"),(0,a.kt)("p",null,"\u70b9\u5bf9\u70b9\u6a21\u5f0f\u5c31\u662f\u4e00\u5bf9\u4e00\u6a21\u5f0f\uff0c\u5982\u5fae\u4fe1\u3001QQ\u7684\u4e24\u4e2a\u4eba\u804a\u5929\uff0c\u5728kafka\u4e2d\u8981\u4f7f\u7528\u70b9\u5bf9\u70b9\u6a21\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u662f\u8981\u56de\u5230\u4e00\u4e2a\u5206\u533a\u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005\u6d88\u8d39\u8fd9\u4e2a\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u6d88\u8d39\u7ec4\uff0c\u6bcf\u4e2a\u5206\u533a\u7684\u6570\u636e\u53ea\u80fd\u88ab\u8fd9\u4e2a\u6d88\u8d39\u7ec4\u5185\u7684\u6d88\u8d39\u8005\u6d88\u606f\uff0c\u5c31\u5b9e\u73b0\u4e86\u70b9\u5bf9\u70b9\u6a21\u5f0f\u3002\u56fe\u7247"),(0,a.kt)("p",null,"\u70b9\u5bf9\u70b9\u7684\u5e94\u7528\u573a\u666f\u4e5f\u5f88\u591a\uff0c\u56e0\u4e3a\u5b83\u7684\u6570\u636e\u53ea\u80fd\u88ab\u4e00\u4e2a\u6d88\u8d39\u8005\u4f7f\u7528\uff0c\u6bd4\u5982\u53ef\u4ee5\u524a\u5cf0\uff0c\u6bd4\u5982\u4e0a\u6e38\u670d\u52a1\u53d1\u9001\u4e86\u5f88\u591a\u6570\u636e\u8fc7\u6765\uff0c\u5982\u679c\u4e0b\u6e38\u670d\u52a1\u7684\u5c31\u53ea\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u90a3\u4e48\u5c31\u53ef\u80fd\u9020\u6210\u6d88\u606f\u7684\u79ef\u538b\uff0c\u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u591a\u5f00\u51e0\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u4e00\u8d77\u6d88\u8d39\uff0c\u5c31\u52a0\u5feb\u4e86\u6d88\u606f\u7684\u6d88\u8d39\u901f\u5ea6\uff0c\u4e0d\u8fc7\u4e5f\u5f97\u8003\u8651\u4e00\u4e9b\u56e0\u7d20\uff0c\u6bd4\u5982\u6d88\u606f\u7684\u987a\u5e8f\u3002"),(0,a.kt)("h2",{id:"\u8d1f\u8f7d\u5747\u8861"},"\u8d1f\u8f7d\u5747\u8861"),(0,a.kt)("p",null,"\u5728Kafka\u4e2d\uff0c\u8d1f\u8f7d\u5747\u8861\u662f\u6307\u5c06\u6d88\u8d39\u8005\u7fa4\u7ec4\u7684\u8d1f\u8f7d\u5747\u5300\u5730\u5206\u914d\u7ed9\u4e0d\u540c\u7684\u6d88\u8d39\u8005\uff0c\u4ee5\u5b9e\u73b0\u6700\u5927\u5316\u7684\u5229\u7528\u3002Kafka\u901a\u8fc7\u5185\u7f6e\u7684\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u81ea\u52a8\u76d1\u6d4b\u548c\u7ba1\u7406\u6d88\u8d39\u8005\u7684\u72b6\u6001\uff0c\u786e\u4fdd\u6d88\u606f\u80fd\u591f\u88ab\u9ad8\u6548\u5730\u5206\u53d1\u548c\u5904\u7406\u3002"),(0,a.kt)("p",null,"\u4e0b\u9762\u662f\u51e0\u79cd\u5e38\u89c1\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Round-robin\uff08\u8f6e\u8be2\uff09\uff1a\u8fd9\u662f\u6700\u7b80\u5355\u4e5f\u662f\u6700\u5e38\u89c1\u7684\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u3002\u5f53\u6709\u65b0\u7684\u6d88\u8d39\u8005\u52a0\u5165\u6d88\u8d39\u8005\u7fa4\u7ec4\u6216\u8005\u6709\u5206\u533a\u9700\u8981\u91cd\u65b0\u5206\u914d\u65f6\uff0cKafka\u6309\u7167\u8f6e\u8be2\u7684\u65b9\u5f0f\u5c06\u5206\u533a\u4f9d\u6b21\u5206\u914d\u7ed9\u6d88\u8d39\u8005\u5b9e\u4f8b\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u4f9d\u6b21\u63a5\u6536\u5230\u4e00\u4e2a\u5206\u533a\uff0c\u7136\u540e\u5faa\u73af\u5f80\u590d\u3002\u8f6e\u8be2\u7b56\u7565\u9002\u7528\u4e8e\u6d88\u8d39\u8005\u5b9e\u4f8b\u5904\u7406\u80fd\u529b\u76f8\u5f53\u7684\u60c5\u51b5\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import org.apache.kafka.clients.consumer.RangeAssignor;\nimport org.apache.kafka.common.Cluster;\n\npublic class RoundRobinAssignor implements RangeAssignor {\n\n   @Override\n   public Map<String, List<TopicPartition>> assign(Cluster metadata, Map<String, Integer> assignments) {\n       // \u5bf9metadata\u4e2d\u7684\u6240\u6709\u5206\u533a\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n       List<PartitionInfo> sortedPartitions = metadata.partitions()\n           .stream()\n           .sorted(Comparator.comparing(PartitionInfo::toString))\n           .collect(Collectors.toList());\n\n       // \u5c06\u6240\u6709\u6d88\u8d39\u8005\u8282\u70b9\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5e8f\n       List<String> sortedConsumers = assignments.entrySet()\n           .stream()\n           .sorted(Comparator.comparing(Map.Entry::getKey))\n           .map(Map.Entry::getKey)\n           .collect(Collectors.toList());\n\n       // \u5e73\u5747\u5206\u914d\u6240\u6709\u5206\u533a\u7ed9\u6240\u6709\u6d88\u8d39\u8005\n       Map<String, List<TopicPartition>> result = new HashMap<>();\n       for (int i = 0; i < sortedConsumers.size(); i++) {\n           String consumerId = sortedConsumers.get(i);\n           List<TopicPartition> consumerPartitions = new ArrayList<>();\n           for (int j = i; j < sortedPartitions.size(); j += sortedConsumers.size()) {\n               PartitionInfo partitionInfo = sortedPartitions.get(j);\n               TopicPartition partition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n               consumerPartitions.add(partition);\n           }\n           result.put(consumerId, consumerPartitions);\n       }\n\n       return result;\n   }\n\n}\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Range\uff08\u8303\u56f4\uff09\uff1a\u8fd9\u79cd\u7b56\u7565\u4f1a\u5c06\u4e3b\u9898\u5206\u533a\u6839\u636e\u5206\u533aID\u7684\u8303\u56f4\u8fdb\u884c\u5206\u914d\u3002\u6bcf\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u88ab\u5206\u914d\u4e00\u5b9a\u8303\u56f4\u7684\u5206\u533a\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u4e3b\u9898\u670910\u4e2a\u5206\u533a\uff0c\u800c\u6d88\u8d39\u8005\u7fa4\u7ec4\u67094\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u5219\u7b2c\u4e00\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u88ab\u5206\u914d\u5206\u533a0-2\uff0c\u7b2c\u4e8c\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u88ab\u5206\u914d\u5206\u533a3-5\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8303\u56f4\u7b56\u7565\u9002\u7528\u4e8e\u6d88\u8d39\u8005\u5b9e\u4f8b\u7684\u5904\u7406\u80fd\u529b\u4e0d\u540c\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u66f4\u5408\u7406\u5730\u5206\u914d\u8d1f\u8f7d\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"import org.apache.kafka.clients.consumer.RangeAssignor;\nimport org.apache.kafka.common.Cluster;\n\npublic class RangeAssignor implements RangeAssignor {\n\n    @Override\n    public Map<String, List<TopicPartition>> assign(Cluster metadata, Map<String, Integer> assignments) {\n        // \u5bf9metadata\u4e2d\u7684\u6240\u6709\u5206\u533a\u6309\u7167\u5206\u533aID\u8303\u56f4\u6392\u5e8f\n        List<PartitionInfo> sortedPartitions = metadata.partitions()\n            .stream()\n            .sorted(Comparator.comparing(PartitionInfo::partition))\n            .collect(Collectors.toList());\n\n        // \u8ba1\u7b97\u6bcf\u4e2a\u6d88\u8d39\u8005\u8282\u70b9\u5e94\u8be5\u5206\u914d\u54ea\u4e9b\u5206\u533a\n        Map<String, List<TopicPartition>> result = new HashMap<>();\n        int consumerCount = assignments.size();\n        int maxPartitionId = sortedPartitions.get(sortedPartitions.size() - 1).partition();\n        for (Map.Entry<String, Integer> entry : assignments.entrySet()) {\n            String consumerId = entry.getKey();\n            int consumerIndex = entry.getValue();\n\n            List<TopicPartition> consumerPartitions = new ArrayList<>();\n            int startPartition = maxPartitionId;\n            for (int i = 0; i < sortedPartitions.size(); i++) {\n                PartitionInfo partitionInfo = sortedPartitions.get(i);\n                TopicPartition partition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n                if (i % consumerCount == consumerIndex) {\n                    consumerPartitions.add(partition);\n                    startPartition = partitionInfo.partition();\n                } else if (partitionInfo.partition() <= startPartition) {\n                    consumerPartitions.add(partition);\n                }\n            }\n\n            result.put(consumerId, consumerPartitions);\n        }\n\n        return result;\n    }\n\n}\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Capacity-based\uff08\u57fa\u4e8e\u5904\u7406\u80fd\u529b\uff09\uff1a\u8fd9\u79cd\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u6839\u636e\u6d88\u8d39\u8005\u5b9e\u4f8b\u7684\u5904\u7406\u80fd\u529b\u6765\u8fdb\u884c\u5206\u914d\u3002\u5728\u6d88\u8d39\u8005\u5b9e\u4f8b\u52a0\u5165\u6d88\u8d39\u8005\u7fa4\u7ec4\u6216\u8005\u5206\u533a\u9700\u8981\u91cd\u65b0\u5206\u914d\u65f6\uff0cKafka\u4f1a\u6839\u636e\u6bcf\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\u7684\u5904\u7406\u80fd\u529b\uff08\u4f8b\u5982\uff0c\u6bcf\u79d2\u5904\u7406\u6d88\u606f\u7684\u6570\u91cf\uff09\u6765\u52a8\u6001\u8c03\u6574\u5206\u914d\u3002\u8f83\u5f3a\u7684\u6d88\u8d39\u8005\u5b9e\u4f8b\u4f1a\u88ab\u5206\u914d\u66f4\u591a\u7684\u5206\u533a\uff0c\u4ee5\u786e\u4fdd\u6574\u4f53\u4e0a\u7684\u8d1f\u8f7d\u5747\u8861\u3002\u57fa\u4e8e\u5904\u7406\u80fd\u529b\u7684\u7b56\u7565\u9002\u7528\u4e8e\u6d88\u8d39\u8005\u5b9e\u4f8b\u7684\u5904\u7406\u80fd\u529b\u5dee\u5f02\u8f83\u5927\u7684\u60c5\u51b5\u3002")),(0,a.kt)("p",null,"Kafka \u5e76\u6ca1\u6709\u5185\u7f6e\u7684 Capacity-based \u7b56\u7565\uff0c\u4f46\u4f60\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7b56\u7565\u3002Capacity-based \u7b56\u7565\u662f\u6839\u636e\u6bcf\u4e2a\u6d88\u8d39\u8005\u7684\u5904\u7406\u80fd\u529b\u548c\u8d1f\u8f7d\u60c5\u51b5\u6765\u5206\u914d\u5206\u533a\uff0c\u4ee5\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u548c\u6700\u5927\u5316\u5904\u7406\u80fd\u529b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.kafka.clients.consumer.*;\nimport org.apache.kafka.common.TopicPartition;\nimport java.util.*;\n\npublic class CapacityBasedConsumerExample {\n\n    public static void main(String[] args) {\n\n        // \u5047\u8bbe\u67093\u4e2a\u6d88\u8d39\u8005\uff0c\u6bcf\u4e2a\u6d88\u8d39\u8005\u7684\u5904\u7406\u80fd\u529b\u4e3a3\n        int numConsumers = 3;\n        int maxCapacity = 3;\n\n        Properties props = new Properties();\n        props.put("bootstrap.servers", "localhost:9092");\n        props.put("group.id", "my-consumer-group");\n        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");\n        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singleton("my-topic"));\n\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n                for (ConsumerRecord<String, String> record : records) {\n                    // \u6a21\u62df\u6d88\u8d39\u8005\u7684\u5904\u7406\u65f6\u95f4\n                    // \u8fd9\u91cc\u5047\u8bbe\u6d88\u8d39\u8005\u5904\u7406\u4e00\u6761\u6d88\u606f\u9700\u89811\u79d2\n                    Thread.sleep(1000);\n                    System.out.println("Partition: " + record.partition() +\n                            ", Offset: " + record.offset() +\n                            ", Key: " + record.key() +\n                            ", Value: " + record.value());\n                }\n                // \u624b\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\n                consumer.commitSync();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            consumer.close();\n        }\n    }\n}\n')),(0,a.kt)("p",null,"\u5728\u793a\u4f8b\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u67093\u4e2a\u6d88\u8d39\u8005\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6d88\u8d39\u8005\u7684\u5904\u7406\u80fd\u529b\u4e3a3\u4e2a\u6d88\u606f/\u79d2\uff08\u901a\u8fc7\u6a21\u62df\u6d88\u8d39\u8005\u5904\u7406\u65f6\u95f4\u6765\u5b9e\u73b0\uff09\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u7528 poll() \u65b9\u6cd5\u4ece Kafka \u670d\u52a1\u5668\u83b7\u53d6\u6d88\u606f\uff0c\u5e76\u5728\u6d88\u8d39\u6bcf\u6761\u6d88\u606f\u65f6\u8fdb\u884c\u5904\u7406\u64cd\u4f5c\u3002\u5728\u8fd9\u91cc\uff0c\u901a\u8fc7 Thread.sleep(1000) \u6765\u6a21\u62df\u6bcf\u6761\u6d88\u606f\u7684\u5904\u7406\u65f6\u95f4\u3002"),(0,a.kt)("p",null,"\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684\u4f8b\u5b50\u53ea\u662f\u4e00\u4e2a\u6a21\u62df\uff0c\u5b9e\u9645\u7684 Capacity-based \u7b56\u7565\u53ef\u80fd\u66f4\u52a0\u590d\u6742\uff0c\u6d89\u53ca\u66f4\u591a\u56e0\u7d20\uff0c\u5982\u6d88\u8d39\u8005\u7684\u7f51\u7edc\u72b6\u51b5\u3001\u5904\u7406\u80fd\u529b\u7684\u8bc4\u4f30\u548c\u52a8\u6001\u8c03\u6574\u7b49\u3002"),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Sticky\uff08\u7c98\u6027\uff09\uff1a\u7c98\u6027\u8d1f\u8f7d\u5747\u8861\u7b56\u7565\u4f1a\u5c3d\u91cf\u5c06\u540c\u4e00\u5206\u533a\u5206\u914d\u7ed9\u540c\u4e00\u4e2a\u6d88\u8d39\u8005\u5b9e\u4f8b\uff0c\u4ee5\u907f\u514d\u6d88\u606f\u7684\u91cd\u65b0\u5206\u914d\u3002\u5f53\u6d88\u8d39\u8005\u5b9e\u4f8b\u79bb\u7ebf\u6216\u8005\u65b0\u7684\u6d88\u8d39\u8005\u52a0\u5165\u65f6\uff0c\u5206\u533a\u518d\u5e73\u8861\u4f1a\u5c3d\u91cf\u5c06\u539f\u6765\u5206\u914d\u7ed9\u8be5\u6d88\u8d39\u8005\u7684\u5206\u533a\u5206\u914d\u7ed9\u5b83\u3002\u8fd9\u53ef\u4ee5\u786e\u4fdd\u6d88\u8d39\u8005\u5b9e\u4f8b\u5728\u5904\u7406\u5206\u533a\u65f6\u4fdd\u6301\u72b6\u6001\u7684\u8fde\u7eed\u6027\uff0c\u9002\u7528\u4e8e\u4e00\u4e9b\u9700\u8981\u6709\u5e8f\u5904\u7406\u6d88\u606f\u7684\u573a\u666f\u3002Kafka \u6ca1\u6709\u5185\u7f6e\u7684 Sticky \u7b56\u7565\uff0c\u4f46\u4f60\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u5b9e\u73b0\u8fd9\u4e2a\u7b56\u7565\u3002\n\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u5b9e\u73b0 Sticky \u7b56\u7565\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import org.apache.kafka.clients.consumer.*;\nimport org.apache.kafka.common.TopicPartition;\nimport java.util.*;\n\npublic class StickyConsumerExample {\n\n    public static void main(String[] args) {\n\n        // \u5047\u8bbe\u67093\u4e2a\u6d88\u8d39\u8005\u548c6\u4e2a\u5206\u533a\n        int numConsumers = 3;\n        int numPartitions = 6;\n\n        Properties props = new Properties();\n        props.put("bootstrap.servers", "localhost:9092");\n        props.put("group.id", "my-consumer-group");\n        props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");\n        props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singleton("my-topic"));\n\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n                for (ConsumerRecord<String, String> record : records) {\n                    // \u6839\u636e\u5206\u533a\u548c\u6d88\u8d39\u8005\u6570\u91cf\u8ba1\u7b97\u6d88\u8d39\u8005\u7684\u7d22\u5f15\n                    int consumerIndex = Integer.parseInt(record.partition()) % numConsumers;\n                    // \u83b7\u53d6\u6d88\u8d39\u8005\u7684\u5206\u914d\u4fe1\u606f\n                    Set<TopicPartition> partitions = consumer.assignment();\n                    TopicPartition currentPartition = new TopicPartition(record.topic(), record.partition());\n                    // \u5982\u679c\u5206\u533a\u6ca1\u6709\u88ab\u5206\u914d\u7ed9\u6d88\u8d39\u8005\uff0c\u5c06\u5176\u5206\u914d\u7ed9\u5bf9\u5e94\u7684\u6d88\u8d39\u8005\n                    if (!partitions.contains(currentPartition)) {\n                        // \u6682\u505c\u6d88\u8d39\u8005\u7684\u5206\u533a\u5206\u914d\n                        consumer.pause(partitions);\n                        // \u5206\u914d\u7279\u5b9a\u7684\u5206\u533a\u7ed9\u6d88\u8d39\u8005\n                        consumer.assign(Collections.singletonList(currentPartition));\n                        // \u6062\u590d\u6d88\u8d39\u8005\u7684\u5206\u533a\u5206\u914d\n                        consumer.resume(partitions);\n                    }\n                    System.out.println("Consumer: " + consumerIndex +\n                            ", Partition: " + record.partition() +\n                            ", Offset: " + record.offset() +\n                            ", Key: " + record.key() +\n                            ", Value: " + record.value());\n                }\n                // \u624b\u52a8\u63d0\u4ea4\u6d88\u8d39\u4f4d\u79fb\n                consumer.commitSync();\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n')),(0,a.kt)("h2",{id:"\u5b9e\u73b0\u9ad8\u6548\u6d88\u606f\u5904\u7406"},"\u5b9e\u73b0\u9ad8\u6548\u6d88\u606f\u5904\u7406"),(0,a.kt)("p",null,"\u5229\u7528Kafka\u7684\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861\u7279\u6027\uff0c\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u6d88\u606f\u5904\u7406\u3002\u901a\u8fc7\u521b\u5efa\u9002\u5f53\u6570\u91cf\u7684\u6d88\u8d39\u8005\uff0c\u5c06\u5176\u7ec4\u7ec7\u6210\u7fa4\u7ec4\uff0c\u5e76\u8ba2\u9605\u5408\u9002\u7684\u4e3b\u9898\uff0c\u53ef\u4ee5\u5c06\u6d88\u606f\u5904\u7406\u7684\u8d1f\u8f7d\u5206\u6563\u5230\u591a\u4e2a\u6d88\u8d39\u8005\u4e0a\u3002"),(0,a.kt)("p",null,"\u540c\u65f6\uff0c\u6d88\u8d39\u8005\u7fa4\u7ec4\u8fd8\u5177\u5907\u4e00\u5b9a\u7684\u5bb9\u9519\u80fd\u529b\u3002\u5f53\u67d0\u4e2a\u6d88\u8d39\u8005\u53d1\u751f\u6545\u969c\u6216\u4e0d\u53ef\u7528\u65f6\uff0c\u5176\u4ed6\u6d88\u8d39\u8005\u4ecd\u7136\u53ef\u4ee5\u7ee7\u7eed\u5904\u7406\u6d88\u606f\uff0c\u786e\u4fdd\u4e86\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u548c\u8fde\u7eed\u6027\u3002"),(0,a.kt)("p",null,"\u901a\u8fc7\u5408\u7406\u8bbe\u7f6e\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u5229\u7528\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u53ef\u4ee5\u4f18\u5316\u6d88\u606f\u5904\u7406\u7684\u6027\u80fd\u548c\u6548\u7387\u3002\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861\u673a\u5236\u4f7f\u5f97\u4f01\u4e1a\u80fd\u591f\u66f4\u597d\u5730\u5e94\u5bf9\u5e9e\u5927\u4e14\u9ad8\u5e76\u53d1\u7684\u6d88\u606f\u6d41\uff0c\u5e76\u63d0\u4f9b\u53ca\u65f6\u3001\u53ef\u9760\u7684\u6570\u636e\u4f20\u9012\u670d\u52a1\u3002"),(0,a.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,a.kt)("p",null,"Kafka\u7684\u6d88\u8d39\u8005\u7fa4\u7ec4\u548c\u8d1f\u8f7d\u5747\u8861\u673a\u5236\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u6d88\u606f\u5904\u7406\u80fd\u529b\u3002\u901a\u8fc7\u5408\u7406\u7ec4\u7ec7\u6d88\u8d39\u8005\u7fa4\u7ec4\uff0c\u5229\u7528\u8d1f\u8f7d\u5747\u8861\u7b97\u6cd5\uff0c\u53ef\u4ee5\u63d0\u9ad8\u6d88\u606f\u5904\u7406\u7684\u541e\u5410\u91cf\uff0c\u5b9e\u73b0\u9ad8\u6548\u7684\u6570\u636e\u4f20\u9012\u3002\u8fd9\u79cd\u9ad8\u53ef\u6269\u5c55\u6027\u548c\u5bb9\u9519\u80fd\u529b\u4f7f\u5f97Kafka\u6210\u4e3a\u5f53\u4eca\u5927\u6570\u636e\u9886\u57df\u4e2d\u4e0d\u53ef\u6216\u7f3a\u7684\u6d88\u606f\u7cfb\u7edf\u4e4b\u4e00\u3002"))}m.isMDXComponent=!0}}]);
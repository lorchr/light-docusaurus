"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[3587],{51179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=t(74848),i=t(28453);const o={},a=void 0,s={id:"zh-cn/spring-authorization-server/Opaque-Token-Resource-Server",title:"Opaque-Token-Resource-Server",description:"\u4e00\u3001\u524d\u8a00",source:"@site/docs/zh-cn/spring-authorization-server/21-Opaque-Token-Resource-Server.md",sourceDirName:"zh-cn/spring-authorization-server",slug:"/zh-cn/spring-authorization-server/Opaque-Token-Resource-Server",permalink:"/docs/zh-cn/spring-authorization-server/Opaque-Token-Resource-Server",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/21-Opaque-Token-Resource-Server.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{},sidebar:"troch",previous:{title:"SAS-QrCode-Login",permalink:"/docs/zh-cn/spring-authorization-server/SAS-QrCode-Login"},next:{title:"SAS-Wecom-DingTalk-Login",permalink:"/docs/zh-cn/spring-authorization-server/SAS-Wecom-DingTalk-Login"}},c={},u=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001\u5206\u6790",id:"\u4e8c\u5206\u6790",level:2},{value:"\u4e09\u3001\u51c6\u5907",id:"\u4e09\u51c6\u5907",level:2},{value:"\u56db\u3001\u7f16\u7801",id:"\u56db\u7f16\u7801",level:2},{value:"1. Auth Server",id:"1-auth-server",level:3},{value:"1. RedisRegisteredClientRepository",id:"1-redisregisteredclientrepository",level:4},{value:"2. Opaque Resource Server",id:"2-opaque-resource-server",level:3},{value:"1. \u5bfc\u5165\u4f9d\u8d56",id:"1-\u5bfc\u5165\u4f9d\u8d56",level:4},{value:"2. \u914d\u7f6e Resource Server",id:"2-\u914d\u7f6e-resource-server",level:4},{value:"3. \u6dfb\u52a0OpaqueToken\u89e3\u6790\u652f\u6301",id:"3-\u6dfb\u52a0opaquetoken\u89e3\u6790\u652f\u6301",level:4},{value:"4. \u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3",id:"4-\u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3",level:4},{value:"5. \u914d\u7f6e application.yaml",id:"5-\u914d\u7f6e-applicationyaml",level:4},{value:"3. JWT And Opaque Resource Server",id:"3-jwt-and-opaque-resource-server",level:3},{value:"1. \u5bfc\u5165\u4f9d\u8d56",id:"1-\u5bfc\u5165\u4f9d\u8d56-1",level:4},{value:"2. \u914d\u7f6e Resource Server",id:"2-\u914d\u7f6e-resource-server-1",level:4},{value:"3. \u6dfb\u52a0OpaqueToken\u89e3\u6790\u652f\u6301",id:"3-\u6dfb\u52a0opaquetoken\u89e3\u6790\u652f\u6301-1",level:4},{value:"4. \u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3",id:"4-\u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3-1",level:4},{value:"5. \u914d\u7f6e application.yaml",id:"5-\u914d\u7f6e-applicationyaml-1",level:4},{value:"\u4e94\u3001\u6d4b\u8bd5",id:"\u4e94\u6d4b\u8bd5",level:2},{value:"1. \u83b7\u53d6\u6388\u6743\u7801",id:"1-\u83b7\u53d6\u6388\u6743\u7801",level:3},{value:"2. \u83b7\u53d6Opaque Token",id:"2-\u83b7\u53d6opaque-token",level:3},{value:"3. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 (Opaque Resource Server)",id:"3-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-resource-server",level:3},{value:"4. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 Opaque Token (JWT and Opaque Resource Server)",id:"4-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-token-jwt-and-opaque-resource-server",level:3},{value:"5. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (JWT and Opaque Resource Server)",id:"5-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-jwt-and-opaque-resource-server",level:3},{value:"6. \u83b7\u53d6\u6388\u6743\u7801",id:"6-\u83b7\u53d6\u6388\u6743\u7801",level:3},{value:"7. \u83b7\u53d6JWT Token",id:"7-\u83b7\u53d6jwt-token",level:3},{value:"8. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (Opaque Resource Server)",id:"8-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-opaque-resource-server",level:3},{value:"9. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (JWT and Opaque Resource Server)",id:"9-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-jwt-and-opaque-resource-server",level:3},{value:"10. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 Opaque Token (JWT and Opaque Resource Server)",id:"10-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-token-jwt-and-opaque-resource-server",level:3},{value:"\u516d\u3001\u7ed3\u8bba",id:"\u516d\u7ed3\u8bba",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\u4e00\u524d\u8a00",children:"\u4e00\u3001\u524d\u8a00"}),"\n",(0,r.jsx)(n.h2,{id:"\u4e8c\u5206\u6790",children:"\u4e8c\u3001\u5206\u6790"}),"\n",(0,r.jsx)(n.h2,{id:"\u4e09\u51c6\u5907",children:"\u4e09\u3001\u51c6\u5907"}),"\n",(0,r.jsx)(n.h2,{id:"\u56db\u7f16\u7801",children:"\u56db\u3001\u7f16\u7801"}),"\n",(0,r.jsx)(n.h3,{id:"1-auth-server",children:"1. Auth Server"}),"\n",(0,r.jsxs)(n.p,{children:["\u6dfb\u52a0\u4e00\u4e2a\u652f\u6301 ",(0,r.jsx)(n.code,{children:"Opaque Token"})," \u7684\u5ba2\u6237\u7aef"]}),"\n",(0,r.jsx)(n.h4,{id:"1-redisregisteredclientrepository",children:"1. RedisRegisteredClientRepository"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.sas.respository;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.light.sas.entity.security.RedisRegisteredClient;\nimport com.light.sas.service.impl.RedisOAuth2AuthorizationService;\nimport jakarta.annotation.PostConstruct;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.jackson2.SecurityJackson2Modules;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\nimport org.springframework.security.oauth2.server.authorization.jackson2.OAuth2AuthorizationServerJackson2Module;\nimport org.springframework.security.oauth2.server.authorization.settings.ClientSettings;\nimport org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat;\nimport org.springframework.security.oauth2.server.authorization.settings.TokenSettings;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * \u57fa\u4e8eredis\u7684\u5ba2\u6237\u7aefrepository\u5b9e\u73b0\n */\n@Slf4j\n@Repository\n@RequiredArgsConstructor\npublic class RedisRegisteredClientRepository implements RegisteredClientRepository {\n\n    /**\n     * \u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u4f7f\u7528(\u4e0d\u9700\u8981\u53ef\u5220\u9664)\n     */\n    private final PasswordEncoder passwordEncoder;\n\n    private final RedisClientRepository repository;\n\n    private final static ObjectMapper MAPPER = new ObjectMapper();\n\n    static {\n        // \u521d\u59cb\u5316\u5e8f\u5217\u5316\u914d\u7f6e\n        ClassLoader classLoader = RedisOAuth2AuthorizationService.class.getClassLoader();\n        // \u52a0\u8f7dsecurity\u63d0\u4f9b\u7684Modules\n        List<Module> modules = SecurityJackson2Modules.getModules(classLoader);\n        MAPPER.registerModules(modules);\n        // \u52a0\u8f7dAuthorization Server\u63d0\u4f9b\u7684Module\n        MAPPER.registerModule(new OAuth2AuthorizationServerJackson2Module());\n    }\n\n    @Override\n    public void save(RegisteredClient registeredClient) {\n        Assert.notNull(registeredClient, "registeredClient cannot be null");\n        this.repository.findByClientId(registeredClient.getClientId())\n                .ifPresent(existingRegisteredClient -> this.repository.deleteById(existingRegisteredClient.getId()));\n        this.repository.save(toEntity(registeredClient));\n    }\n\n    @Override\n    public RegisteredClient findById(String id) {\n        Assert.hasText(id, "id cannot be empty");\n        return this.repository.findById(id)\n                .map(this::toObject).orElse(null);\n    }\n\n    @Override\n    public RegisteredClient findByClientId(String clientId) {\n        Assert.hasText(clientId, "clientId cannot be empty");\n        return this.repository.findByClientId(clientId)\n                .map(this::toObject).orElse(null);\n    }\n\n    private RegisteredClient toObject(RedisRegisteredClient client) {\n        Set<String> clientAuthenticationMethods = StringUtils.commaDelimitedListToSet(\n                client.getClientAuthenticationMethods());\n        Set<String> authorizationGrantTypes = StringUtils.commaDelimitedListToSet(\n                client.getAuthorizationGrantTypes());\n        Set<String> redirectUris = StringUtils.commaDelimitedListToSet(\n                client.getRedirectUris());\n        Set<String> postLogoutRedirectUris = StringUtils.commaDelimitedListToSet(\n                client.getPostLogoutRedirectUris());\n        Set<String> clientScopes = StringUtils.commaDelimitedListToSet(\n                client.getScopes());\n\n        RegisteredClient.Builder builder = RegisteredClient.withId(client.getId())\n                .clientId(client.getClientId())\n                .clientIdIssuedAt(client.getClientIdIssuedAt())\n                .clientSecret(client.getClientSecret())\n                .clientSecretExpiresAt(client.getClientSecretExpiresAt())\n                .clientName(client.getClientName())\n                .clientAuthenticationMethods(authenticationMethods ->\n                        clientAuthenticationMethods.forEach(authenticationMethod ->\n                                authenticationMethods.add(resolveClientAuthenticationMethod(authenticationMethod))))\n                .authorizationGrantTypes((grantTypes) ->\n                        authorizationGrantTypes.forEach(grantType ->\n                                grantTypes.add(resolveAuthorizationGrantType(grantType))))\n                .redirectUris((uris) -> uris.addAll(redirectUris))\n                .postLogoutRedirectUris((uris) -> uris.addAll(postLogoutRedirectUris))\n                .scopes((scopes) -> scopes.addAll(clientScopes));\n\n        Map<String, Object> clientSettingsMap = parseMap(client.getClientSettings());\n        builder.clientSettings(ClientSettings.withSettings(clientSettingsMap).build());\n\n        Map<String, Object> tokenSettingsMap = parseMap(client.getTokenSettings());\n        builder.tokenSettings(TokenSettings.withSettings(tokenSettingsMap).build());\n\n        return builder.build();\n    }\n\n    private RedisRegisteredClient toEntity(RegisteredClient registeredClient) {\n        List<String> clientAuthenticationMethods = new ArrayList<>(registeredClient.getClientAuthenticationMethods().size());\n        registeredClient.getClientAuthenticationMethods().forEach(clientAuthenticationMethod ->\n                clientAuthenticationMethods.add(clientAuthenticationMethod.getValue()));\n\n        List<String> authorizationGrantTypes = new ArrayList<>(registeredClient.getAuthorizationGrantTypes().size());\n        registeredClient.getAuthorizationGrantTypes().forEach(authorizationGrantType ->\n                authorizationGrantTypes.add(authorizationGrantType.getValue()));\n\n        RedisRegisteredClient entity = new RedisRegisteredClient();\n        entity.setId(registeredClient.getId());\n        entity.setClientId(registeredClient.getClientId());\n        entity.setClientIdIssuedAt(registeredClient.getClientIdIssuedAt());\n        entity.setClientSecret(registeredClient.getClientSecret());\n        entity.setClientSecretExpiresAt(registeredClient.getClientSecretExpiresAt());\n        entity.setClientName(registeredClient.getClientName());\n        entity.setClientAuthenticationMethods(StringUtils.collectionToCommaDelimitedString(clientAuthenticationMethods));\n        entity.setAuthorizationGrantTypes(StringUtils.collectionToCommaDelimitedString(authorizationGrantTypes));\n        entity.setRedirectUris(StringUtils.collectionToCommaDelimitedString(registeredClient.getRedirectUris()));\n        entity.setPostLogoutRedirectUris(StringUtils.collectionToCommaDelimitedString(registeredClient.getPostLogoutRedirectUris()));\n        entity.setScopes(StringUtils.collectionToCommaDelimitedString(registeredClient.getScopes()));\n        entity.setClientSettings(writeMap(registeredClient.getClientSettings().getSettings()));\n        entity.setTokenSettings(writeMap(registeredClient.getTokenSettings().getSettings()));\n\n        return entity;\n    }\n\n    private Map<String, Object> parseMap(String data) {\n        try {\n            return MAPPER.readValue(data, new TypeReference<>() {\n            });\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n    private String writeMap(Map<String, Object> data) {\n        try {\n            return MAPPER.writeValueAsString(data);\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n    private static AuthorizationGrantType resolveAuthorizationGrantType(String authorizationGrantType) {\n        if (AuthorizationGrantType.AUTHORIZATION_CODE.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.AUTHORIZATION_CODE;\n        } else if (AuthorizationGrantType.CLIENT_CREDENTIALS.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.CLIENT_CREDENTIALS;\n        } else if (AuthorizationGrantType.REFRESH_TOKEN.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.REFRESH_TOKEN;\n        }\n        // Custom authorization grant type\n        return new AuthorizationGrantType(authorizationGrantType);\n    }\n\n    private static ClientAuthenticationMethod resolveClientAuthenticationMethod(String clientAuthenticationMethod) {\n        if (ClientAuthenticationMethod.CLIENT_SECRET_BASIC.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.CLIENT_SECRET_BASIC;\n        } else if (ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.CLIENT_SECRET_POST;\n        } else if (ClientAuthenticationMethod.NONE.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.NONE;\n        }\n        // Custom client authentication method\n        return new ClientAuthenticationMethod(clientAuthenticationMethod);\n    }\n\n    /**\n     * \u5bb9\u5668\u542f\u52a8\u540e\u521d\u59cb\u5316\u5ba2\u6237\u7aef\n     * (\u4e0d\u9700\u8981\u53ef\u5220\u9664)\n     */\n    @PostConstruct\n    public void initClients() {\n        log.info("Initialize client information to Redis.");\n        // \u9ed8\u8ba4\u9700\u8981\u6388\u6743\u786e\u8ba4\n        ClientSettings.Builder builder = ClientSettings.builder()\n                .requireAuthorizationConsent(Boolean.TRUE);\n\n        TokenSettings.Builder tokenSettingsBuilder = TokenSettings.builder()\n                // \u81ea\u5305\u542btoken(jwt)\n                .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED)\n                // Access Token \u5b58\u6d3b\u65f6\u95f4\uff1a2\u5c0f\u65f6\n                .accessTokenTimeToLive(Duration.ofHours(2L))\n                // \u6388\u6743\u7801\u5b58\u6d3b\u65f6\u95f4\uff1a5\u5206\u949f\n                .authorizationCodeTimeToLive(Duration.ofMinutes(5L))\n                // \u8bbe\u5907\u7801\u5b58\u6d3b\u65f6\u95f4\uff1a5\u5206\u949f\n                .deviceCodeTimeToLive(Duration.ofMinutes(5L))\n                // Refresh Token \u5b58\u6d3b\u65f6\u95f4\uff1a7\u5929\n                .refreshTokenTimeToLive(Duration.ofDays(7L))\n                // \u5237\u65b0 Access Token \u540e\u662f\u5426\u91cd\u7528 Refresh Token\n                .reuseRefreshTokens(Boolean.TRUE)\n                // \u8bbe\u7f6e Id Token \u52a0\u5bc6\u65b9\u5f0f\n                .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256);\n\n        // \u6b63\u5e38\u6388\u6743\u7801\u5ba2\u6237\u7aef\n        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                // \u5ba2\u6237\u7aefid\n                .clientId("messaging-client")\n                // \u5ba2\u6237\u7aef\u540d\u79f0\n                .clientName("\u6388\u6743\u7801")\n                // \u5ba2\u6237\u7aef\u79d8\u94a5\uff0c\u4f7f\u7528\u5bc6\u7801\u89e3\u6790\u5668\u52a0\u5bc6\n                .clientSecret(passwordEncoder.encode("123456"))\n                // \u5ba2\u6237\u7aef\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u57fa\u4e8e\u8bf7\u6c42\u5934\u7684\u8ba4\u8bc1\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                // \u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u4f7f\u7528\u8be5\u5ba2\u6237\u7aef\u83b7\u53d6\u6388\u6743\u65f6\u652f\u6301\u7684\u65b9\u5f0f\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n                // \u6388\u6743\u7801\u6a21\u5f0f\u56de\u8c03\u5730\u5740\uff0coauth2.1\u5df2\u6539\u4e3a\u7cbe\u51c6\u5339\u914d\uff0c\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u57df\u540d\uff0c\u5e76\u4e14\u5c4f\u853d\u4e86localhost\uff0c\u672c\u673a\u4f7f\u7528127.0.0.1\u8bbf\u95ee\n                .redirectUri("http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc")\n                .redirectUri("http://127.0.0.1:7000/login/oauth2/code/messaging-client-oidc")\n                .redirectUri("http://127.0.0.1:5173/OAuth2Redirect")\n                .redirectUri("https://www.baidu.com")\n                // \u8be5\u5ba2\u6237\u7aef\u7684\u6388\u6743\u8303\u56f4\uff0cOPENID\u4e0ePROFILE\u662fIdToken\u7684scope\uff0c\u83b7\u53d6\u6388\u6743\u65f6\u8bf7\u6c42OPENID\u7684scope\u65f6\u8ba4\u8bc1\u670d\u52a1\u4f1a\u8fd4\u56deIdToken\n                .scope(OidcScopes.OPENID)\n                .scope(OidcScopes.PROFILE)\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // \u5ba2\u6237\u7aef\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u7528\u6237\u9700\u8981\u786e\u8ba4\u6388\u6743\n                .clientSettings(builder.build())\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettingsBuilder.build())\n                .build();\n\n        // \u8bbe\u5907\u7801\u6388\u6743\u5ba2\u6237\u7aef\n        RegisteredClient deviceClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                .clientId("device-message-client")\n                .clientName("\u666e\u901a\u516c\u5171\u5ba2\u6237\u7aef")\n                // \u516c\u5171\u5ba2\u6237\u7aef\n                .clientAuthenticationMethod(ClientAuthenticationMethod.NONE)\n                // \u8bbe\u5907\u7801\u6388\u6743\n                .authorizationGrantType(AuthorizationGrantType.DEVICE_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettingsBuilder.build())\n                .build();\n\n        // PKCE\u5ba2\u6237\u7aef\n        RegisteredClient pkceClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                .clientId("pkce-message-client")\n                .clientName("PKCE\u6d41\u7a0b")\n                // \u516c\u5171\u5ba2\u6237\u7aef\n                .clientAuthenticationMethod(ClientAuthenticationMethod.NONE)\n                // \u8bbe\u5907\u7801\u6388\u6743\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                // \u6388\u6743\u7801\u6a21\u5f0f\u56de\u8c03\u5730\u5740\uff0coauth2.1\u5df2\u6539\u4e3a\u7cbe\u51c6\u5339\u914d\uff0c\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u57df\u540d\uff0c\u5e76\u4e14\u5c4f\u853d\u4e86localhost\uff0c\u672c\u673a\u4f7f\u7528127.0.0.1\u8bbf\u95ee\n                .redirectUri("http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc")\n                .redirectUri("http://127.0.0.1:5173/PkceRedirect")\n                // \u5f00\u542f PKCE \u6d41\u7a0b\n                .clientSettings(builder.requireProofKey(Boolean.TRUE).build())\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettingsBuilder.build())\n                .build();\n\n        // \u6b63\u5e38\u6388\u6743\u7801\u5ba2\u6237\u7aef\n        RegisteredClient opaqueClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                // \u5ba2\u6237\u7aefid\n                .clientId("opaque-client")\n                // \u5ba2\u6237\u7aef\u540d\u79f0\n                .clientName("\u533f\u540dtoken")\n                // \u5ba2\u6237\u7aef\u79d8\u94a5\uff0c\u4f7f\u7528\u5bc6\u7801\u89e3\u6790\u5668\u52a0\u5bc6\n                .clientSecret(passwordEncoder.encode("123456"))\n                // \u5ba2\u6237\u7aef\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u57fa\u4e8e\u8bf7\u6c42\u5934\u7684\u8ba4\u8bc1\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                // \u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u4f7f\u7528\u8be5\u5ba2\u6237\u7aef\u83b7\u53d6\u6388\u6743\u65f6\u652f\u6301\u7684\u65b9\u5f0f\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n                // \u6388\u6743\u7801\u6a21\u5f0f\u56de\u8c03\u5730\u5740\uff0coauth2.1\u5df2\u6539\u4e3a\u7cbe\u51c6\u5339\u914d\uff0c\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u57df\u540d\uff0c\u5e76\u4e14\u5c4f\u853d\u4e86localhost\uff0c\u672c\u673a\u4f7f\u7528127.0.0.1\u8bbf\u95ee\n                .redirectUri("http://127.0.0.1:5173/OAuth2Redirect")\n                .redirectUri("https://www.baidu.com")\n                // \u8be5\u5ba2\u6237\u7aef\u7684\u6388\u6743\u8303\u56f4\uff0cOPENID\u4e0ePROFILE\u662fIdToken\u7684scope\uff0c\u83b7\u53d6\u6388\u6743\u65f6\u8bf7\u6c42OPENID\u7684scope\u65f6\u8ba4\u8bc1\u670d\u52a1\u4f1a\u8fd4\u56deIdToken\n                .scope(OidcScopes.OPENID)\n                .scope(OidcScopes.PROFILE)\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // \u5ba2\u6237\u7aef\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u7528\u6237\u9700\u8981\u786e\u8ba4\u6388\u6743\n                .clientSettings(builder.requireProofKey(Boolean.FALSE).build())\n                // token\u76f8\u5173\u914d\u7f6e, \u8bbe\u7f6etoken\u4e3a\u533f\u540dtoken(opaque token)\n                .tokenSettings(tokenSettingsBuilder.accessTokenFormat(OAuth2TokenFormat.REFERENCE).build())\n                .build();\n\n        // \u521d\u59cb\u5316\u5ba2\u6237\u7aef\n        this.save(registeredClient);\n        this.save(deviceClient);\n        this.save(pkceClient);\n        this.save(opaqueClient);\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-opaque-resource-server",children:"2. Opaque Resource Server"}),"\n",(0,r.jsx)(n.h4,{id:"1-\u5bfc\u5165\u4f9d\u8d56",children:"1. \u5bfc\u5165\u4f9d\u8d56"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>sas-30-opaque-token-resource-server</artifactId>\n    <packaging>jar</packaging>\n\n    <name>30-resource-server-opaque-token</name>\n    <description>OAuth2 Resource Server Opaque Token</description>\n\n    <parent>\n        <groupId>org.light.sas</groupId>\n        <artifactId>sas-sample</artifactId>\n        <version>2024.0.0</version>\n    </parent>\n\n    <properties>\n        <java.version>21</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        \x3c!-- Lombok --\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        \x3c!-- Spring Boot \u6d4b\u8bd5\u4f9d\u8d56 --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"2-\u914d\u7f6e-resource-server",children:"2. \u914d\u7f6e Resource Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package com.light.sas.config;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManagerResolver;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n/**\n * \u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n */\n@RequiredArgsConstructor\n@Configuration(proxyBeanMethods = false)\n@EnableWebSecurity\n@EnableMethodSecurity(jsr250Enabled = true, securedEnabled = true)\npublic class ResourceServerConfig {\n\n    private final AuthenticationManagerResolver<HttpServletRequest> tokenAuthenticationManagerResolver;\n\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().authenticated()\n                )\n                .oauth2ResourceServer(oauth2 -> oauth2\n                        // \u5728\u8d44\u6e90\u670d\u52a1\u5668\u4e2d\u914d\u7f6e\u521a\u624d\u6ce8\u5165\u7684 AuthenticationManagerResolver\n                        .authenticationManagerResolver(this.tokenAuthenticationManagerResolver)\n                );\n        return http.build();\n    }\n\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-\u6dfb\u52a0opaquetoken\u89e3\u6790\u652f\u6301",children:"3. \u6dfb\u52a0OpaqueToken\u89e3\u6790\u652f\u6301"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.sas.config;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationManagerResolver;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal;\nimport org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimNames;\nimport org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthentication;\nimport org.springframework.security.oauth2.server.resource.authentication.OpaqueTokenAuthenticationProvider;\nimport org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector;\n\nimport java.time.Instant;\nimport java.util.Collection;\n\n/**\n * \u533f\u540dToken\u6743\u9650\u4fe1\u606f\u81ea\u5b9a\u4e49\u5904\u7406\n */\n@Configuration(proxyBeanMethods = false)\npublic class OpaqueTokenSupportConfig {\n\n\n    /**\n     * \u6839\u636e\u4ee4\u724c\u81ea\u7701\u751f\u6210{@link AuthenticationManagerResolver }\uff0c\u5728AuthenticationManagerResolver\u4e2d\u6839\u636e\u5f53\u524d\u8bf7\u6c42\u4f7f\u7528token\u81ea\u7701\u7aef\u70b9\u83b7\u53d6\u5f53\u524dtoken\u4fe1\u606f\n     *\n     * @param opaqueTokenIntrospector token\u81ea\u7701\n     * @return \u8fd4\u56de {@link AuthenticationManagerResolver }\n     */\n    @Bean\n    public AuthenticationManagerResolver<HttpServletRequest> tokenAuthenticationManagerResolver(\n           OpaqueTokenIntrospector opaqueTokenIntrospector) {\n        // \u8bbe\u7f6e Opaque Token\u89e3\u6790\u8f6c\u6362\u5668\uff0c\u53bb\u6389Token\u7684\u524d\u7f00\n        OpaqueTokenAuthenticationProvider opaqueTokenAuthenticationProvider = new OpaqueTokenAuthenticationProvider(opaqueTokenIntrospector);\n        opaqueTokenAuthenticationProvider.setAuthenticationConverter(opaqueTokenAuthenticationConverter());\n\n        // \u8bbe\u7f6ejwt\u548cOpaqueToken\u7684AuthenticationManager\n        AuthenticationManager opaqueToken = new ProviderManager(opaqueTokenAuthenticationProvider);\n        return (request) -> opaqueToken;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49opaqueToken\u89e3\u6790\u5668\uff0c\u8bbe\u7f6e\u89e3\u6790\u51fa\u6765\u7684\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\n     *\n     * @see OpaqueTokenAuthenticationProvider#convert(String, OAuth2AuthenticatedPrincipal)\n     * @return opaqueToken\u89e3\u6790\u5668 OpaqueTokenAuthenticationConverter\n     */\n    public OpaqueTokenAuthenticationConverter opaqueTokenAuthenticationConverter() {\n        return new OpaqueTokenAuthenticationConverter() {\n            @Override\n            public Authentication convert(String introspectedToken, OAuth2AuthenticatedPrincipal authenticatedPrincipal) {\n                Instant iat = authenticatedPrincipal.getAttribute(OAuth2TokenIntrospectionClaimNames.IAT);\n                Instant exp = authenticatedPrincipal.getAttribute(OAuth2TokenIntrospectionClaimNames.EXP);\n                OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, introspectedToken,\n                        iat, exp);\n\n                // \u8bbe\u7f6e\u89e3\u6790\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\uff0c\u8bbe\u7f6e\u4e3a\u7a7a\u662f\u53bb\u6389\u524d\u7f00\n                Collection<? extends GrantedAuthority> authorities = authenticatedPrincipal.getAuthorities()\n                        .stream().map(authority -> {\n                            String authorityCode = authority.getAuthority();\n                            if (authorityCode.startsWith("SCOPE_")) {\n                                authorityCode = authorityCode.replace("SCOPE_", "");\n                            }\n                            return new SimpleGrantedAuthority(authorityCode);\n                        }).toList();\n                return new BearerTokenAuthentication(authenticatedPrincipal, accessToken, authorities);\n            }\n        };\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"4-\u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3",children:"4. \u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.sas.controller;\n\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * \u6d4b\u8bd5\u63a5\u53e3\n */\n@RestController\npublic class TestController {\n\n    @GetMapping("/test01")\n    @PreAuthorize("hasAuthority(\'message.read\')")\n    public String test01() {\n        return "test01";\n    }\n\n    @GetMapping("/test02")\n    @PreAuthorize("hasAuthority(\'test02\')")\n    public String test02() {\n        return "test02";\n    }\n\n    @GetMapping("/app")\n    @PreAuthorize("hasAuthority(\'app\')")\n    public String app() {\n        return "app";\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"5-\u914d\u7f6e-applicationyaml",children:"5. \u914d\u7f6e application.yaml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"server:\n  port: 8100\n\nspring:\n  application:\n    name: opaque-token-resource-server\n  security:\n    oauth2:\n      resourceserver:\n        opaquetoken:\n          # \u533f\u540dtoken\u81ea\u7701\u7aef\u70b9\n          introspection-uri: http://127.0.0.1:8080/oauth2/introspect\n          # \u5ba2\u6237\u7aefid\n          client-id: opaque-client\n          # \u5ba2\u6237\u7aef\u79d8\u94a5\n          client-secret: 123456\n\nlogging:\n  level:\n    org.springframework.security: debug\n    com.light.sas: debug\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-jwt-and-opaque-resource-server",children:"3. JWT And Opaque Resource Server"}),"\n",(0,r.jsx)(n.h4,{id:"1-\u5bfc\u5165\u4f9d\u8d56-1",children:"1. \u5bfc\u5165\u4f9d\u8d56"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>sas-31-jwt-opaque-token-resource-server</artifactId>\n    <packaging>jar</packaging>\n\n    <name>31-resource-server-jwt-opaque-token</name>\n    <description>OAuth2 Resource Server Jwt Opaque Token</description>\n\n    <parent>\n        <groupId>org.light.sas</groupId>\n        <artifactId>sas-sample</artifactId>\n        <version>2024.0.0</version>\n    </parent>\n\n    <properties>\n        <java.version>21</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        \x3c!-- Lombok --\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n\n        \x3c!-- Spring Boot \u6d4b\u8bd5\u4f9d\u8d56 --\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"2-\u914d\u7f6e-resource-server-1",children:"2. \u914d\u7f6e Resource Server"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package com.light.sas.config;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManagerResolver;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\n\n/**\n * \u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n */\n@RequiredArgsConstructor\n@Configuration(proxyBeanMethods = false)\n@EnableWebSecurity\n@EnableMethodSecurity(jsr250Enabled = true, securedEnabled = true)\npublic class ResourceServerConfig {\n\n    private final AuthenticationManagerResolver<HttpServletRequest> tokenAuthenticationManagerResolver;\n\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests(authorize -> authorize\n                        .anyRequest().authenticated()\n                )\n                .oauth2ResourceServer(oauth2 -> oauth2\n                        // \u5728\u8d44\u6e90\u670d\u52a1\u5668\u4e2d\u914d\u7f6e\u521a\u624d\u6ce8\u5165\u7684 AuthenticationManagerResolver\n                        .authenticationManagerResolver(this.tokenAuthenticationManagerResolver)\n                );\n        return http.build();\n    }\n\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"3-\u6dfb\u52a0opaquetoken\u89e3\u6790\u652f\u6301-1",children:"3. \u6dfb\u52a0OpaqueToken\u89e3\u6790\u652f\u6301"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.sas.config;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationManagerResolver;\nimport org.springframework.security.authentication.ProviderManager;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal;\nimport org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimNames;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthentication;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationProvider;\nimport org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;\nimport org.springframework.security.oauth2.server.resource.authentication.OpaqueTokenAuthenticationProvider;\nimport org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenAuthenticationConverter;\nimport org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector;\nimport org.springframework.util.StringUtils;\n\nimport java.time.Instant;\nimport java.util.Collection;\n\n/**\n * \u540c\u65f6\u652f\u6301\u533f\u540dtoken\u4e0ejwt token\u914d\u7f6e\n */\n@Configuration(proxyBeanMethods = false)\npublic class JwtAndOpaqueTokenSupportConfig {\n\n\n    /**\n     * \u6839\u636ejwtDecoder\u548c\u4ee4\u724c\u81ea\u7701\u751f\u6210{@link AuthenticationManagerResolver }\uff0c\u5728AuthenticationManagerResolver\u4e2d\u6839\u636e\u5f53\u524d\u8bf7\u6c42\u51b3\u5b9a\u4f7f\u7528jwt\u89e3\u6790\u5668\u8fd8\u662f\u53bbtoken\u81ea\u7701\u7aef\u70b9\u83b7\u53d6\u5f53\u524dtoken\u4fe1\u606f\n     *\n     * @param jwtDecoder              jwt\u89e3\u6790\u5668\n     * @param opaqueTokenIntrospector token\u81ea\u7701\n     * @return \u8fd4\u56de {@link AuthenticationManagerResolver }\n     */\n    @Bean\n    public AuthenticationManagerResolver<HttpServletRequest> tokenAuthenticationManagerResolver(\n            JwtDecoder jwtDecoder, OpaqueTokenIntrospector opaqueTokenIntrospector) {\n        // \u8bbe\u7f6e JWT Token\u89e3\u6790\u8f6c\u6362\u5668\uff0c\u53bb\u6389Token\u7684\u524d\u7f00\n        JwtAuthenticationProvider jwtAuthenticationProvider = new JwtAuthenticationProvider(jwtDecoder);\n        jwtAuthenticationProvider.setJwtAuthenticationConverter(jwtAuthenticationConverter());\n\n        // \u8bbe\u7f6e Opaque Token\u89e3\u6790\u8f6c\u6362\u5668\uff0c\u53bb\u6389Token\u7684\u524d\u7f00\n        OpaqueTokenAuthenticationProvider opaqueTokenAuthenticationProvider = new OpaqueTokenAuthenticationProvider(opaqueTokenIntrospector);\n        opaqueTokenAuthenticationProvider.setAuthenticationConverter(opaqueTokenAuthenticationConverter());\n\n        // \u8bbe\u7f6ejwt\u548cOpaqueToken\u7684AuthenticationManager\n        AuthenticationManager jwt = new ProviderManager(jwtAuthenticationProvider);\n        AuthenticationManager opaqueToken = new ProviderManager(opaqueTokenAuthenticationProvider);\n        return (request) -> useJwt(request) ? jwt : opaqueToken;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49jwt\u89e3\u6790\u5668\uff0c\u8bbe\u7f6e\u89e3\u6790\u51fa\u6765\u7684\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\u4e0e\u5728jwt\u4e2d\u7684key\n     *\n     * @return jwt\u89e3\u6790\u5668 JwtAuthenticationConverter\n     */\n    public JwtAuthenticationConverter jwtAuthenticationConverter() {\n        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = new JwtGrantedAuthoritiesConverter();\n        // \u8bbe\u7f6e\u89e3\u6790\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\uff0c\u8bbe\u7f6e\u4e3a\u7a7a\u662f\u53bb\u6389\u524d\u7f00\n        grantedAuthoritiesConverter.setAuthorityPrefix("");\n        // \u8bbe\u7f6e\u6743\u9650\u4fe1\u606f\u5728jwt claims\u4e2d\u7684key\n        grantedAuthoritiesConverter.setAuthoritiesClaimName("authorities");\n\n        JwtAuthenticationConverter jwtAuthenticationConverter = new JwtAuthenticationConverter();\n        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\n        return jwtAuthenticationConverter;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49opaqueToken\u89e3\u6790\u5668\uff0c\u8bbe\u7f6e\u89e3\u6790\u51fa\u6765\u7684\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\n     *\n     * @see OpaqueTokenAuthenticationProvider#convert(String, OAuth2AuthenticatedPrincipal)\n     * @return opaqueToken\u89e3\u6790\u5668 OpaqueTokenAuthenticationConverter\n     */\n    public OpaqueTokenAuthenticationConverter opaqueTokenAuthenticationConverter() {\n        return new OpaqueTokenAuthenticationConverter() {\n            @Override\n            public Authentication convert(String introspectedToken, OAuth2AuthenticatedPrincipal authenticatedPrincipal) {\n                Instant iat = authenticatedPrincipal.getAttribute(OAuth2TokenIntrospectionClaimNames.IAT);\n                Instant exp = authenticatedPrincipal.getAttribute(OAuth2TokenIntrospectionClaimNames.EXP);\n                OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, introspectedToken,\n                        iat, exp);\n\n                // \u8bbe\u7f6e\u89e3\u6790\u6743\u9650\u4fe1\u606f\u7684\u524d\u7f00\uff0c\u8bbe\u7f6e\u4e3a\u7a7a\u662f\u53bb\u6389\u524d\u7f00\n                Collection<? extends GrantedAuthority> authorities = authenticatedPrincipal.getAuthorities()\n                        .stream().map(authority -> {\n                            String authorityCode = authority.getAuthority();\n                            if (authorityCode.startsWith("SCOPE_")) {\n                                authorityCode = authorityCode.replace("SCOPE_", "");\n                            }\n                            return new SimpleGrantedAuthority(authorityCode);\n                        }).toList();\n                return new BearerTokenAuthentication(authenticatedPrincipal, accessToken, authorities);\n            }\n        };\n    }\n\n    /**\n     * \u5224\u65ad\u8bf7\u6c42\u5934\u662f\u5426\u6709key \uff1a token-type\uff0c\u6709\u503c\u4e0d\u662fjwt\n     * \u8fd9\u91cc\u6839\u636e\u81ea\u5df1\u4e1a\u52a1\u5b9e\u73b0\uff0c\u53ef\u4ee5\u83b7\u53d6token\u540e\u518d\u5224\u65adtoken\u662fjwt\u8fd8\u662f\u533f\u540dtoken\n     *\n     * @param request \u8bf7\u6c42\u5bf9\u8c61\n     * @return \u662f\u5426\u4f7f\u7528jwt token\n     */\n    private boolean useJwt(HttpServletRequest request) {\n        String tokenType = request.getHeader("token-type");\n        return !StringUtils.hasText(tokenType) || "jwt".equalsIgnoreCase(tokenType.toLowerCase());\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"4-\u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3-1",children:"4. \u6dfb\u52a0\u6d4b\u8bd5\u63a5\u53e3"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.light.sas.controller;\n\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * \u6d4b\u8bd5\u63a5\u53e3\n */\n@RestController\npublic class TestController {\n\n    @GetMapping("/test01")\n    @PreAuthorize("hasAuthority(\'message.read\')")\n    public String test01() {\n        return "test01";\n    }\n\n    @GetMapping("/test02")\n    @PreAuthorize("hasAuthority(\'test02\')")\n    public String test02() {\n        return "test02";\n    }\n\n    @GetMapping("/app")\n    @PreAuthorize("hasAuthority(\'app\')")\n    public String app() {\n        return "app";\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.h4,{id:"5-\u914d\u7f6e-applicationyaml-1",children:"5. \u914d\u7f6e application.yaml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"server:\n  port: 8200\n\nspring:\n  application:\n    name: jwt-opaque-token-resource-server\n  security:\n    oauth2:\n      resourceserver:\n        opaquetoken:\n          # \u533f\u540dtoken\u81ea\u7701\u7aef\u70b9\n          introspection-uri: http://127.0.0.1:8080/oauth2/introspect\n          # \u5ba2\u6237\u7aefid\n          client-id: opaque-client\n          # \u5ba2\u6237\u7aef\u79d8\u94a5\n          client-secret: 123456\n        jwt:\n          # token\u7b7e\u53d1\u5730\u5740(\u8ba4\u8bc1\u670d\u52a1\u6839\u8def\u5f84)\n          issuer-uri: http://192.168.3.49:8080\n\nlogging:\n  level:\n    org.springframework.security: debug\n    com.light.sas: debug\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u4e94\u6d4b\u8bd5",children:"\u4e94\u3001\u6d4b\u8bd5"}),"\n",(0,r.jsx)(n.h3,{id:"1-\u83b7\u53d6\u6388\u6743\u7801",children:"1. \u83b7\u53d6\u6388\u6743\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u6d4f\u89c8\u5668\u8bbf\u95ee\u4e0b\u9762\u8fde\u63a5\uff0c\u767b\u5f55\u6388\u6743\u83b7\u53d6\u6388\u6743\u7801\uff0c\u6b64\u6b65\u9aa4\u9700\u8981\u4fee\u6539\u524d\u7aef\u7684 VITE_OAUTH_CLIENT_ID \u53ef\u4ee5\u76f4\u63a5\u5728\u9875\u9762\u663e\u793a\u83b7\u53d6\u5230\u7684Token\n# http://127.0.0.1:8080/oauth2/authorize?client_id=opaque-client&response_type=code&scope=message.read&redirect_uri=http://127.0.0.1:5173/OAuth2Redirect\n\n# \u6d4f\u89c8\u5668\u8bbf\u95ee\u4e0b\u9762\u8fde\u63a5\uff0c\u767b\u5f55\u6388\u6743\u83b7\u53d6\u6388\u6743\u7801\n# http://127.0.0.1:8080/oauth2/authorize?client_id=opaque-client&response_type=code&scope=message.read&redirect_uri=https://www.baidu.com\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-\u83b7\u53d6opaque-token",children:"2. \u83b7\u53d6Opaque Token"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u5c06\u6388\u6743\u7801\u8d34\u5230\u4e0b\u65b9\u7684code\u53c2\u6570\u4e0a\ncurl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic b3BhcXVlLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'grant_type=\"authorization_code\"' \\\n    --form 'redirect_uri=\"https://www.baidu.com\"' \\\n    --form 'code=\"fis06YxKmDVbXeRsCSJBMCUSlZKL3lQ7roEZc4ejda_Oit4zqLfQoqDqNAuBRvXl6ARBNqhfT3sdJ_LjCuiZWsTjJRPhH49NcqGsRSUWU13pQDoi6MbRdGwHONlD0XQ_\"'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n   "access_token": "-bPoBEu5BmtGrYA-VeqCubhBAy8gl0diY3SpndmSNC47kLBM1SaC8waR5UusjnwGDH92n00sYWfXkWwg48dm3-YYNYNc5mHur-j-GLoiH_Dcg_BepF2nP3gwSh0Jo4Ks",\n   "refresh_token": "I10Wni8cVn_ITfcJG9ukmIzC7SD0mNi4w85zOYRj3M6mGiz7eflECH16Ix-jBow33ni1fsqkqiUSksSqkWJYCqUdijC0_8vwl86hNQ8d09C1tOCGQ8-hb5O25DIFk0xV",\n   "scope": "message.read",\n   "token_type": "Bearer",\n   "expires_in": 7200\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-resource-server",children:"3. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 (Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8100/test01' \\\n  --header 'Authorization: Bearer -bPoBEu5BmtGrYA-VeqCubhBAy8gl0diY3SpndmSNC47kLBM1SaC8waR5UusjnwGDH92n00sYWfXkWwg48dm3-YYNYNc5mHur-j-GLoiH_Dcg_BepF2nP3gwSh0Jo4Ks'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 6\nDate: Fri, 01 Mar 2024 07:58:58 GMT\n\ntest01\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-token-jwt-and-opaque-resource-server",children:"4. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 Opaque Token (JWT and Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8200/test01' \\\n  --header 'token-type: opaque' \\\n  --header 'Authorization: Bearer -bPoBEu5BmtGrYA-VeqCubhBAy8gl0diY3SpndmSNC47kLBM1SaC8waR5UusjnwGDH92n00sYWfXkWwg48dm3-YYNYNc5mHur-j-GLoiH_Dcg_BepF2nP3gwSh0Jo4Ks'\n\n\ncurl --include --location --request GET 'http://127.0.0.1:8200/test01' \\\n  --header 'token-type: jwt' \\\n  --header 'Authorization: Bearer -bPoBEu5BmtGrYA-VeqCubhBAy8gl0diY3SpndmSNC47kLBM1SaC8waR5UusjnwGDH92n00sYWfXkWwg48dm3-YYNYNc5mHur-j-GLoiH_Dcg_BepF2nP3gwSh0Jo4Ks'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 6\nDate: Fri, 01 Mar 2024 07:59:17 GMT\n\ntest01\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-jwt-and-opaque-resource-server",children:"5. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (JWT and Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8200/test01' \\\n  --header 'token-type: jwt' \\\n  --header 'Authorization: Bearer -bPoBEu5BmtGrYA-VeqCubhBAy8gl0diY3SpndmSNC47kLBM1SaC8waR5UusjnwGDH92n00sYWfXkWwg48dm3-YYNYNc5mHur-j-GLoiH_Dcg_BepF2nP3gwSh0Jo4Ks'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:'HTTP/1.1 401\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nWWW-Authenticate: Bearer error="invalid_token", error_description="An error occurred while attempting to decode the Jwt: Malformed token", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Length: 0\nDate: Fri, 01 Mar 2024 07:59:48 GMT\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230 Opaque Token \u4e0d\u80fd\u4f5c\u4e3a JWT Token \u6765\u4f7f\u7528"}),"\n",(0,r.jsx)(n.h3,{id:"6-\u83b7\u53d6\u6388\u6743\u7801",children:"6. \u83b7\u53d6\u6388\u6743\u7801"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u6d4f\u89c8\u5668\u8bbf\u95ee\u4e0b\u9762\u8fde\u63a5\uff0c\u767b\u5f55\u6388\u6743\u83b7\u53d6\u6388\u6743\u7801\n# http://127.0.0.1:8080/oauth2/authorize?client_id=messaging-client&response_type=code&scope=message.read&redirect_uri=http://127.0.0.1:8080/login/oauth2/code/messaging-client-oidc\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"7-\u83b7\u53d6jwt-token",children:"7. \u83b7\u53d6JWT Token"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u5c06\u6388\u6743\u7801\u8d34\u5230\u4e0b\u65b9\u7684code\u53c2\u6570\u4e0a\ncurl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic bWVzc2FnaW5nLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: multipart/form-data; boundary=--------------------------472090631701765594263399' \\\n    --form 'grant_type=\"authorization_code\"' \\\n    --form 'redirect_uri=\"http://127.0.0.1:8080/login/oauth2/code/messaging-client-oidc\"' \\\n    --form 'code=\"DDt914oygwr3rnMJJJdzZ7Oalr_iUxxIh5hUNVVdF00ODRI9gCxEsJFgwGvRuwV_Jsy11urVxootucnR1e0do364xhcNOPeRxAZ5DQc2X4oXwFjdALRFnzn6hWpjH7hi\"'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n   "access_token": "eyJraWQiOiJkZDhmYzdmMy0zMjcxLTQwMjItYThiOC01NjdjN2I0MGRkMDYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6Im1lc3NhZ2luZy1jbGllbnQiLCJuYmYiOjE3MDkyODAxMjYsInNjb3BlIjpbIm1lc3NhZ2UucmVhZCJdLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4zLjQ5OjgwODAiLCJleHAiOjE3MDkyODczMjYsImlhdCI6MTcwOTI4MDEyNiwianRpIjoiZWJiZmVkNTQtMzE2OS00YWFjLWE0OGQtZGQ5M2VhNDBjYTA4IiwiYXV0aG9yaXRpZXMiOlsibWVzc2FnZS5yZWFkIiwiL3N5c3RlbSIsIi8qKiJdfQ.ggj1Tzc8Dh133kHpBPu4kEty-K9QBxXntdaobk2LatigNz2NvQ7VfvG3IHpqUEAI2U-JVOTgZFet_YDNRkpelE8CNBLaIzLfLJWXKLKe7W41rjJAHecaJCgqgK_I4thwpDTTAO3m5caoKTXuTTT6JY6VU5QMDW5mRqwGW9TR2nhXnD28V9q7lfV640V8EMpoqBhwpzZEl6I89CoYoZkL62ui6QdVz5Wyj46t5LTNQ77h1tRMzySfAmnCPO2fFlG9jiMZyHGvp0W0HPg6CWtyL6r8G6kUCtNFeXUkBiF1RVHf6eiaNPB_CyQO5KiNCaF9Qb3tiI6jY69NtofusZd_Ig",\n   "refresh_token": "mH7fmZUwyuyiurirVBkwarnJ8Ph6eidb0korSe7k2swlYWcX3eB8IBd_hn3fVyIVBndnLmcmblnlHOHWZqc-C5Lt4PtQb2UqspKy4LPzgqW6vLlrrBtXLkxSxc5aLzxT",\n   "scope": "message.read",\n   "token_type": "Bearer",\n   "expires_in": 7200\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-opaque-resource-server",children:"8. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8100/test01' \\\n  --header 'Authorization: Bearer eyJraWQiOiJkZDhmYzdmMy0zMjcxLTQwMjItYThiOC01NjdjN2I0MGRkMDYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6Im1lc3NhZ2luZy1jbGllbnQiLCJuYmYiOjE3MDkyODAxMjYsInNjb3BlIjpbIm1lc3NhZ2UucmVhZCJdLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4zLjQ5OjgwODAiLCJleHAiOjE3MDkyODczMjYsImlhdCI6MTcwOTI4MDEyNiwianRpIjoiZWJiZmVkNTQtMzE2OS00YWFjLWE0OGQtZGQ5M2VhNDBjYTA4IiwiYXV0aG9yaXRpZXMiOlsibWVzc2FnZS5yZWFkIiwiL3N5c3RlbSIsIi8qKiJdfQ.ggj1Tzc8Dh133kHpBPu4kEty-K9QBxXntdaobk2LatigNz2NvQ7VfvG3IHpqUEAI2U-JVOTgZFet_YDNRkpelE8CNBLaIzLfLJWXKLKe7W41rjJAHecaJCgqgK_I4thwpDTTAO3m5caoKTXuTTT6JY6VU5QMDW5mRqwGW9TR2nhXnD28V9q7lfV640V8EMpoqBhwpzZEl6I89CoYoZkL62ui6QdVz5Wyj46t5LTNQ77h1tRMzySfAmnCPO2fFlG9jiMZyHGvp0W0HPg6CWtyL6r8G6kUCtNFeXUkBiF1RVHf6eiaNPB_CyQO5KiNCaF9Qb3tiI6jY69NtofusZd_Ig'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 6\nDate: Fri, 01 Mar 2024 08:03:48 GMT\n\ntest01\n"})}),"\n",(0,r.jsx)(n.h3,{id:"9-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-jwt-token-jwt-and-opaque-resource-server",children:"9. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 JWT Token (JWT and Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8200/test01' \\\n  --header 'token-type: jwt' \\\n  --header 'Authorization: Bearer eyJraWQiOiJkZDhmYzdmMy0zMjcxLTQwMjItYThiOC01NjdjN2I0MGRkMDYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6Im1lc3NhZ2luZy1jbGllbnQiLCJuYmYiOjE3MDkyODAxMjYsInNjb3BlIjpbIm1lc3NhZ2UucmVhZCJdLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4zLjQ5OjgwODAiLCJleHAiOjE3MDkyODczMjYsImlhdCI6MTcwOTI4MDEyNiwianRpIjoiZWJiZmVkNTQtMzE2OS00YWFjLWE0OGQtZGQ5M2VhNDBjYTA4IiwiYXV0aG9yaXRpZXMiOlsibWVzc2FnZS5yZWFkIiwiL3N5c3RlbSIsIi8qKiJdfQ.ggj1Tzc8Dh133kHpBPu4kEty-K9QBxXntdaobk2LatigNz2NvQ7VfvG3IHpqUEAI2U-JVOTgZFet_YDNRkpelE8CNBLaIzLfLJWXKLKe7W41rjJAHecaJCgqgK_I4thwpDTTAO3m5caoKTXuTTT6JY6VU5QMDW5mRqwGW9TR2nhXnD28V9q7lfV640V8EMpoqBhwpzZEl6I89CoYoZkL62ui6QdVz5Wyj46t5LTNQ77h1tRMzySfAmnCPO2fFlG9jiMZyHGvp0W0HPg6CWtyL6r8G6kUCtNFeXUkBiF1RVHf6eiaNPB_CyQO5KiNCaF9Qb3tiI6jY69NtofusZd_Ig'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 6\nDate: Fri, 01 Mar 2024 08:04:27 GMT\n\ntest01\n"})}),"\n",(0,r.jsx)(n.h3,{id:"10-\u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5-opaque-token-jwt-and-opaque-resource-server",children:"10. \u8c03\u7528\u63a5\u53e3\u6d4b\u8bd5 Opaque Token (JWT and Opaque Resource Server)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"# \u53ea\u8fd4\u56de\u54cd\u5e94\u5934      -I --head\n# \u8fd4\u56de\u54cd\u5e94\u4f53\u548c\u54cd\u5e94\u5934 -i --include \ncurl --include --location --request GET 'http://127.0.0.1:8200/test01' \\\n  --header 'token-type: opaque' \\\n  --header 'Authorization: Bearer eyJraWQiOiJkZDhmYzdmMy0zMjcxLTQwMjItYThiOC01NjdjN2I0MGRkMDYiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6Im1lc3NhZ2luZy1jbGllbnQiLCJuYmYiOjE3MDkyODAxMjYsInNjb3BlIjpbIm1lc3NhZ2UucmVhZCJdLCJpc3MiOiJodHRwOi8vMTkyLjE2OC4zLjQ5OjgwODAiLCJleHAiOjE3MDkyODczMjYsImlhdCI6MTcwOTI4MDEyNiwianRpIjoiZWJiZmVkNTQtMzE2OS00YWFjLWE0OGQtZGQ5M2VhNDBjYTA4IiwiYXV0aG9yaXRpZXMiOlsibWVzc2FnZS5yZWFkIiwiL3N5c3RlbSIsIi8qKiJdfQ.ggj1Tzc8Dh133kHpBPu4kEty-K9QBxXntdaobk2LatigNz2NvQ7VfvG3IHpqUEAI2U-JVOTgZFet_YDNRkpelE8CNBLaIzLfLJWXKLKe7W41rjJAHecaJCgqgK_I4thwpDTTAO3m5caoKTXuTTT6JY6VU5QMDW5mRqwGW9TR2nhXnD28V9q7lfV640V8EMpoqBhwpzZEl6I89CoYoZkL62ui6QdVz5Wyj46t5LTNQ77h1tRMzySfAmnCPO2fFlG9jiMZyHGvp0W0HPg6CWtyL6r8G6kUCtNFeXUkBiF1RVHf6eiaNPB_CyQO5KiNCaF9Qb3tiI6jY69NtofusZd_Ig'\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u54cd\u5e94\u7ed3\u679c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",metastring:"request",children:"HTTP/1.1 200\nVary: Origin\nVary: Access-Control-Request-Method\nVary: Access-Control-Request-Headers\nX-Content-Type-Options: nosniff\nX-XSS-Protection: 0\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nPragma: no-cache\nExpires: 0\nX-Frame-Options: DENY\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 6\nDate: Fri, 01 Mar 2024 08:04:43 GMT\n\ntest01\n"})}),"\n",(0,r.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u5230 JWT Token \u53ef\u4ee5\u4f5c\u4e3a Opaque Token \u6765\u4f7f\u7528"}),"\n",(0,r.jsx)(n.h2,{id:"\u516d\u7ed3\u8bba",children:"\u516d\u3001\u7ed3\u8bba"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Opaque Token"})," \u4e0d\u80fd\u4f5c\u4e3a ",(0,r.jsx)(n.code,{children:"JWT Token"})," \u6765\u4f7f\u7528"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"JWT Token"})," \u53ef\u4ee5\u4f5c\u4e3a ",(0,r.jsx)(n.code,{children:"Opaque Token"})," \u6765\u4f7f\u7528"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);
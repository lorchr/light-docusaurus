"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[9363],{1982:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(85893),i=n(11151);const o={},a=void 0,s={id:"zh-cn/spring-authorization-server/SAS-OAuth2-Extension-Grant-Type",title:"SAS-OAuth2-Extension-Grant-Type",description:"- Spring Authorization Server\u5165\u95e8 (\u5341\u4e00) \u81ea\u5b9a\u4e49grant_type(\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55)\u83b7\u53d6token",source:"@site/docs/zh-cn/spring-authorization-server/11-SAS-OAuth2-Extension-Grant-Type.md",sourceDirName:"zh-cn/spring-authorization-server",slug:"/zh-cn/spring-authorization-server/SAS-OAuth2-Extension-Grant-Type",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-OAuth2-Extension-Grant-Type",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/11-SAS-OAuth2-Extension-Grant-Type.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{},sidebar:"troch",previous:{title:"SAS-SMS-Code-Login",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-SMS-Code-Login"},next:{title:"SAS-Frontend-Backend-Separate",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-Frontend-Backend-Separate"}},c={},u=[{value:"\u4e00\u3001\u5b9e\u73b0\u601d\u8def",id:"\u4e00\u5b9e\u73b0\u601d\u8def",level:2},{value:"\u4e8c\u3001\u7f16\u7801\u524d\u7684\u51c6\u5907",id:"\u4e8c\u7f16\u7801\u524d\u7684\u51c6\u5907",level:2},{value:"1. \u5b8c\u5584<code>SecurityConstants</code>",id:"1-\u5b8c\u5584securityconstants",level:3},{value:"2. <code>SecurityUtils</code>\u7c7b\u4e2d\u6dfb\u52a0\u516c\u5171\u65b9\u6cd5",id:"2-securityutils\u7c7b\u4e2d\u6dfb\u52a0\u516c\u5171\u65b9\u6cd5",level:3},{value:"3. \u4fee\u6539\u5ba2\u6237\u7aef\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49<code>grant_type</code>",id:"3-\u4fee\u6539\u5ba2\u6237\u7aef\u6dfb\u52a0\u81ea\u5b9a\u4e49grant_type",level:3},{value:"\u4e09\u3001\u7f16\u7801\u96c6\u6210",id:"\u4e09\u7f16\u7801\u96c6\u6210",level:2},{value:"1. \u7ee7\u627f<code>AbstractAuthenticationToken</code>\u5b9e\u73b0\u81ea\u5df1\u7684<code>token</code>\u5bf9\u8c61",id:"1-\u7ee7\u627fabstractauthenticationtoken\u5b9e\u73b0\u81ea\u5df1\u7684token\u5bf9\u8c61",level:3},{value:"2. \u5b9e\u73b0<code>AuthenticationConverter</code>\u6784\u5efa\u4e00\u4e2a<code>token</code>\u8fd4\u56de\u3002",id:"2-\u5b9e\u73b0authenticationconverter\u6784\u5efa\u4e00\u4e2atoken\u8fd4\u56de",level:3},{value:"3. \u5b9e\u73b0<code>AuthenticationProvider</code>\u6821\u9a8c\u8bf7\u6c42\u53c2\u6570\u5e76\u521b\u5efa<code>AccessToken</code>\u8fd4\u56de\u3002",id:"3-\u5b9e\u73b0authenticationprovider\u6821\u9a8c\u8bf7\u6c42\u53c2\u6570\u5e76\u521b\u5efaaccesstoken\u8fd4\u56de",level:3},{value:"4. \u6ce8\u610f\uff0c\u5230\u8fd9\u91cc\u5982\u679c\u4e0d\u5728<code>SmsCaptchaLoginAuthenticationProvider</code>\u53e6\u505a\u5904\u7406\u5c31\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5bc6\u7801\u6a21\u5f0f\u4e86\uff0c\u5bc6\u7801\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002",id:"4-\u6ce8\u610f\u5230\u8fd9\u91cc\u5982\u679c\u4e0d\u5728smscaptchaloginauthenticationprovider\u53e6\u505a\u5904\u7406\u5c31\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5bc6\u7801\u6a21\u5f0f\u4e86\u5bc6\u7801\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u6210\u4e86",level:3},{value:"5. \u4fee\u6539<code>SmsCaptchaLoginAuthenticationProvider</code>\u4f7f\u5176\u652f\u6301\u81ea\u5b9a\u4e49<code>grant_type</code>",id:"5-\u4fee\u6539smscaptchaloginauthenticationprovider\u4f7f\u5176\u652f\u6301\u81ea\u5b9a\u4e49grant_type",level:3},{value:"6. \u914d\u7f6e<code>AuthorizationConfig</code>\uff0c\u5c06<code>converter</code>\u548c<code>provider</code>\u6dfb\u52a0\u81f3\u7aef\u70b9\u5185",id:"6-\u914d\u7f6eauthorizationconfig\u5c06converter\u548cprovider\u6dfb\u52a0\u81f3\u7aef\u70b9\u5185",level:3},{value:"7. \u4fee\u6539<code>CaptchaAuthenticationProvider</code>\u7c7b\u7684\u5224\u65ad\uff0c\u4fee\u6539\u4e3a\u201c\u4e0d\u662f\u767b\u5f55\u9875\u9762\u7684\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u4e0d\u5904\u7406\u201d(\u53ef\u9009)",id:"7-\u4fee\u6539captchaauthenticationprovider\u7c7b\u7684\u5224\u65ad\u4fee\u6539\u4e3a\u4e0d\u662f\u767b\u5f55\u9875\u9762\u7684\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u4e0d\u5904\u7406\u53ef\u9009",level:3},{value:"\u56db\u3001\u6d4b\u8bd5",id:"\u56db\u6d4b\u8bd5",level:2},{value:"1. \u5728postman\u4e2d\u8bf7\u6c42<code>/getSmsCaptcha</code>\u63a5\u53e3",id:"1-\u5728postman\u4e2d\u8bf7\u6c42getsmscaptcha\u63a5\u53e3",level:3},{value:"2. \u7ec4\u88c5\u53c2\u6570\u8bf7\u6c42/oauth2/token\u63a5\u53e3",id:"2-\u7ec4\u88c5\u53c2\u6570\u8bf7\u6c42oauth2token\u63a5\u53e3",level:3},{value:"3. \u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",id:"3-\u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",level:3},{value:"4. \u9519\u8bef\u9a8c\u8bc1\u7801",id:"4-\u9519\u8bef\u9a8c\u8bc1\u7801",level:3},{value:"\u5199\u5728\u6700\u540e",id:"\u5199\u5728\u6700\u540e",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://juejin.cn/post/7246409673565372475",children:"Spring Authorization Server\u5165\u95e8 (\u5341\u4e00) \u81ea\u5b9a\u4e49grant_type(\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55)\u83b7\u53d6token"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e00\u7bc7\u6587\u7ae0# ",(0,r.jsx)(t.a,{href:"https://juejin.cn/post/7239953874950733884",children:"Spring Authorization Server\u5165\u95e8 (\u4e00) \u521d\u8bc6SpringAuthorizationServer\u548cOAuth2.1\u534f\u8bae"}),"\u4e2d\u8bf4\u8fc7\uff0c\u5bc6\u7801\u6a21\u5f0f\u5df2\u7ecf\u5728OAuth2.1\u4e2d\u88ab\u5e9f\u9664\uff0c\u4f46\u662f\u6709\u5f88\u591a\u8001\u9879\u76ee\u4e5f\u4f9d\u8d56\u4e8e\u5bc6\u7801\u6a21\u5f0f\uff0c\u6bd4\u5982\u81ea\u5df1\u516c\u53f8\u5185\u90e8\u7684app\u3001\u5c0f\u7a0b\u5e8f\u7b49\u90fd\u4f1a\u7528\u5230\u5bc6\u7801\u6a21\u5f0f\uff0c\u867d\u7136\u6846\u67b6\u4e0d\u652f\u6301\uff0c\u4f46\u662f\u4e5f\u63d0\u4f9b\u4e86\u81ea\u5b9a\u4e49grant_type\u7684\u6269\u5c55\u65b9\u5f0f\uff0c\u4eca\u5929\u5c31\u6765\u5b9e\u73b0\u4e00\u4e0b\u81ea\u5b9a\u4e49\u7684\u77ed\u4fe1\u9a8c\u8bc1\u767b\u5f55\uff1b\u54c8\u54c8\uff0c\u76ae\u4e00\u4e0b\uff0c\u770b\u8fc7\u524d\u8fb9\u6587\u7ae0\u7684\u8bfb\u8005\u5e94\u8be5\u660e\u767d\u77ed\u4fe1\u9a8c\u8bc1\u767b\u5f55\u548c\u5bc6\u7801\u767b\u5f55\u533a\u522b\u4e0d\u5927\uff0c\u6700\u591a\u5c31\u662f\u4e00\u4e2a\u6821\u9a8c\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u6587\u7ae0\u4e2d\u4e3b\u6253\u7684\u662f\u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\uff0c\u540c\u65f6\u4e5f\u4f1a\u8bf4\u660e\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u8be5\u600e\u4e48\u505a\u3002"]}),"\n",(0,r.jsx)(t.h2,{id:"\u4e00\u5b9e\u73b0\u601d\u8def",children:"\u4e00\u3001\u5b9e\u73b0\u601d\u8def"}),"\n",(0,r.jsxs)(t.p,{children:["\u5728 ",(0,r.jsx)(t.a,{href:"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/guides/how-to-ext-grant-type.html",children:"Implement an Extension Authorization Grant Type"})," \u6587\u6863\u4e2d\u6709\u8bf4\u660e\u5982\u4f55\u53bb\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684grant_type\uff0c\u5e76\u8bf4\u660e\u5982\u4f55\u8ba9\u4ed6\u751f\u6548\u3002"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u7ee7\u627f",(0,r.jsx)(t.code,{children:"AbstractAuthenticationToken"}),"\u5e76\u5b9a\u4e49\u4e00\u4e9b\u5c5e\u6027"]}),"\n",(0,r.jsxs)(t.li,{children:["\u5b9e\u73b0",(0,r.jsx)(t.code,{children:"AuthenticationConverter"}),"\u548c",(0,r.jsx)(t.code,{children:"AuthenticationProvider"}),"\u6dfb\u52a0\u903b\u8f91\u5904\u7406\u3002"]}),"\n",(0,r.jsxs)(t.li,{children:["\u5c06",(0,r.jsx)(t.code,{children:"AuthenticationConverter"}),"\u548c",(0,r.jsx)(t.code,{children:"AuthenticationProvider"}),"\u6dfb\u52a0\u81f3",(0,r.jsx)(t.a,{href:"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/protocol-endpoints.html#oauth2-token-endpoint",children:"OAuth2 Token endpoint"}),"\u4e2d\u3002\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u8bbf\u95ee",(0,r.jsx)(t.code,{children:"/oauth2/token"}),"\u63a5\u53e3\u65f6\u4f1a\u5148\u901a\u8fc7",(0,r.jsx)(t.code,{children:"Converter"}),"\u751f\u6210\u4e00\u4e2a",(0,r.jsx)(t.code,{children:"token"}),"\uff0c\u7136\u540e\u518d\u7531",(0,r.jsx)(t.code,{children:"ProviderManager"}),"\u6839\u636e\u751f\u6210\u7684",(0,r.jsx)(t.code,{children:"token"}),"\u53bb\u627e\u5230\u5bf9\u5e94\u7684",(0,r.jsx)(t.code,{children:"Provider"}),"\u8fdb\u884c\u6821\u9a8c\uff0c\u6210\u529f\u4ee5\u540e\u4f1a\u8fd4\u56de\u4e00\u4e2a",(0,r.jsx)(t.code,{children:"token"}),"\uff0c\u5982\u4e0b\u3002"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(11994).Z+"",width:"1328",height:"969"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\u901a\u8fc7",(0,r.jsx)(t.code,{children:"Converter"}),"\u751f\u6210\u4e00\u4e2aToken\u5e76\u8fd4\u56de\u3002"]}),"\n",(0,r.jsxs)(t.li,{children:["\u6839\u636e",(0,r.jsx)(t.code,{children:"AbstractAuthenticationToken"}),"\u751f\u6210",(0,r.jsx)(t.code,{children:"AccessToken"}),"\u5e76\u8fd4\u56de\u3002"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"\u4e8c\u7f16\u7801\u524d\u7684\u51c6\u5907",children:"\u4e8c\u3001\u7f16\u7801\u524d\u7684\u51c6\u5907"}),"\n",(0,r.jsxs)(t.h3,{id:"1-\u5b8c\u5584securityconstants",children:["1. \u5b8c\u5584",(0,r.jsx)(t.code,{children:"SecurityConstants"})]}),"\n",(0,r.jsxs)(t.p,{children:["\u6dfb\u52a0\u77ed\u4fe1\u8ba4\u8bc1",(0,r.jsx)(t.code,{children:"grant_type"}),"\u3001\u624b\u673a\u53f7\u53c2\u6570",(0,r.jsx)(t.code,{children:"key"}),"\uff0c\u9a8c\u8bc1\u7801\u53c2\u6570",(0,r.jsx)(t.code,{children:"key"}),"\u548c\u5bc6\u7801\u6a21\u5f0f\u767b\u9646\u7684\u5e38\u91cf"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.constant;\n\n/**\n * security \u5e38\u91cf\u7c7b\n *\n * @author vains\n */\npublic class SecurityConstants {\n\n    /**\n     * \u767b\u5f55\u65b9\u5f0f\u2014\u2014\u77ed\u4fe1\u9a8c\u8bc1\u7801\n     */\n    public static final String SMS_LOGIN_TYPE = "smsCaptcha";\n\n    /**\n     * \u767b\u5f55\u65b9\u5f0f\u2014\u2014\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\n     */\n    public static final String PASSWORD_LOGIN_TYPE = "passwordLogin";\n\n    /**\n     * \u6743\u9650\u5728token\u4e2d\u7684key\n     */\n    public static final String AUTHORITIES_KEY = "authorities";\n\n    /**\n     * \u81ea\u5b9a\u4e49 grant type \u2014\u2014 \u77ed\u4fe1\u9a8c\u8bc1\u7801\n     */\n    public static final String GRANT_TYPE_SMS_CODE = "urn:ietf:params:oauth:grant-type:sms_code";\n\n    /**\n     * \u81ea\u5b9a\u4e49 grant type \u2014\u2014 \u77ed\u4fe1\u9a8c\u8bc1\u7801 \u2014\u2014 \u624b\u673a\u53f7\u7684key\n     */\n    public static final String OAUTH_PARAMETER_NAME_PHONE = "phone";\n\n    /**\n     * \u81ea\u5b9a\u4e49 grant type \u2014\u2014 \u77ed\u4fe1\u9a8c\u8bc1\u7801 \u2014\u2014 \u77ed\u4fe1\u9a8c\u8bc1\u7801\u7684key\n     */\n    public static final String OAUTH_PARAMETER_NAME_SMS_CAPTCHA = "sms_captcha";\n\n}\n'})}),"\n",(0,r.jsxs)(t.h3,{id:"2-securityutils\u7c7b\u4e2d\u6dfb\u52a0\u516c\u5171\u65b9\u6cd5",children:["2. ",(0,r.jsx)(t.code,{children:"SecurityUtils"}),"\u7c7b\u4e2d\u6dfb\u52a0\u516c\u5171\u65b9\u6cd5"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.util;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.authentication.InsufficientAuthenticationException;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ClientAuthenticationToken;\nimport org.springframework.security.oauth2.server.resource.BearerTokenError;\nimport org.springframework.security.oauth2.server.resource.BearerTokenErrorCodes;\nimport org.springframework.security.oauth2.server.resource.authentication.AbstractOAuth2TokenAuthenticationToken;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\n\nimport java.io.IOException;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * \u8ba4\u8bc1\u9274\u6743\u5de5\u5177\n *\n * @author vains\n */\n@Slf4j\npublic class SecurityUtils {\n\n    private SecurityUtils() {\n        // \u7981\u6b62\u5b9e\u4f8b\u5316\u5de5\u5177\u7c7b\n        throw new UnsupportedOperationException("Utility classes cannot be instantiated.");\n    }\n\n    /**\n     * \u4ece\u8ba4\u8bc1\u4fe1\u606f\u4e2d\u83b7\u53d6\u5ba2\u6237\u7aeftoken\n     *\n     * @param authentication \u8ba4\u8bc1\u4fe1\u606f\n     * @return \u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\uff0c\u83b7\u53d6\u5931\u8d25\u629b\u51fa\u5f02\u5e38\n     */\n    public static OAuth2ClientAuthenticationToken getAuthenticatedClientElseThrowInvalidClient(Authentication authentication) {\n        OAuth2ClientAuthenticationToken clientPrincipal = null;\n        if (OAuth2ClientAuthenticationToken.class.isAssignableFrom(authentication.getPrincipal().getClass())) {\n            clientPrincipal = (OAuth2ClientAuthenticationToken) authentication.getPrincipal();\n        }\n        if (clientPrincipal != null && clientPrincipal.isAuthenticated()) {\n            return clientPrincipal;\n        }\n        throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_CLIENT);\n    }\n\n    /**\n     * \u63d0\u53d6\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\u5e76\u8f6c\u4e3a\u4e00\u4e2amap\u8fd4\u56de\n     *\n     * @param request \u5f53\u524d\u8bf7\u6c42\n     * @return \u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\n     */\n    public static MultiValueMap<String, String> getParameters(HttpServletRequest request) {\n        Map<String, String[]> parameterMap = request.getParameterMap();\n        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<>(parameterMap.size());\n        parameterMap.forEach((key, values) -> {\n            if (values.length > 0) {\n                for (String value : values) {\n                    parameters.add(key, value);\n                }\n            }\n        });\n        return parameters;\n    }\n\n    /**\n     * \u629b\u51fa OAuth2AuthenticationException \u5f02\u5e38\n     *\n     * @param errorCode \u9519\u8bef\u7801\n     * @param message   \u9519\u8bef\u4fe1\u606f\n     * @param errorUri  \u9519\u8bef\u5bf9\u7167\u5730\u5740\n     */\n    public static void throwError(String errorCode, String message, String errorUri) {\n        OAuth2Error error = new OAuth2Error(errorCode, message, errorUri);\n        throw new OAuth2AuthenticationException(error);\n    }\n\n    /**\n     * \u8ba4\u8bc1\u4e0e\u9274\u6743\u5931\u8d25\u56de\u8c03\n     *\n     * @param request  \u5f53\u524d\u8bf7\u6c42\n     * @param response \u5f53\u524d\u54cd\u5e94\n     * @param e        \u5177\u4f53\u7684\u5f02\u5e38\u4fe1\u606f\n     */\n    public static void exceptionHandler(HttpServletRequest request, HttpServletResponse response, Throwable e) {\n        Map<String, String> parameters = getErrorParameter(request, response, e);\n        String wwwAuthenticate = computeWwwAuthenticateHeaderValue(parameters);\n        response.addHeader(HttpHeaders.WWW_AUTHENTICATE, wwwAuthenticate);\n        try {\n            response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n            response.getWriter().write(JsonUtils.objectCovertToJson(parameters));\n            response.getWriter().flush();\n        } catch (IOException ex) {\n            log.error("\u5199\u56de\u9519\u8bef\u4fe1\u606f\u5931\u8d25", e);\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5f02\u5e38\u4fe1\u606fmap\n     *\n     * @param request  \u5f53\u524d\u8bf7\u6c42\n     * @param response \u5f53\u524d\u54cd\u5e94\n     * @param e        \u672c\u6b21\u5f02\u5e38\u5177\u4f53\u7684\u5f02\u5e38\u5b9e\u4f8b\n     * @return \u5f02\u5e38\u4fe1\u606fmap\n     */\n    private static Map<String, String> getErrorParameter(HttpServletRequest request, HttpServletResponse response, Throwable e) {\n        Map<String, String> parameters = new LinkedHashMap<>();\n        if (request.getUserPrincipal() instanceof AbstractOAuth2TokenAuthenticationToken) {\n            // \u6743\u9650\u4e0d\u8db3\n            parameters.put("error", BearerTokenErrorCodes.INSUFFICIENT_SCOPE);\n            parameters.put("error_description",\n                    "The request requires higher privileges than provided by the access token.");\n            parameters.put("error_uri", "https://tools.ietf.org/html/rfc6750#section-3.1");\n            response.setStatus(HttpStatus.FORBIDDEN.value());\n        }\n        if (e instanceof OAuth2AuthenticationException authenticationException) {\n            // jwt\u5f02\u5e38\uff0ce.g. jwt\u8d85\u8fc7\u6709\u6548\u671f\u3001jwt\u65e0\u6548\u7b49\n            OAuth2Error error = authenticationException.getError();\n            parameters.put("error", error.getErrorCode());\n            if (StringUtils.hasText(error.getUri())) {\n                parameters.put("error_uri", error.getUri());\n            }\n            if (StringUtils.hasText(error.getDescription())) {\n                parameters.put("error_description", error.getDescription());\n            }\n            if (error instanceof BearerTokenError bearerTokenError) {\n                if (StringUtils.hasText(bearerTokenError.getScope())) {\n                    parameters.put("scope", bearerTokenError.getScope());\n                }\n                response.setStatus(bearerTokenError.getHttpStatus().value());\n            }\n        }\n        if (e instanceof InsufficientAuthenticationException) {\n            // \u6ca1\u6709\u643a\u5e26jwt\u8bbf\u95ee\u63a5\u53e3\uff0c\u6ca1\u6709\u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\n            parameters.put("error", BearerTokenErrorCodes.INVALID_TOKEN);\n            parameters.put("error_description", "Not authorized.");\n            parameters.put("error_uri", "https://tools.ietf.org/html/rfc6750#section-3.1");\n            response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        }\n        parameters.put("message", e.getMessage());\n        return parameters;\n    }\n\n    /**\n     * \u751f\u6210\u653e\u5165\u8bf7\u6c42\u5934\u7684\u9519\u8bef\u4fe1\u606f\n     *\n     * @param parameters \u53c2\u6570\n     * @return \u5b57\u7b26\u4e32\n     */\n    public static String computeWwwAuthenticateHeaderValue(Map<String, String> parameters) {\n        StringBuilder wwwAuthenticate = new StringBuilder();\n        wwwAuthenticate.append("Bearer");\n        if (!parameters.isEmpty()) {\n            wwwAuthenticate.append(" ");\n            int i = 0;\n            for (Map.Entry<String, String> entry : parameters.entrySet()) {\n                wwwAuthenticate.append(entry.getKey()).append("="").append(entry.getValue()).append(""");\n                if (i != parameters.size() - 1) {\n                    wwwAuthenticate.append(", ");\n                }\n                i++;\n            }\n        }\n        return wwwAuthenticate.toString();\n    }\n}\n'})}),"\n",(0,r.jsxs)(t.h3,{id:"3-\u4fee\u6539\u5ba2\u6237\u7aef\u6dfb\u52a0\u81ea\u5b9a\u4e49grant_type",children:["3. \u4fee\u6539\u5ba2\u6237\u7aef\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49",(0,r.jsx)(t.code,{children:"grant_type"})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(16467).Z+"",width:"1512",height:"266"})}),"\n",(0,r.jsx)(t.h2,{id:"\u4e09\u7f16\u7801\u96c6\u6210",children:"\u4e09\u3001\u7f16\u7801\u96c6\u6210"}),"\n",(0,r.jsxs)(t.h3,{id:"1-\u7ee7\u627fabstractauthenticationtoken\u5b9e\u73b0\u81ea\u5df1\u7684token\u5bf9\u8c61",children:["1. \u7ee7\u627f",(0,r.jsx)(t.code,{children:"AbstractAuthenticationToken"}),"\u5b9e\u73b0\u81ea\u5df1\u7684",(0,r.jsx)(t.code,{children:"token"}),"\u5bf9\u8c61"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5728sms\u5305\u4e0b\u521b\u5efa",(0,r.jsx)(t.code,{children:"SmsCaptchaGrantAuthenticationToken"}),"\u7c7b\u5e76\u7ee7\u627f",(0,r.jsx)(t.code,{children:"AbstractAuthenticationToken"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"package com.example.authorization.sms;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.security.authentication.AbstractAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * \u81ea\u5b9a\u4e49\u77ed\u4fe1\u9a8c\u8bc1\u767b\u5f55Token\u7c7b\n *\n * @author vains\n */\npublic class SmsCaptchaGrantAuthenticationToken extends AbstractAuthenticationToken {\n\n    /**\n     * \u672c\u6b21\u767b\u5f55\u7533\u8bf7\u7684scope\n     */\n    private final Set<String> scopes;\n\n    /**\n     * \u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\n     */\n    private final Authentication clientPrincipal;\n\n    /**\n     * \u5f53\u524d\u8bf7\u6c42\u7684\u53c2\u6570\n     */\n    private final Map<String, Object> additionalParameters;\n\n    /**\n     * \u8ba4\u8bc1\u65b9\u5f0f\n     */\n    private final AuthorizationGrantType authorizationGrantType;\n    \n    public SmsCaptchaGrantAuthenticationToken(AuthorizationGrantType authorizationGrantType,\n                                              Authentication clientPrincipal,\n                                              @Nullable Set<String> scopes,\n                                              @Nullable Map<String, Object> additionalParameters) {\n        super(Collections.emptyList());\n        this.scopes = scopes;\n        this.clientPrincipal = clientPrincipal;\n        this.additionalParameters = additionalParameters;\n        this.authorizationGrantType = authorizationGrantType;\n    }\n\n    @Override\n    public Object getCredentials() {\n        return null;\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return clientPrincipal;\n    }\n    \n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u7684scope(s)\n     *\n     * @return \u8bf7\u6c42\u7684scope(s)\n     */\n    public Set<String> getScopes() {\n        return this.scopes;\n    }\n    \n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u4e2d\u7684authorization grant type\n     *\n     * @return authorization grant type\n     */\n    public AuthorizationGrantType getAuthorizationGrantType() {\n        return this.authorizationGrantType;\n    }\n    \n    /**\n     * \u8fd4\u56de\u8bf7\u6c42\u4e2d\u7684\u9644\u52a0\u53c2\u6570\n     *\n     * @return \u9644\u52a0\u53c2\u6570\n     */\n    public Map<String, Object> getAdditionalParameters() {\n        return this.additionalParameters;\n    }\n    \n}\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"2-\u5b9e\u73b0authenticationconverter\u6784\u5efa\u4e00\u4e2atoken\u8fd4\u56de",children:["2. \u5b9e\u73b0",(0,r.jsx)(t.code,{children:"AuthenticationConverter"}),"\u6784\u5efa\u4e00\u4e2a",(0,r.jsx)(t.code,{children:"token"}),"\u8fd4\u56de\u3002"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5728sms\u5305\u4e0b\u521b\u5efa",(0,r.jsx)(t.code,{children:"SmsCaptchaGrantAuthenticationConverter"}),"\u5e76\u5b9e\u73b0",(0,r.jsx)(t.code,{children:"AuthenticationConverter"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.authorization.sms;\n\nimport com.example.constant.SecurityConstants;\nimport com.example.util.SecurityUtils;\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\n\nimport java.util.*;\n\n/**\n * \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55Token\u8f6c\u6362\u5668\n *\n * @author vains\n */\npublic class SmsCaptchaGrantAuthenticationConverter implements AuthenticationConverter {\n\n    static final String ACCESS_TOKEN_REQUEST_ERROR_URI = "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2";\n\n    @Override\n    public Authentication convert(HttpServletRequest request) {\n        // grant_type (REQUIRED)\n        String grantType = request.getParameter(OAuth2ParameterNames.GRANT_TYPE);\n        if (!SecurityConstants.GRANT_TYPE_SMS_CODE.equals(grantType)) {\n            return null;\n        }\n\n        // \u8fd9\u91cc\u76ee\u524d\u662f\u5ba2\u6237\u7aef\u8ba4\u8bc1\u4fe1\u606f\n        Authentication clientPrincipal = SecurityContextHolder.getContext().getAuthentication();\n\n        // \u83b7\u53d6\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570\n        MultiValueMap<String, String> parameters = SecurityUtils.getParameters(request);\n\n        // scope (OPTIONAL)\n        String scope = parameters.getFirst(OAuth2ParameterNames.SCOPE);\n        if (StringUtils.hasText(scope) &&\n                parameters.get(OAuth2ParameterNames.SCOPE).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + OAuth2ParameterNames.SCOPE,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n        Set<String> requestedScopes = null;\n        if (StringUtils.hasText(scope)) {\n            requestedScopes = new HashSet<>(\n                    Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n\n        // Mobile phone number (REQUIRED)\n        String username = parameters.getFirst(SecurityConstants.OAUTH_PARAMETER_NAME_PHONE);\n        if (!StringUtils.hasText(username) || parameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_PHONE).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + SecurityConstants.OAUTH_PARAMETER_NAME_PHONE,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n\n        // SMS verification code (REQUIRED)\n        String password = parameters.getFirst(SecurityConstants.OAUTH_PARAMETER_NAME_SMS_CAPTCHA);\n        if (!StringUtils.hasText(password) || parameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_SMS_CAPTCHA).size() != 1) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "OAuth 2.0 Parameter: " + SecurityConstants.OAUTH_PARAMETER_NAME_SMS_CAPTCHA,\n                    ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n\n        // \u63d0\u53d6\u9644\u52a0\u53c2\u6570\n        Map<String, Object> additionalParameters = new HashMap<>();\n        parameters.forEach((key, value) -> {\n            if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) &&\n                    !key.equals(OAuth2ParameterNames.CLIENT_ID)) {\n                additionalParameters.put(key, value.get(0));\n            }\n        });\n\n        // \u6784\u5efaAbstractAuthenticationToken\u5b50\u7c7b\u5b9e\u4f8b\u5e76\u8fd4\u56de\n        return new SmsCaptchaGrantAuthenticationToken(new AuthorizationGrantType(SecurityConstants.GRANT_TYPE_SMS_CODE), clientPrincipal, requestedScopes, additionalParameters);\n    }\n\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["\u8be5\u7c7b\u4e3b\u8981\u5c31\u662f\u521b\u5efa\u4e00\u4e2a",(0,r.jsx)(t.code,{children:"provider"}),"\u9700\u8981\u7684",(0,r.jsx)(t.code,{children:"token"}),"\u5e76\u8fd4\u56de\uff0c\u5bf9\u8bf7\u6c42\u4e2d\u5fc5\u8981\u7684\u53c2\u6570\u505a\u4e00\u4e9b\u6821\u9a8c\u3002"]}),"\n",(0,r.jsxs)(t.h3,{id:"3-\u5b9e\u73b0authenticationprovider\u6821\u9a8c\u8bf7\u6c42\u53c2\u6570\u5e76\u521b\u5efaaccesstoken\u8fd4\u56de",children:["3. \u5b9e\u73b0",(0,r.jsx)(t.code,{children:"AuthenticationProvider"}),"\u6821\u9a8c\u8bf7\u6c42\u53c2\u6570\u5e76\u521b\u5efa",(0,r.jsx)(t.code,{children:"AccessToken"}),"\u8fd4\u56de\u3002"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5728sms\u5305\u4e0b\u521b\u5efa",(0,r.jsx)(t.code,{children:"SmsCaptchaGrantAuthenticationProvider"}),"\u5e76\u5b9e\u73b0",(0,r.jsx)(t.code,{children:"AuthenticationProvider"})]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"2023-07-15\u4fee\u6539\u903b\u8f91\uff0c\u52a0\u5165\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\uff0c\u9632\u6b62\u5237\u65b0token\u65f6\u56e0\u83b7\u53d6\u4e0d\u5230\u8ba4\u8bc1\u4fe1\u606f\u800c\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.authorization.sms;\n\nimport com.example.constant.SecurityConstants;\nimport com.example.util.SecurityUtils;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.oauth2.core.*;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.oidc.OidcIdToken;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.security.oauth2.server.authorization.OAuth2Authorization;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2AccessTokenAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ClientAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.context.AuthorizationServerContextHolder;\nimport org.springframework.security.oauth2.server.authorization.token.DefaultOAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ObjectUtils;\n\nimport java.security.Principal;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * \u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\u8005\n *\n * @author vains\n */\n@Slf4j\npublic class SmsCaptchaGrantAuthenticationProvider implements AuthenticationProvider {\n\n    private OAuth2TokenGenerator<?> tokenGenerator;\n\n    private AuthenticationManager authenticationManager;\n\n    private OAuth2AuthorizationService authorizationService;\n\n    private static final String ERROR_URI = "https://datatracker.ietf.org/doc/html/rfc6749#section-5.2";\n\n    private static final OAuth2TokenType ID_TOKEN_TOKEN_TYPE = new OAuth2TokenType(OidcParameterNames.ID_TOKEN);\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        SmsCaptchaGrantAuthenticationToken authenticationToken = (SmsCaptchaGrantAuthenticationToken) authentication;\n\n        // Ensure the client is authenticated\n        OAuth2ClientAuthenticationToken clientPrincipal =\n                SecurityUtils.getAuthenticatedClientElseThrowInvalidClient(authenticationToken);\n        RegisteredClient registeredClient = clientPrincipal.getRegisteredClient();\n        // Ensure the client is configured to use this authorization grant type\n        if (registeredClient == null || !registeredClient.getAuthorizationGrantTypes().contains(authenticationToken.getAuthorizationGrantType())) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.UNAUTHORIZED_CLIENT);\n        }\n\n        // \u9a8c\u8bc1scope\n        Set<String> authorizedScopes = getAuthorizedScopes(registeredClient, authenticationToken.getScopes());\n\n        // \u8fdb\u884c\u8ba4\u8bc1\n        Authentication authenticate = getAuthenticatedUser(authenticationToken);\n\n        // \u4ee5\u4e0b\u5185\u5bb9\u6458\u6284\u81eaOAuth2AuthorizationCodeAuthenticationProvider\n        DefaultOAuth2TokenContext.Builder tokenContextBuilder = DefaultOAuth2TokenContext.builder()\n                .registeredClient(registeredClient)\n                .principal(authenticate)\n                .authorizationServerContext(AuthorizationServerContextHolder.getContext())\n                .authorizedScopes(authorizedScopes)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType())\n                .authorizationGrant(authenticationToken);\n\n        // Initialize the OAuth2Authorization\n        OAuth2Authorization.Builder authorizationBuilder = OAuth2Authorization.withRegisteredClient(registeredClient)\n                // 2023-07-15\u4fee\u6539\u903b\u8f91\uff0c\u52a0\u5165\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\uff0c\u9632\u6b62\u5237\u65b0token\u65f6\u56e0\u83b7\u53d6\u4e0d\u5230\u8ba4\u8bc1\u4fe1\u606f\u800c\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\n                // \u5b58\u5165\u6388\u6743scope\n                .authorizedScopes(authorizedScopes)\n                // \u5f53\u524d\u6388\u6743\u7528\u6237\u540d\u79f0\n                .principalName(authenticate.getName())\n                // \u8bbe\u7f6e\u5f53\u524d\u7528\u6237\u8ba4\u8bc1\u4fe1\u606f\n                .attribute(Principal.class.getName(), authenticate)\n                .authorizationGrantType(authenticationToken.getAuthorizationGrantType());\n\n        // ----- Access token -----\n        OAuth2TokenContext tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.ACCESS_TOKEN).build();\n        OAuth2Token generatedAccessToken = this.tokenGenerator.generate(tokenContext);\n        if (generatedAccessToken == null) {\n            OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                    "The token generator failed to generate the access token.", ERROR_URI);\n            throw new OAuth2AuthenticationException(error);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Generated access token");\n        }\n        OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n                generatedAccessToken.getTokenValue(), generatedAccessToken.getIssuedAt(),\n                generatedAccessToken.getExpiresAt(), tokenContext.getAuthorizedScopes());\n        if (generatedAccessToken instanceof ClaimAccessor) {\n            authorizationBuilder.token(accessToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, ((ClaimAccessor) generatedAccessToken).getClaims()));\n        } else {\n            authorizationBuilder.accessToken(accessToken);\n        }\n        // ----- Refresh token -----\n        OAuth2RefreshToken refreshToken = null;\n        if (registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.REFRESH_TOKEN) &&\n                // Do not issue refresh token to public client\n                !clientPrincipal.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.NONE)) {\n\n            tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.REFRESH_TOKEN).build();\n            OAuth2Token generatedRefreshToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedRefreshToken instanceof OAuth2RefreshToken)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the refresh token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated refresh token");\n            }\n            refreshToken = (OAuth2RefreshToken) generatedRefreshToken;\n            authorizationBuilder.refreshToken(refreshToken);\n        }\n\n        // ----- ID token -----\n        OidcIdToken idToken;\n        if (authorizedScopes.contains(OidcScopes.OPENID)) {\n            tokenContext = tokenContextBuilder\n                    .tokenType(ID_TOKEN_TOKEN_TYPE)\n                    // ID token customizer may need access to the access token and/or refresh token\n                    .authorization(authorizationBuilder.build())\n                    .build();\n            // @formatter:on\n            OAuth2Token generatedIdToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedIdToken instanceof Jwt)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the ID token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n\n            if (log.isTraceEnabled()) {\n                log.trace("Generated id token");\n            }\n\n            idToken = new OidcIdToken(generatedIdToken.getTokenValue(), generatedIdToken.getIssuedAt(),\n                    generatedIdToken.getExpiresAt(), ((Jwt) generatedIdToken).getClaims());\n            authorizationBuilder.token(idToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, idToken.getClaims()));\n        } else {\n            idToken = null;\n        }\n\n        OAuth2Authorization authorization = authorizationBuilder.build();\n\n        // Save the OAuth2Authorization\n        this.authorizationService.save(authorization);\n\n        Map<String, Object> additionalParameters = new HashMap<>(1);\n        if (idToken != null) {\n            // \u653e\u5165idToken\n            additionalParameters.put(OidcParameterNames.ID_TOKEN, idToken.getTokenValue());\n        }\n\n        return new OAuth2AccessTokenAuthenticationToken(registeredClient, clientPrincipal, accessToken, refreshToken, additionalParameters);\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684scope\n     *\n     * @param registeredClient \u5ba2\u6237\u7aef\n     * @param requestedScopes  \u8bf7\u6c42\u4e2d\u7684scope\n     * @return \u8ba4\u8bc1\u8fc7\u7684scope\n     */\n    private Set<String> getAuthorizedScopes(RegisteredClient registeredClient, Set<String> requestedScopes) {\n        // Default to configured scopes\n        Set<String> authorizedScopes = registeredClient.getScopes();\n        if (!ObjectUtils.isEmpty(requestedScopes)) {\n            Set<String> unauthorizedScopes = requestedScopes.stream()\n                    .filter(requestedScope -> !registeredClient.getScopes().contains(requestedScope))\n                    .collect(Collectors.toSet());\n            if (!ObjectUtils.isEmpty(unauthorizedScopes)) {\n                SecurityUtils.throwError(\n                        OAuth2ErrorCodes.INVALID_REQUEST,\n                        "OAuth 2.0 Parameter: " + OAuth2ParameterNames.SCOPE,\n                        ERROR_URI);\n            }\n\n            authorizedScopes = new LinkedHashSet<>(requestedScopes);\n        }\n\n        if (log.isTraceEnabled()) {\n            log.trace("Validated token request parameters");\n        }\n        return authorizedScopes;\n    }\n\n    /**\n     * \u83b7\u53d6\u8ba4\u8bc1\u8fc7\u7684\u7528\u6237\u4fe1\u606f\n     *\n     * @param authenticationToken converter\u6784\u5efa\u7684\u8ba4\u8bc1\u4fe1\u606f\uff0c\u8fd9\u91cc\u662f\u5305\u542b\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u7684\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    public Authentication getAuthenticatedUser(SmsCaptchaGrantAuthenticationToken authenticationToken) {\n        // \u83b7\u53d6\u624b\u673a\u53f7\u5bc6\u7801\n        Map<String, Object> additionalParameters = authenticationToken.getAdditionalParameters();\n        String phone = (String) additionalParameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_PHONE);\n        String smsCaptcha = (String) additionalParameters.get(SecurityConstants.OAUTH_PARAMETER_NAME_SMS_CAPTCHA);\n        // \u6784\u5efaUsernamePasswordAuthenticationToken\u901a\u8fc7AbstractUserDetailsAuthenticationProvider\u53ca\u5176\u5b50\u7c7b\u5bf9\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\u8fdb\u884c\u6821\u9a8c\n        // \u8fd9\u91cc\u5c31\u662f\u6211\u8bf4\u7684\u77ed\u4fe1\u9a8c\u8bc1\u4e0e\u5bc6\u7801\u6a21\u5f0f\u533a\u522b\u4e0d\u5927\uff0c\u5982\u679c\u662f\u77ed\u4fe1\u9a8c\u8bc1\u6a21\u5f0f\u5219\u5728SmsCaptchaLoginAuthenticationProvider\u4e2d\u52a0\u4e00\u4e2a\u6821\u9a8c\uff0c\n        // \u4f7f\u6846\u67b6\u652f\u6301\u624b\u673a\u53f7\u3001\u9a8c\u8bc1\u7801\u6821\u9a8c\uff0c\u53cd\u4e4b\u4e0d\u52a0\u5c31\u662f\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\n        UsernamePasswordAuthenticationToken unauthenticated = UsernamePasswordAuthenticationToken.unauthenticated(phone, smsCaptcha);\n        Authentication authenticate = null;\n        try {\n            authenticate = authenticationManager.authenticate(unauthenticated);\n        } catch (Exception e) {\n            SecurityUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    "\u8ba4\u8bc1\u5931\u8d25\uff1a\u624b\u673a\u53f7\u6216\u9a8c\u8bc1\u7801\u9519\u8bef.",\n                    ERROR_URI\n            );\n        }\n        return authenticate;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return SmsCaptchaGrantAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n    public void setTokenGenerator(OAuth2TokenGenerator<?> tokenGenerator) {\n        Assert.notNull(tokenGenerator, "tokenGenerator cannot be null");\n        this.tokenGenerator = tokenGenerator;\n    }\n\n    public void setAuthenticationManager(AuthenticationManager authenticationManager) {\n        Assert.notNull(authorizationService, "authenticationManager cannot be null");\n        this.authenticationManager = authenticationManager;\n    }\n\n    public void setAuthorizationService(OAuth2AuthorizationService authorizationService) {\n        Assert.notNull(authorizationService, "authorizationService cannot be null");\n        this.authorizationService = authorizationService;\n    }\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["provider\u7c7b\u4e2d\u7684\u4ee3\u7801\u6bd4\u8f83\u957f\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6838\u5fc3\u4ee3\u7801\u53ea\u6709\u4e0b\u8fb9\u51e0\u884c\uff0c\u4ece\u8bf7\u6c42\u53c2\u6570\u4e2d\u63d0\u53d6\u51fa\u624b\u673a\u53f7\u4e0e\u9a8c\u8bc1\u7801\uff0c\u6784\u5efa\u4e00\u4e2a",(0,r.jsx)(t.code,{children:"UsernamePasswordAuthenticationToken"}),"\uff0c\u7136\u540e\u4ea4\u7531",(0,r.jsx)(t.code,{children:"authenticationManager"}),"\u5bf9\u624b\u673a\u53f7\u548c\u9a8c\u8bc1\u7801\u8fdb\u884c\u6821\u9a8c\uff0c\u5199\u5230\u8fd9\u91cc\u53ef\u80fd\u6709\u4e9b\u8bfb\u8005\u4f1a\u6bd4\u8f83\u7591\u60d1\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u81ea\u5df1\u5199\u4e00\u4e2a\u6821\u9a8c\u6bd4\u8f83\u4e00\u4e0b\u6700\u5f00\u59cb\u83b7\u53d6\u7684\u9a8c\u8bc1\u7801\u4e0e\u53c2\u6570\u4e2d\u4f20\u8fc7\u6765\u7684\u9a8c\u8bc1\u7801\uff0c\u8fd9\u6837\u4e0d\u662f\u65b9\u4fbf\u5f88\u591a\u5417\uff1f\u8fd9\u91cc\u672c\u4eba\u9009\u62e9\u4ea4\u7531\u6846\u67b6\u9a8c\u8bc1\u662f\u56e0\u4e3a\u6846\u67b6\u5728\u83b7\u53d6\u5230\u7528\u6237\u4fe1\u606f\u540e\u4f1a\u5bf9\u7528\u6237\u4fe1\u606f\u505a\u4e00\u4e9b\u6821\u9a8c\uff0c\u6bd4\u5982\uff1a\u8d26\u53f7\u662f\u5426\u9501\u5b9a\uff0c\u662f\u5426\u8fc7\u671f\u3001\u662f\u5426\u542f\u7528\u7b49\uff0c\u90fd\u4f1a\u505a\u4e00\u4e2a\u6821\u9a8c\uff0c\u8fd9\u6837\u6211\u4eec\u7684",(0,r.jsx)(t.code,{children:"userService"}),"\u4e2d\u57fa\u672c\u53ea\u9700\u8981\u67e5\u51fa\u6765\u7528\u6237\u4fe1\u606f\u8fd4\u56de\u5373\u53ef\u3002\u5f53\u7136\uff0c\u8ba9",(0,r.jsx)(t.code,{children:"SmsCaptchaLoginAuthenticationProvider"}),"\u652f\u6301\u81ea\u5b9a\u4e49",(0,r.jsx)(t.code,{children:"grant_type"}),"\u9700\u8981\u53e6\u52a0\u5224\u65ad\uff0c\u7a0d\u540e\u6211\u4f1a\u7ed9\u51fa\u793a\u4f8b\u3002"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(8210).Z+"",width:"1412",height:"569"})}),"\n",(0,r.jsxs)(t.p,{children:["\u8fd9\u91cc\u4f7f\u7528",(0,r.jsx)(t.code,{children:"try catch"}),"\u6355\u83b7\u540e\u629b\u51fa",(0,r.jsx)(t.code,{children:"OAuth2AuthenticationException"}),"\u4e0d\u662f\u8131\u88e4\u5b50\u653e\u5c41\u554a\uff0c \u662f\u4e3a\u4e86\u8ba9",(0,r.jsx)(t.code,{children:"/oauth2/token"}),"\u63a5\u53e3\u53ef\u4ee5\u83b7\u53d6\u5177\u4f53\u5f02\u5e38\u7136\u540e\u5199\u56dejson\uff0c\u5982\u4e0b"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(94239).Z+"",width:"1512",height:"801"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(27376).Z+"",width:"1512",height:"699"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(5926).Z+"",width:"1448",height:"649"})}),"\n",(0,r.jsxs)(t.p,{children:["\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u540e\u662f\u5199\u56de\u4e86\u5f02\u5e38\u4fe1\u606f\uff0c\u5982\u679c\u4e0d\u81ea\u5df1\u624b\u52a8\u629b\u51fa\u5f02\u5e38\u5219\u4f1a\u88ab",(0,r.jsx)(t.code,{children:"AbstractAuthenticationProcessingFilter"}),"\u5904\u7406\uff0c\u6700\u7ec8\u54cd\u5e94\u4e00\u4e2a\u767b\u9646\u9875\u9762\u3002"]}),"\n",(0,r.jsxs)(t.h3,{id:"4-\u6ce8\u610f\u5230\u8fd9\u91cc\u5982\u679c\u4e0d\u5728smscaptchaloginauthenticationprovider\u53e6\u505a\u5904\u7406\u5c31\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5bc6\u7801\u6a21\u5f0f\u4e86\u5bc6\u7801\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u6210\u4e86",children:["4. \u6ce8\u610f\uff0c\u5230\u8fd9\u91cc\u5982\u679c\u4e0d\u5728",(0,r.jsx)(t.code,{children:"SmsCaptchaLoginAuthenticationProvider"}),"\u53e6\u505a\u5904\u7406\u5c31\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5bc6\u7801\u6a21\u5f0f\u4e86\uff0c\u5bc6\u7801\u6a21\u5f0f\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002"]}),"\n",(0,r.jsxs)(t.h3,{id:"5-\u4fee\u6539smscaptchaloginauthenticationprovider\u4f7f\u5176\u652f\u6301\u81ea\u5b9a\u4e49grant_type",children:["5. \u4fee\u6539",(0,r.jsx)(t.code,{children:"SmsCaptchaLoginAuthenticationProvider"}),"\u4f7f\u5176\u652f\u6301\u81ea\u5b9a\u4e49",(0,r.jsx)(t.code,{children:"grant_type"})]}),"\n",(0,r.jsxs)(t.p,{children:["\u5224\u65ad\u4e2d\u6dfb\u52a0",(0,r.jsx)(t.code,{children:"Objects.equals(grantType, SecurityConstants.GRANT_TYPE_SMS_CODE)"}),"\u6761\u4ef6\uff0c\u5982\u679c\u8bfb\u8005\u662f\u7b2c\u4e00\u6b21\u770b\u5230\u8be5\u6587\u7ae0\u4e0d\u60f3\u8981\u56fe\u5f62\u9a8c\u8bc1\u7801\u6821\u9a8c\uff0c\u8bf7\u76f4\u63a5\u7ee7\u627f",(0,r.jsx)(t.code,{children:"DaoAuthenticationProvider"}),"\uff0c\u7136\u540e\u91cd\u5199",(0,r.jsx)(t.code,{children:"additionalAuthenticationChecks"}),"\u65b9\u6cd5\uff0c\u5728\u91cc\u8fb9\u6dfb\u52a0\u77ed\u4fe1\u9a8c\u8bc1\u7801\u903b\u8f91\uff1b\u91cd\u5199\u6784\u9020\u65b9\u6cd5\uff0c\u8bbe\u7f6e",(0,r.jsx)(t.code,{children:"passwordEncoder"}),"\u548c",(0,r.jsx)(t.code,{children:"userDetailsService"}),"\u3002\u4f46\u662f\u5f3a\u70c8\u5efa\u8bae\u8bfb\u8005\u53bb\u770b\u4e00\u4e0b\u672c\u7cfb\u5217\u7684",(0,r.jsx)(t.a,{href:"https://juejin.cn/post/7245538214114492474",children:"Spring Authorization Server\u5165\u95e8 (\u5341) \u6dfb\u52a0\u77ed\u4fe1\u9a8c\u8bc1\u7801\u65b9\u5f0f\u767b\u5f55"}),"\u548c",(0,r.jsx)(t.a,{href:"https://juejin.cn/post/7242476048005709879",children:"Spring Authorization Server\u5165\u95e8 (\u4e03) \u767b\u5f55\u6dfb\u52a0\u56fe\u5f62\u9a8c\u8bc1\u7801"}),"\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.authorization.sms;\n\nimport com.example.authorization.captcha.CaptchaAuthenticationProvider;\nimport com.example.constant.SecurityConstants;\nimport com.example.exception.InvalidCaptchaException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport java.util.Objects;\n\n/**\n * \u77ed\u4fe1\u9a8c\u8bc1\u7801\u6821\u9a8c\u5b9e\u73b0\n *\n * @author vains\n */\n@Slf4j\n@Component\npublic class SmsCaptchaLoginAuthenticationProvider extends CaptchaAuthenticationProvider {\n\n    /**\n     * \u5229\u7528\u6784\u9020\u65b9\u6cd5\u5728\u901a\u8fc7{@link Component}\u6ce8\u89e3\u521d\u59cb\u5316\u65f6\n     * \u6ce8\u5165UserDetailsService\u548cpasswordEncoder\uff0c\u7136\u540e\n     * \u8bbe\u7f6e\u8c03\u7528\u7236\u7c7b\u5173\u4e8e\u8fd9\u4e24\u4e2a\u5c5e\u6027\u7684set\u65b9\u6cd5\u8bbe\u7f6e\u8fdb\u53bb\n     *\n     * @param userDetailsService \u7528\u6237\u670d\u52a1\uff0c\u7ed9\u6846\u67b6\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\n     * @param passwordEncoder    \u5bc6\u7801\u89e3\u6790\u5668\uff0c\u7528\u4e8e\u52a0\u5bc6\u548c\u6821\u9a8c\u5bc6\u7801\n     */\n    public SmsCaptchaLoginAuthenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {\n        super(userDetailsService, passwordEncoder);\n    }\n\n    @Override\n    protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {\n        log.info("Authenticate sms captcha...");\n\n        if (authentication.getCredentials() == null) {\n            this.logger.debug("Failed to authenticate since no credentials provided");\n            throw new BadCredentialsException("The sms captcha cannot be empty.");\n        }\n\n        // \u83b7\u53d6\u5f53\u524drequest\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        if (requestAttributes == null) {\n            throw new InvalidCaptchaException("Failed to get the current request.");\n        }\n        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\n\n        // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u65b9\u5f0f\n        String loginType = request.getParameter("loginType");\n        // \u83b7\u53d6grant_type\n        String grantType = request.getParameter("grant_type");\n        // \u77ed\u4fe1\u767b\u5f55\u548c\u81ea\u5b9a\u4e49\u77ed\u4fe1\u8ba4\u8bc1grant type\u4f1a\u8d70\u4e0b\u65b9\u8ba4\u8bc1\n        // \u5982\u679c\u662f\u81ea\u5b9a\u4e49\u5bc6\u7801\u6a21\u5f0f\u5219\u4e0b\u65b9\u7684\u8ba4\u8bc1\u5224\u65ad\u53ea\u8981\u5224\u65ad\u4e0bloginType\u5373\u53ef\n        // if (Objects.equals(loginType, SecurityConstants.SMS_LOGIN_TYPE)) {}\n        if (Objects.equals(loginType, SecurityConstants.SMS_LOGIN_TYPE)\n            || Objects.equals(grantType, SecurityConstants.GRANT_TYPE_SMS_CODE)) {\n            // \u83b7\u53d6\u5b58\u5165session\u7684\u9a8c\u8bc1\u7801(UsernamePasswordAuthenticationToken\u7684principal\u4e2d\u73b0\u5728\u5b58\u5165\u7684\u662f\u624b\u673a\u53f7)\n            String smsCaptcha = (String) request.getSession(Boolean.FALSE).getAttribute((String) authentication.getPrincipal());\n            // \u6821\u9a8c\u8f93\u5165\u7684\u9a8c\u8bc1\u7801\u662f\u5426\u6b63\u786e(UsernamePasswordAuthenticationToken\u7684credentials\u4e2d\u73b0\u5728\u5b58\u5165\u7684\u662f\u8f93\u5165\u7684\u9a8c\u8bc1\u7801)\n            if (!Objects.equals(smsCaptcha, authentication.getCredentials())) {\n                throw new BadCredentialsException("The sms captcha is incorrect.");\n            }\n        // \u5728\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u62d3\u5c55\u5176\u5b83\u767b\u5f55\u65b9\u5f0f\uff0c\u6bd4\u5982\u90ae\u7bb1\u767b\u5f55\u4ec0\u4e48\u7684\n        } else {\n            log.info("Not sms captcha loginType, exit.");\n            // \u5176\u5b83\u8c03\u7528\u7236\u7c7b\u9ed8\u8ba4\u5b9e\u73b0\u7684\u5bc6\u7801\u65b9\u5f0f\u767b\u5f55\n            super.additionalAuthenticationChecks(userDetails, authentication);\n        }\n\n        log.info("Authenticated sms captcha.");\n    }\n}\n'})}),"\n",(0,r.jsxs)(t.h3,{id:"6-\u914d\u7f6eauthorizationconfig\u5c06converter\u548cprovider\u6dfb\u52a0\u81f3\u7aef\u70b9\u5185",children:["6. \u914d\u7f6e",(0,r.jsx)(t.code,{children:"AuthorizationConfig"}),"\uff0c\u5c06",(0,r.jsx)(t.code,{children:"converter"}),"\u548c",(0,r.jsx)(t.code,{children:"provider"}),"\u6dfb\u52a0\u81f3\u7aef\u70b9\u5185"]}),"\n",(0,r.jsx)(t.p,{children:"\u8be6\u60c5\u8bf7\u770b\u6700\u540e\u51e0\u884c\u7684\u6ce8\u91ca"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'/**\n * \u914d\u7f6e\u7aef\u70b9\u7684\u8fc7\u6ee4\u5668\u94fe\n *\n * @param http spring security\u6838\u5fc3\u914d\u7f6e\u7c7b\n * @return \u8fc7\u6ee4\u5668\u94fe\n * @throws Exception \u629b\u51fa\n */\n@Bean\npublic SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http,\n                                                                  RegisteredClientRepository registeredClientRepository,\n                                                                  AuthorizationServerSettings authorizationServerSettings) throws Exception {\n    // \u914d\u7f6e\u9ed8\u8ba4\u7684\u8bbe\u7f6e\uff0c\u5ffd\u7565\u8ba4\u8bc1\u7aef\u70b9\u7684csrf\u6821\u9a8c\n    OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\n\n    // \u65b0\u5efa\u8bbe\u5907\u7801converter\u548cprovider\n    DeviceClientAuthenticationConverter deviceClientAuthenticationConverter =\n            new DeviceClientAuthenticationConverter(\n                    authorizationServerSettings.getDeviceAuthorizationEndpoint());\n    DeviceClientAuthenticationProvider deviceClientAuthenticationProvider =\n            new DeviceClientAuthenticationProvider(registeredClientRepository);\n\n\n    http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n            // \u5f00\u542fOpenID Connect 1.0\u534f\u8bae\u76f8\u5173\u7aef\u70b9\n            .oidc(Customizer.withDefaults())\n            // \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7528\u6237\u786e\u8ba4\u6388\u6743\u9875\n            .authorizationEndpoint(authorizationEndpoint -> authorizationEndpoint.consentPage(CUSTOM_CONSENT_PAGE_URI))\n            // \u8bbe\u7f6e\u8bbe\u5907\u7801\u7528\u6237\u9a8c\u8bc1url(\u81ea\u5b9a\u4e49\u7528\u6237\u9a8c\u8bc1\u9875)\n            .deviceAuthorizationEndpoint(deviceAuthorizationEndpoint ->\n                    deviceAuthorizationEndpoint.verificationUri("/activate")\n            )\n            // \u8bbe\u7f6e\u9a8c\u8bc1\u8bbe\u5907\u7801\u7528\u6237\u786e\u8ba4\u9875\u9762\n            .deviceVerificationEndpoint(deviceVerificationEndpoint ->\n                    deviceVerificationEndpoint.consentPage(CUSTOM_CONSENT_PAGE_URI)\n            )\n            .clientAuthentication(clientAuthentication ->\n                    // \u5ba2\u6237\u7aef\u8ba4\u8bc1\u6dfb\u52a0\u8bbe\u5907\u7801\u7684converter\u548cprovider\n                    clientAuthentication\n                            .authenticationConverter(deviceClientAuthenticationConverter)\n                            .authenticationProvider(deviceClientAuthenticationProvider)\n            );\n    http\n            // \u5f53\u672a\u767b\u5f55\u65f6\u8bbf\u95ee\u8ba4\u8bc1\u7aef\u70b9\u65f6\u91cd\u5b9a\u5411\u81f3login\u9875\u9762\n            .exceptionHandling((exceptions) -> exceptions\n                    .defaultAuthenticationEntryPointFor(\n                            new LoginUrlAuthenticationEntryPoint("/login"),\n                            new MediaTypeRequestMatcher(MediaType.TEXT_HTML)\n                    )\n            )\n            // \u5904\u7406\u4f7f\u7528access token\u8bbf\u95ee\u7528\u6237\u4fe1\u606f\u7aef\u70b9\u548c\u5ba2\u6237\u7aef\u6ce8\u518c\u7aef\u70b9\n            .oauth2ResourceServer((resourceServer) -> resourceServer\n                    .jwt(Customizer.withDefaults()));\n\n    // \u81ea\u5b9a\u4e49\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\u8f6c\u6362\u5668\n    SmsCaptchaGrantAuthenticationConverter converter = new SmsCaptchaGrantAuthenticationConverter();\n    // \u81ea\u5b9a\u4e49\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\n    SmsCaptchaGrantAuthenticationProvider provider = new SmsCaptchaGrantAuthenticationProvider();\n    http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n            // \u8ba9\u8ba4\u8bc1\u670d\u52a1\u5668\u5143\u6570\u636e\u4e2d\u6709\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u5f0f\n            .authorizationServerMetadataEndpoint(metadata -> metadata.authorizationServerMetadataCustomizer(customizer -> customizer.grantType(SecurityConstants.GRANT_TYPE_SMS_CODE)))\n            // \u6dfb\u52a0\u81ea\u5b9a\u4e49grant_type\u2014\u2014\u77ed\u4fe1\u8ba4\u8bc1\u767b\u5f55\n            .tokenEndpoint(tokenEndpoint -> tokenEndpoint\n                    .accessTokenRequestConverter(converter)\n                    .authenticationProvider(provider));\n\n    DefaultSecurityFilterChain build = http.build();\n\n    // \u4ece\u6846\u67b6\u4e2d\u83b7\u53d6provider\u4e2d\u6240\u9700\u7684bean\n    OAuth2TokenGenerator<?> tokenGenerator = http.getSharedObject(OAuth2TokenGenerator.class);\n    AuthenticationManager authenticationManager = http.getSharedObject(AuthenticationManager.class);\n    OAuth2AuthorizationService authorizationService = http.getSharedObject(OAuth2AuthorizationService.class);\n    // \u4ee5\u4e0a\u4e09\u4e2abean\u5728build()\u65b9\u6cd5\u4e4b\u540e\u8c03\u7528\u662f\u56e0\u4e3a\u8c03\u7528build\u65b9\u6cd5\u65f6\u6846\u67b6\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u8fd9\u4e9b\u7c7b\uff0c\n    // \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u5219\u521d\u59cb\u5316\u4e00\u4e2a\u5b9e\u4f8b\u653e\u5165SharedObject\u4e2d\uff0c\u6240\u4ee5\u8981\u5728build\u65b9\u6cd5\u8c03\u7528\u4e4b\u540e\u83b7\u53d6\n    // \u5728\u901a\u8fc7set\u65b9\u6cd5\u8bbe\u7f6e\u8fdbprovider\u4e2d\uff0c\u4f46\u662f\u5982\u679c\u5728build\u65b9\u6cd5\u4e4b\u540e\u8c03\u7528authenticationProvider(provider)\n    // \u6846\u67b6\u4f1a\u63d0\u793aunsupported_grant_type\uff0c\u56e0\u4e3a\u5df2\u7ecf\u521d\u59cb\u5316\u5b8c\u4e86\uff0c\u5728\u6dfb\u52a0\u5c31\u4e0d\u4f1a\u751f\u6548\u4e86\n    provider.setTokenGenerator(tokenGenerator);\n    provider.setAuthorizationService(authorizationService);\n    provider.setAuthenticationManager(authenticationManager);\n\n    return build;\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["\u8ba9\u8ba4\u8bc1\u670d\u52a1\u5668\u5143\u6570\u636e\u4e2d\u6709\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u65b9\u5f0f\u8fd9\u4e2a\u914d\u7f6e\u662f\u4e3a\u4e86\u8bbf\u95ee",(0,r.jsx)(t.code,{children:"/.well-known/oauth-authorization-server"}),"\u65f6\u8fd4\u56de\u7684\u5143\u6570\u636e\u4e2d\u6709\u54b1\u4eec\u81ea\u5b9a\u7684",(0,r.jsx)(t.code,{children:"grant type"})]}),"\n",(0,r.jsxs)(t.h3,{id:"7-\u4fee\u6539captchaauthenticationprovider\u7c7b\u7684\u5224\u65ad\u4fee\u6539\u4e3a\u4e0d\u662f\u767b\u5f55\u9875\u9762\u7684\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u4e0d\u5904\u7406\u53ef\u9009",children:["7. \u4fee\u6539",(0,r.jsx)(t.code,{children:"CaptchaAuthenticationProvider"}),"\u7c7b\u7684\u5224\u65ad\uff0c\u4fee\u6539\u4e3a\u201c\u4e0d\u662f\u767b\u5f55\u9875\u9762\u7684\u8d26\u53f7\u5bc6\u7801\u767b\u5f55\u4e0d\u5904\u7406\u201d(\u53ef\u9009)"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5982\u679c\u81ea\u5b9a\u4e49\u7684 ",(0,r.jsx)(t.code,{children:"grant type"})," \u6a21\u5f0f\u4e5f\u9700\u8981\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801\u7684\u53ef\u4ee5\u4e0d\u4fee\u6539\uff0c\u5ffd\u7565\u672c\u6761\uff08\u672c\u4eba\u8fd9\u91cc\u4fee\u6539\u662f\u56e0\u4e3a\u4f7f\u7528postman\u6d4b\u8bd5\uff0c\u4e3a\u4e86\u65b9\u4fbf\u76f4\u63a5\u5c4f\u853d\u4e86\uff09"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.authorization.captcha;\n\nimport com.example.constant.SecurityConstants;\nimport com.example.exception.InvalidCaptchaException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.ObjectUtils;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport java.util.Objects;\n\n/**\n * \u9a8c\u8bc1\u7801\u6821\u9a8c\n * \u6ce8\u5165ioc\u4e2d\u66ff\u6362\u539f\u5148\u7684DaoAuthenticationProvider\n * \u5728authenticate\u65b9\u6cd5\u4e2d\u6dfb\u52a0\u6821\u9a8c\u9a8c\u8bc1\u7801\u7684\u903b\u8f91\n * \u6700\u540e\u8c03\u7528\u7236\u7c7b\u7684authenticate\u65b9\u6cd5\u5e76\u8fd4\u56de\n *\n * @author vains\n */\n@Slf4j\npublic class CaptchaAuthenticationProvider extends DaoAuthenticationProvider {\n\n    /**\n     * \u5229\u7528\u6784\u9020\u65b9\u6cd5\u5728\u901a\u8fc7{@link Component}\u6ce8\u89e3\u521d\u59cb\u5316\u65f6\n     * \u6ce8\u5165UserDetailsService\u548cpasswordEncoder\uff0c\u7136\u540e\n     * \u8bbe\u7f6e\u8c03\u7528\u7236\u7c7b\u5173\u4e8e\u8fd9\u4e24\u4e2a\u5c5e\u6027\u7684set\u65b9\u6cd5\u8bbe\u7f6e\u8fdb\u53bb\n     *\n     * @param userDetailsService \u7528\u6237\u670d\u52a1\uff0c\u7ed9\u6846\u67b6\u63d0\u4f9b\u7528\u6237\u4fe1\u606f\n     * @param passwordEncoder    \u5bc6\u7801\u89e3\u6790\u5668\uff0c\u7528\u4e8e\u52a0\u5bc6\u548c\u6821\u9a8c\u5bc6\u7801\n     */\n    public CaptchaAuthenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {\n        super.setPasswordEncoder(passwordEncoder);\n        super.setUserDetailsService(userDetailsService);\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        log.info("Authenticate captcha...");\n\n        // \u83b7\u53d6\u5f53\u524drequest\n        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n        if (requestAttributes == null) {\n            throw new InvalidCaptchaException("Failed to get the current request.");\n        }\n        HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\n\n        // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u65b9\u5f0f\n        String loginType = request.getParameter("loginType");\n        if (!Objects.equals(loginType, SecurityConstants.PASSWORD_LOGIN_TYPE)) {\n            // \u53ea\u8981\u4e0d\u662f\u5bc6\u7801\u767b\u5f55\u90fd\u4e0d\u9700\u8981\u6821\u9a8c\u56fe\u5f62\u9a8c\u8bc1\u7801\n            log.info("It isn\'t necessary captcha authenticate.");\n            return super.authenticate(authentication);\n        }\n\n        // \u83b7\u53d6\u53c2\u6570\u4e2d\u7684\u9a8c\u8bc1\u7801\n        String code = request.getParameter("code");\n        if (ObjectUtils.isEmpty(code)) {\n            throw new InvalidCaptchaException("The captcha cannot be empty.");\n        }\n\n        // \u83b7\u53d6session\u4e2d\u5b58\u50a8\u7684\u9a8c\u8bc1\u7801\n        Object sessionCaptcha = request.getSession(Boolean.FALSE).getAttribute("captcha");\n        if (sessionCaptcha instanceof String sessionCode) {\n            if (!sessionCode.equalsIgnoreCase(code)) {\n                throw new InvalidCaptchaException("The captcha is incorrect.");\n            }\n        } else {\n            throw new InvalidCaptchaException("The captcha is abnormal. Obtain it again.");\n        }\n\n        log.info("Captcha authenticated.");\n        return super.authenticate(authentication);\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"\u56db\u6d4b\u8bd5",children:"\u56db\u3001\u6d4b\u8bd5"}),"\n",(0,r.jsxs)(t.h3,{id:"1-\u5728postman\u4e2d\u8bf7\u6c42getsmscaptcha\u63a5\u53e3",children:["1. \u5728postman\u4e2d\u8bf7\u6c42",(0,r.jsx)(t.code,{children:"/getSmsCaptcha"}),"\u63a5\u53e3"]}),"\n",(0,r.jsxs)(t.p,{children:["\u56e0\u4e3a\u8fd9\u91cc\u662f\u901a\u8fc7",(0,r.jsx)(t.code,{children:"session"}),"\u8bbe\u7f6e\u7684\u9a8c\u8bc1\u7801\uff0c\u6240\u4ee5\u8bbe\u7f6e\u4e86\u4e00\u4e0bcookie"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(94433).Z+"",width:"1381",height:"665"})}),"\n",(0,r.jsx)(t.h3,{id:"2-\u7ec4\u88c5\u53c2\u6570\u8bf7\u6c42oauth2token\u63a5\u53e3",children:"2. \u7ec4\u88c5\u53c2\u6570\u8bf7\u6c42/oauth2/token\u63a5\u53e3"}),"\n",(0,r.jsx)(t.p,{children:"\u8bf7\u6c42\u793a\u4f8b"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"curl --location --request POST 'http://127.0.0.1:8080/oauth2/token' \\\n    --header 'Authorization: Basic bWVzc2FnaW5nLWNsaWVudDoxMjM0NTY=' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --header 'Cookie: JSESSIONID=FE40DC96D384EE92DB3A48A3CA0B975A' \\\n    --data-urlencode 'grant_type=urn:ietf:params:oauth:grant-type:sms_code' \\\n    --data-urlencode 'phone=admin' \\\n    --data-urlencode 'sms_captcha=123' \\\n    --data-urlencode 'scope=message.write'\n"})}),"\n",(0,r.jsx)(t.p,{children:"\u8981\u8bb0\u5f97\u6dfb\u52a0basic\u8bf7\u6c42\u5934"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(40829).Z+"",width:"1390",height:"325"})}),"\n",(0,r.jsx)(t.p,{children:"\u53ef\u4ee5\u770b\u5230\u63a5\u53e3\u6210\u529f\u8fd4\u56deaccess_token\u3001refresh_token\u548cid_token\u3002"}),"\n",(0,r.jsx)(t.h3,{id:"3-\u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope",children:"3. \u8f93\u5165\u4e00\u4e2a\u672a\u914d\u7f6e\u7684scope"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(15469).Z+"",width:"1388",height:"615"})}),"\n",(0,r.jsx)(t.p,{children:"\u63d0\u793a\u5f02\u5e38\u3002"}),"\n",(0,r.jsx)(t.h3,{id:"4-\u9519\u8bef\u9a8c\u8bc1\u7801",children:"4. \u9519\u8bef\u9a8c\u8bc1\u7801"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"img",src:n(74900).Z+"",width:"1380",height:"581"})}),"\n",(0,r.jsx)(t.p,{children:"\u63d0\u793a\u5f02\u5e38\u3002"}),"\n",(0,r.jsx)(t.h2,{id:"\u5199\u5728\u6700\u540e",children:"\u5199\u5728\u6700\u540e"}),"\n",(0,r.jsx)(t.p,{children:"\u672c\u6587\u5185\u5bb9\u8f83\u591a\uff0c\u4ee3\u7801\u8d34\u7684\u4e5f\u6bd4\u8f83\u591a\uff0c\u5728\u5199\u6587\u7ae0\u7684\u65f6\u5019\u6539\u4e86\u633a\u591a\u6b21\u4ee3\u7801\uff0c\u5982\u679c\u6709\u903b\u8f91\u9519\u8bef\u6216\u8005\u9519\u8bef\u4ee3\u7801\u8bf7\u6c42\u5728\u8bc4\u8bba\u533a\u7559\u8a00\uff0c\u6709\u4ec0\u4e48\u7591\u60d1\u4e5f\u53ef\u5728\u8bc4\u8bba\u533a\u7559\u8a00\uff0c\u6211\u4f1a\u5c3d\u91cf\u53bb\u89e3\u51b3\u5927\u5bb6\u7684\u95ee\u9898\u3002"}),"\n",(0,r.jsxs)(t.p,{children:["\u4ee3\u7801\u5df2\u63d0\u4ea4\u81f3Gitee\uff1a",(0,r.jsx)(t.a,{href:"https://gitee.com/vains-Sofia/authorization-example",children:"https://gitee.com/vains-Sofia/authorization-example"})]}),"\n",(0,r.jsxs)(t.p,{children:["\u5176\u4e2d",(0,r.jsx)(t.code,{children:"custom_grant_type"}),"\u5206\u652f\u662f\u672c\u6587\u7ae0\u6d89\u53ca\u5230\u7684\u4ee3\u7801\uff0c\u5927\u5bb6\u53ef\u4ee5\u67e5\u770b\u4e00\u4e0b\u53d8\u52a8\u8bb0\u5f55\u770b\u770b\u6539\u4e86\u54ea\u4e9b\u6587\u4ef6\uff0c\u73b0\u5728\u90fd\u5df2\u7ecf\u901a\u8fc7PR\u7684\u65b9\u5f0f\u5408\u5e76\u5230\u4e3b\u5206\u652f\u4e86\u3002",(0,r.jsx)(t.code,{children:"custom_grant_type"}),"\u73b0\u5728\u8fd8\u4fdd\u7559\u7740\u3002"]})]})}function p(e={}){const{wrapper:t}={...(0,i.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11994:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-1-d1beaa2a4f2023b5af3a0a69f9a00110.webp"},74900:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-10-aad40d32902fc989c47aae7fb1b3985c.webp"},16467:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-2-9cfeb9aa96eee0c58465922d4e7be255.webp"},8210:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-3-3acf2696c74ba5e3f34ac3011e1ec0e0.webp"},94239:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-4-28dc984c2e9ee94bc85994b4d8cf3774.webp"},27376:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-5-76219ea9ef064d4d4abd0ac1e7daf6ff.webp"},5926:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-6-6e9cb2ba7da58a1e7f6ae24c6cd58451.webp"},94433:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-7-41e9a5d9b5b9ed1a2dc676b3347b417b.webp"},40829:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-8-311bacfa643982f7a637bcec841bb62a.webp"},15469:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/11-9-84a3b38265f52cc51e2a48e614ec85f4.webp"},11151:(e,t,n)=>{n.d(t,{ah:()=>o});var r=n(67294);const i=r.createContext({});function o(e){const t=r.useContext(i);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);
"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[39830],{37543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(74848),i=n(28453);const l={},o=void 0,s={id:"influxdb/Influxdb-Export-To-Timescaledb",title:"Influxdb-Export-To-Timescaledb",description:"\u4f7f\u7528outflux \u5bfc\u5165influxdb\u7684\u6570\u636e\u5230timescaledb",source:"@site/middleware/influxdb/3-Influxdb-Export-To-Timescaledb.md",sourceDirName:"influxdb",slug:"/influxdb/Influxdb-Export-To-Timescaledb",permalink:"/middleware/influxdb/Influxdb-Export-To-Timescaledb",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/middleware/influxdb/3-Influxdb-Export-To-Timescaledb.md",tags:[],version:"current",lastUpdatedBy:"Lorchr",lastUpdatedAt:1746798479e3,sidebarPosition:3,frontMatter:{},sidebar:"middleware",previous:{title:"Influxdb-Retention-Policy",permalink:"/middleware/influxdb/Influxdb-Retention-Policy"},next:{title:"Kafka",permalink:"/middleware/category/kafka"}},r={},d=[{value:"\u4f7f\u7528<code>outflux</code> \u5bfc\u5165<code>influxdb</code>\u7684\u6570\u636e\u5230<code>timescaledb</code>",id:"\u4f7f\u7528outflux-\u5bfc\u5165influxdb\u7684\u6570\u636e\u5230timescaledb",level:2},{value:"1. \u73af\u5883\u51c6\u5907",id:"1-\u73af\u5883\u51c6\u5907",level:2},{value:"2. Influxdb \u6570\u636e\u5bfc\u5165",id:"2-influxdb-\u6570\u636e\u5bfc\u5165",level:2},{value:"3. Schema \u8fc1\u79fb",id:"3-schema-\u8fc1\u79fb",level:2},{value:"4. \u6570\u636e\u8fc1\u79fb",id:"4-\u6570\u636e\u8fc1\u79fb",level:2},{value:"5. \u53c2\u8003\u8d44\u6599",id:"5-\u53c2\u8003\u8d44\u6599",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.h2,{id:"\u4f7f\u7528outflux-\u5bfc\u5165influxdb\u7684\u6570\u636e\u5230timescaledb",children:["\u4f7f\u7528",(0,a.jsx)(t.code,{children:"outflux"})," \u5bfc\u5165",(0,a.jsx)(t.code,{children:"influxdb"}),"\u7684\u6570\u636e\u5230",(0,a.jsx)(t.code,{children:"timescaledb"})]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"influxdb"})," \u4ee5\u53ca ",(0,a.jsx)(t.code,{children:"timescaledb"})," \u90fd\u662f\u4e0d\u9519\u7684\u65f6\u5e8f\u6570\u636e\u5e93\uff0c",(0,a.jsx)(t.code,{children:"timescaledb"})," \u56e2\u961f\u63d0\u4f9b\u4e86\u76f4\u63a5\u4ece ",(0,a.jsx)(t.code,{children:"influxdb"})," \u5bfc\u5165"]}),"\n",(0,a.jsx)(t.h2,{id:"1-\u73af\u5883\u51c6\u5907",children:"1. \u73af\u5883\u51c6\u5907"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"docker-compose"})," \u6587\u4ef6"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:'version: "3"\nservices:\n    timescaledb:\n      image: timescale/timescaledb-postgis:latest-pg10\n      ports:\n      - "5432:5432"\n      environment:\n      - "POSTGRES_PASSWORD=dalong"\n    influxdb:\n      image: influxdb\n      ports: \n      - "8086:8086"\n'})}),"\n",(0,a.jsx)(t.h2,{id:"2-influxdb-\u6570\u636e\u5bfc\u5165",children:"2. Influxdb \u6570\u636e\u5bfc\u5165"}),"\n",(0,a.jsxs)(t.p,{children:["\u4e0b\u8f7d\u6d4b\u8bd5\u6570\u636e\n\u6ce8\u610f\u9700\u8981\u5728\u5bb9\u5668\u4e2d\u64cd\u4f5c ",(0,a.jsx)(t.code,{children:"docker-compose exec influxdb sh"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"wget https://timescaledata.blob.core.windows.net/datasets/outflux_taxi.txt\n"})}),"\n",(0,a.jsx)(t.p,{children:"\u5bfc\u5165"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"influx -import -path=./outflux_taxi.txt -database=outflux_tutorial\n"})}),"\n",(0,a.jsx)(t.h2,{id:"3-schema-\u8fc1\u79fb",children:"3. Schema \u8fc1\u79fb"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:'./outflux schema-transfer outflux_tutorial taxi --input-server=http://localhost:8086 --output-conn="dbname=postgres user=postgres password=dalong"\n'})}),"\n",(0,a.jsx)(t.p,{children:"\u6548\u679c"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"2019/04/12 11:03:55 Selected input database: outflux_tutorial\n2019/04/12 11:03:55 Overriding PG environment variables for connection with: dbname=postgres user=postgres password=dalong\n2019/04/12 11:03:55 pipe_taxi starting execution\n2019/04/12 11:03:55 Discovering influx schema for measurement: taxi\n2019/04/12 11:03:55 Discovered: DataSet { Name: taxi, Columns: [Column { Name: time, DataType: IDRFTimestamp} Column { Name: location_id, DataType: IDRFString} Column { Name: rating, DataType: IDRFString} Column { Name: vendor, DataType: IDRFString} Column { Name: fare, DataType: IDRFDouble}Column { Name: mta_tax, DataType: IDRFDouble} Column { Name: tip, DataType: IDRFDouble} Column { Name: tolls, DataType: IDRFDouble}], Time Column: time }\n2019/04/12 11:03:55 Selected Schema Strategy: CreateIfMissing\n2019/04/12 11:03:55 existing hypertable 'taxi' is partitioned properly\n2019/04/12 11:03:55 No data transfer will occur\n2019/04/12 11:03:55 Schema Transfer complete in: 0.079 seconds\n"})}),"\n",(0,a.jsx)(t.h2,{id:"4-\u6570\u636e\u8fc1\u79fb",children:"4. \u6570\u636e\u8fc1\u79fb"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:'./outflux migrate outflux_tutorial taxi --input-server=http://localhost:8086 --output-conn="dbname=postgres user=postgres password=dalong" --schema-strategy=DropAndCreate\n'})}),"\n",(0,a.jsx)(t.p,{children:"\u6548\u679c"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:'2019/04/12 11:04:33 All pipelines scheduled\n2019/04/12 11:04:33 Overriding PG environment variables for connection with: dbname=postgres user=postgres password=dalong\n2019/04/12 11:04:33 pipe_taxi starting execution\n2019/04/12 11:04:33 Discovering influx schema for measurement: taxi\n2019/04/12 11:04:33 Discovered: DataSet { Name: taxi, Columns: [Column { Name: time, DataType: IDRFTimestamp} Column { Name: location_id, DataType: IDRFString} Column { Name: rating, DataType: IDRFString} Column { Name: vendor, DataType: IDRFString} Column { Name: fare, DataType: IDRFDouble}Column { Name: mta_tax, DataType: IDRFDouble} Column { Name: tip, DataType: IDRFDouble} Column { Name: tolls, DataType: IDRFDouble}], Time Column: time }\n2019/04/12 11:04:33 Selected Schema Strategy: DropAndCreate\n2019/04/12 11:04:33 Table taxi exists, dropping it\n2019/04/12 11:04:33 Executing: DROP TABLE taxi\n2019/04/12 11:04:33 Table taxi ready to be created\n2019/04/12 11:04:33 Creating table with:\n CREATE TABLE "taxi"("time" TIMESTAMP, "location_id" TEXT, "rating" TEXT, "vendor" TEXT, "fare" FLOAT, "mta_tax" FLOAT, "tip" FLOAT, "tolls" FLOAT\n)\n2019/04/12 11:04:33 Preparing TimescaleDB extension:\nCREATE EXTENSION IF NOT EXISTS timescaledb\n2019/04/12 11:04:33 Creating hypertable with: SELECT create_hypertable(\'"taxi"\', \'time\');\n2019/04/12 11:04:33 Starting extractor \'pipe_taxi_ext\' for measure: taxi\n2019/04/12 11:04:33 Starting data ingestor \'pipe_taxi_ing\'\n2019/04/12 11:04:33 pipe_taxi_ext: Extracting data from database \'outflux_tutorial\'\n2019/04/12 11:04:33 pipe_taxi_ext: SELECT "time", "location_id", "rating", "vendor", "fare", "mta_tax", "tip", "tolls"\nFROM "taxi"\n2019/04/12 11:04:33 pipe_taxi_ext:Pulling chunks with size 15000\n2019/04/12 11:04:33 Will batch insert 8000 rows at once. With commit strategy: CommitOnEachBatch\n2019/04/12 11:04:33 pipe_taxi_ext: Extracted 185 rows from Influx\n2019/04/12 11:04:33 pipe_taxi_ing: Complete. Inserted 185 rows.\n2019/04/12 11:04:33 All pipelines finished\n2019/04/12 11:04:33 Migration execution time: 0.094 seconds\n'})}),"\n",(0,a.jsx)(t.h2,{id:"5-\u53c2\u8003\u8d44\u6599",children:"5. \u53c2\u8003\u8d44\u6599"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://blog.51cto.com/rongfengliang/3124713",children:"https://blog.51cto.com/rongfengliang/3124713"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://docs.timescale.com/v1.2/tutorials/outflux",children:"https://docs.timescale.com/v1.2/tutorials/outflux"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started/",children:"https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started/"})}),"\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"https://blog.timescale.com/migrate-outflux-a-smart-way-out-of-influxdb/",children:"https://blog.timescale.com/migrate-outflux-a-smart-way-out-of-influxdb/"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(96540);const i={},l=a.createContext(i);function o(e){const t=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(l.Provider,{value:t},e.children)}}}]);
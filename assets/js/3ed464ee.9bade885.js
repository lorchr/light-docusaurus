"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[46155],{14767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(74848),r=n(28453);const i={title:"Spring Boot Slice Upload with Minio(S3) and LocalFileSystem",authors:["lorchr"],tags:["upload","minio","s3","oss","localFileSystem"],image:"../img/docusaurus.png",date:new Date("2023-12-22T00:00:00.000Z")},o=void 0,s={permalink:"/blog/2023/12/22/file-slice-upload",editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/blog/2023-12-22-file-slice-upload/index.md",source:"@site/blog/2023-12-22-file-slice-upload/index.md",title:"Spring Boot Slice Upload with Minio(S3) and LocalFileSystem",description:"\u524d\u8a00",date:"2023-12-22T00:00:00.000Z",tags:[{label:"upload",permalink:"/blog/tags/upload"},{label:"minio",permalink:"/blog/tags/minio"},{label:"s3",permalink:"/blog/tags/s-3"},{label:"oss",permalink:"/blog/tags/oss"},{label:"localFileSystem",permalink:"/blog/tags/local-file-system"}],readingTime:38.655,hasTruncateMarker:!1,authors:[{name:"Hui Liu",title:"Author",url:"https://github.com/lorchr",twitter:"lorchr",email:"whitetulips@163.com",imageURL:"https://github.com/lorchr.png",key:"lorchr"}],frontMatter:{title:"Spring Boot Slice Upload with Minio(S3) and LocalFileSystem",authors:["lorchr"],tags:["upload","minio","s3","oss","localFileSystem"],image:"../img/docusaurus.png",date:"2023-12-22T00:00:00.000Z"},unlisted:!1,nextItem:{title:"Docusaurus With Algolia",permalink:"/blog/2023/08/07/docusaurus-with-aglolia"}},l={authorsImageUrls:[void 0]},c=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u4ec0\u4e48\u662f OSS?",id:"\u4ec0\u4e48\u662f-oss",level:3},{value:"\u4ec0\u4e48\u662f AmazonS3\uff1f",id:"\u4ec0\u4e48\u662f-amazons3",level:3},{value:"\u4e3a\u4ec0\u4e48\u8981\u57fa\u4e8eAmazonS3 \u5b9e\u73b0 Spring Boot Starter\uff1f",id:"\u4e3a\u4ec0\u4e48\u8981\u57fa\u4e8eamazons3-\u5b9e\u73b0-spring-boot-starter",level:3},{value:"\u4e00\u3001\u81ea\u5b9a\u4e49 spring-boot-starter-oss",id:"\u4e00\u81ea\u5b9a\u4e49-spring-boot-starter-oss",level:2},{value:"1.1 Maven\u5de5\u7a0b\u5b9a\u4e49\u53ca\u4f9d\u8d56 pom.xml",id:"11-maven\u5de5\u7a0b\u5b9a\u4e49\u53ca\u4f9d\u8d56-pomxml",level:3},{value:"1.2 OSS\u64cd\u4f5c\u7c7b\u63a5\u53e3\u5b9a\u4e49",id:"12-oss\u64cd\u4f5c\u7c7b\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"1.3 OSS\u64cd\u4f5c\u7c7bS3\u5b9e\u73b0",id:"13-oss\u64cd\u4f5c\u7c7bs3\u5b9e\u73b0",level:3},{value:"1.4 OSS\u64cd\u4f5c\u7c7bLocalFileSystem\u5b9e\u73b0",id:"14-oss\u64cd\u4f5c\u7c7blocalfilesystem\u5b9e\u73b0",level:3},{value:"1.5 OSS\u914d\u7f6e\u5c5e\u6027\u7c7b OssProperties",id:"15-oss\u914d\u7f6e\u5c5e\u6027\u7c7b-ossproperties",level:3},{value:"1.6 OSS\u81ea\u52a8\u914d\u7f6e\u7c7b OssAutoConfiguration",id:"16-oss\u81ea\u52a8\u914d\u7f6e\u7c7b-ossautoconfiguration",level:3},{value:"1.7 SpringBoot\u81ea\u52a8\u88c5\u914d\u914d\u7f6e\u6587\u4ef6",id:"17-springboot\u81ea\u52a8\u88c5\u914d\u914d\u7f6e\u6587\u4ef6",level:3},{value:"1.7.1 Spring Boot 2.x",id:"171-spring-boot-2x",level:4},{value:"1.7.2 Spring Boot 3.x",id:"172-spring-boot-3x",level:4},{value:"1.8 application.yaml\u914d\u7f6e\u793a\u4f8b",id:"18-applicationyaml\u914d\u7f6e\u793a\u4f8b",level:3},{value:"\u4e8c\u3001\u73af\u5883\u51c6\u5907",id:"\u4e8c\u73af\u5883\u51c6\u5907",level:2},{value:"2.1 \u642d\u5efaMinIO Server",id:"21-\u642d\u5efaminio-server",level:3},{value:"2.2 \u521d\u59cb\u5316\u6570\u636e\u5e93",id:"22-\u521d\u59cb\u5316\u6570\u636e\u5e93",level:3},{value:"\u4e09\u3001\u4f7f\u7528\u793a\u4f8b",id:"\u4e09\u4f7f\u7528\u793a\u4f8b",level:2},{value:"3.1 \u63a5\u53e3\u5b9a\u4e49",id:"31-\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"3.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",id:"32-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"3.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b",id:"33-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",level:3},{value:"3.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b",id:"34-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",level:3},{value:"\u56db\u3001\u5206\u7247\u4e0b\u8f7d",id:"\u56db\u5206\u7247\u4e0b\u8f7d",level:2},{value:"4.1 \u63a5\u53e3\u5b9a\u4e49",id:"41-\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"4.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",id:"42-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"4.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b",id:"43-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",level:3},{value:"4.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b",id:"44-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",level:3},{value:"\u4e94\u3001\u5206\u7247\u4e0a\u4f20",id:"\u4e94\u5206\u7247\u4e0a\u4f20",level:2},{value:"5.1 \u63a5\u53e3\u5b9a\u4e49",id:"51-\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"5.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",id:"52-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",level:3},{value:"5.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b",id:"53-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",level:3},{value:"5.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b",id:"54-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",level:3}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"\u524d\u8a00",children:"\u524d\u8a00"}),"\n",(0,a.jsx)(t.h3,{id:"\u4ec0\u4e48\u662f-oss",children:"\u4ec0\u4e48\u662f OSS?"}),"\n",(0,a.jsx)(t.p,{children:"OSS\uff08Object Storage Service\uff09\uff0c\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\uff0c\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u662f\u4e00\u79cd\u4f7f\u7528 HTTP API \u5b58\u50a8\u548c\u68c0\u7d22\u5bf9\u8c61\u7684\u5de5\u5177\u3002\u5c31\u662f\u5c06\u7cfb\u7edf\u6240\u8981\u7528\u7684\u6587\u4ef6\u4e0a\u4f20\u5230\u4e91\u786c\u76d8\u4e0a\uff0c\u8be5\u4e91\u786c\u76d8\u63d0\u4f9b\u4e86\u6587\u4ef6\u4e0b\u8f7d\u3001\u4e0a\u4f20\u3001\u9884\u89c8\u7b49\u4e00\u7cfb\u5217\u670d\u52a1\uff0c\u5177\u5907\u7248\u672c\uff0c\u6743\u9650\u63a7\u5236\u80fd\u529b\uff0c\u5177\u5907\u6570\u636e\u751f\u547d\u5468\u671f\u7ba1\u7406\u80fd\u529b\u8fd9\u6837\u7684\u670d\u52a1\u4ee5\u53ca\u6280\u672f\u53ef\u4ee5\u7edf\u79f0\u4e3a OSS"}),"\n",(0,a.jsx)(t.p,{children:"\u4e00\u822c\u9879\u76ee\u4f7f\u7528 OSS \u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\uff0c\u4e3b\u8981\u662f\u5bf9\u56fe\u7247\u3001\u6587\u4ef6\u3001\u97f3\u9891\u7b49\u5bf9\u8c61\u96c6\u4e2d\u5f0f\u7ba1\u7406\u6743\u9650\u63a7\u5236\uff0c\u7ba1\u7406\u6570\u636e\u751f\u547d\u5468\u671f\u7b49\u7b49\uff0c\u63d0\u4f9b\u4e0a\u4f20\uff0c\u4e0b\u8f7d\uff0c\u9884\u89c8\uff0c\u5220\u9664\u7b49\u529f\u80fd\u3002"}),"\n",(0,a.jsx)(t.h3,{id:"\u4ec0\u4e48\u662f-amazons3",children:"\u4ec0\u4e48\u662f AmazonS3\uff1f"}),"\n",(0,a.jsx)(t.p,{children:"Amazon Simple Storage Service\uff08Amazon S3\uff0cAmazon \u7b80\u4fbf\u5b58\u50a8\u670d\u52a1\uff09\u662f AWS \u6700\u65e9\u63a8\u51fa\u7684\u4e91\u670d\u52a1\u4e4b\u4e00\uff0c\u7ecf\u8fc7\u591a\u5e74\u7684\u53d1\u5c55\uff0cS3 \u534f\u8bae\u5728\u5bf9\u8c61\u5b58\u50a8\u884c\u4e1a\u4e8b\u5b9e\u4e0a\u5df2\u7ecf\u6210\u4e3a\u6807\u51c6\u3002"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3 REST/SOAP \u6765\u7edf\u4e00\u8bbf\u95ee\u4efb\u4f55\u6570\u636e"}),"\n",(0,a.jsx)(t.li,{children:"\u5bf9 S3 \u6765\u8bf4\uff0c\u5b58\u5728\u91cc\u9762\u7684\u6570\u636e\u5c31\u662f\u5bf9\u8c61\u540d\uff08\u952e\uff09\uff0c\u548c\u6570\u636e\uff08\u503c\uff09"}),"\n",(0,a.jsx)(t.li,{children:"\u4e0d\u9650\u91cf\uff0c\u5355\u4e2a\u6587\u4ef6\u6700\u9ad8\u53ef\u8fbe 5TB\uff0c\u53ef\u52a8\u6001\u6269\u5bb9\u3002"}),"\n",(0,a.jsx)(t.li,{children:"\u9ad8\u901f\u3002\u6bcf\u4e2a bucket \u4e0b\u6bcf\u79d2\u53ef\u8fbe 3500 PUT/COPY/POST/DELETE \u6216 5500 GET/HEAD \u8bf7\u6c42\u3002"}),"\n",(0,a.jsx)(t.li,{children:"\u5177\u5907\u7248\u672c\uff0c\u6743\u9650\u63a7\u5236\u80fd\u529b"}),"\n",(0,a.jsx)(t.li,{children:"\u5177\u5907\u6570\u636e\u751f\u547d\u5468\u671f\u7ba1\u7406\u80fd\u529b"}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["\u6587\u6863\u5730\u5740\uff1a",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/Welcome.html",children:"https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/userguide/Welcome.html"})]}),"\n",(0,a.jsx)(t.p,{children:"\u4f5c\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\uff0cS3 \u529f\u80fd\u771f\u7684\u5f88\u5b8c\u5907\uff0c\u884c\u4e1a\u7684\u6807\u6746\uff0c\u76ee\u524d\u5e02\u9762\u4e0a\u5927\u90e8\u5206 OSS \u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u90fd\u652f\u6301 AmazonS3\uff0c\u672c\u6587\u4e3b\u8981\u8bb2\u89e3\u7684\u5c31\u662f\u57fa\u4e8e AmazonS3 \u5b9e\u73b0\u6211\u4eec\u81ea\u5df1\u7684 Spring Boot Starter\u3002"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\u963f\u91cc\u4e91 OSS \u517c\u5bb9 S3"}),"\n",(0,a.jsx)(t.li,{children:"\u4e03\u725b\u4e91\u5bf9\u8c61\u5b58\u50a8\u517c\u5bb9 S3"}),"\n",(0,a.jsx)(t.li,{children:"\u817e\u8baf\u4e91 COS \u517c\u5bb9 S3"}),"\n",(0,a.jsx)(t.li,{children:"Minio \u517c\u5bb9 S3"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"\u4e3a\u4ec0\u4e48\u8981\u57fa\u4e8eamazons3-\u5b9e\u73b0-spring-boot-starter",children:"\u4e3a\u4ec0\u4e48\u8981\u57fa\u4e8eAmazonS3 \u5b9e\u73b0 Spring Boot Starter\uff1f"}),"\n",(0,a.jsx)(t.p,{children:"\u539f\u56e0\uff1a\u5e02\u9762\u4e0a OSS \u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u57fa\u672c\u90fd\u652f\u6301 AmazonS3\uff0c\u6211\u4eec\u5c01\u88c5\u6211\u4eec\u7684\u81ea\u5df1\u7684 starter \u90a3\u4e48\u5c31\u5fc5\u987b\u8003\u8651\u9002\u914d\uff0c\u8fc1\u79fb\uff0c\u53ef\u6269\u5c55\u3002\u6bd4\u55bb\u8bf4\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u662f\u963f\u91cc\u4e91 OSS \u5bf9\u63a5\u963f\u91cc\u4e91 OSS \u7684 SDK\uff0c\u540e\u5929\u6211\u4eec\u4f7f\u7528\u7684\u662f\u817e\u8baf COS \u5bf9\u63a5\u662f\u817e\u8baf\u4e91 COS\uff0c\u6211\u4eec\u4f55\u4e0d\u76f4\u63a5\u5bf9\u63a5 AmazonS3 \u5b9e\u73b0\u5462\uff0c\u8fd9\u6837\u540e\u7eed\u4e0d\u9700\u8981\u8c03\u6574\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u53bb\u5404\u4e2a\u4e91\u670d\u52a1\u5546\u914d\u7f6e\u5c31\u597d\u4e86\u3002"}),"\n",(0,a.jsx)(t.h2,{id:"\u4e00\u81ea\u5b9a\u4e49-spring-boot-starter-oss",children:"\u4e00\u3001\u81ea\u5b9a\u4e49 spring-boot-starter-oss"}),"\n",(0,a.jsx)(t.h3,{id:"11-maven\u5de5\u7a0b\u5b9a\u4e49\u53ca\u4f9d\u8d56-pomxml",children:"1.1 Maven\u5de5\u7a0b\u5b9a\u4e49\u53ca\u4f9d\u8d56 pom.xml"}),"\n",(0,a.jsxs)(t.p,{children:["\u6838\u5fc3\u662f\u5f15\u5165 ",(0,a.jsx)(t.code,{children:"AmazonS3"})," \u4f9d\u8d56\u5305"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.amazonaws</groupId>\n    <artifactId>aws-java-sdk-s3</artifactId>\n</dependency>\n"})}),"\n",(0,a.jsxs)(t.p,{children:["\u5b8c\u6574\u7684",(0,a.jsx)(t.code,{children:"pom.xml"}),"\u5982\u4e0b"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>cloud-sdk-oss</artifactId>\n    <packaging>jar</packaging>\n\n    <name>Cloud SDK OSS</name>\n    <description>OSS SDK Support Amazon S3, Alibaba OSS, Tencent COS, Qiniu, MinIO etc</description>\n\n    <parent>\n        <groupId>com.light</groupId>\n        <artifactId>spring-cloud-samples</artifactId>\n        <version>2023.0.0</version>\n    </parent>\n\n    <properties>\n        <skipTests>true</skipTests>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>com.light</groupId>\n            <artifactId>cloud-common-core</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>com.amazonaws</groupId>\n            <artifactId>aws-java-sdk-s3</artifactId>\n        </dependency>\n\n        \x3c!--\u81ea\u52a8\u914d\u7f6e--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-autoconfigure</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-autoconfigure-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        \x3c!--\u751f\u6210\u914d\u7f6e\u8bf4\u660e\u6587\u4ef6--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <scope>compile</scope>\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n\n    <build>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                \x3c!--yml\u4e2d\u5f15\u7528pom\u4fe1\u606f--\x3e\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n\n        <plugins>\n            \x3c!--\u8df3\u8fc7\u5411maven\u79c1\u670d\u63a8\u9001\u670d\u52a1jar\u5305--\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-deploy-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n            \x3c!-- maven \u6253\u5305\u65f6\u8df3\u8fc7\u6d4b\u8bd5 --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <configuration>\n                    <skip>true</skip>\n                </configuration>\n            </plugin>\n            \x3c!--\u53ef\u4f9d\u8d56jar\u5305\u63d2\u4ef6--\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                    <source>${maven.compiler.source}</source>\n                    <target>${maven.compiler.target}</target>\n                </configuration>\n            </plugin>\n            \x3c!-- \u5728\u6253\u597d\u7684jar\u5305\u4e2d\u4fdd\u7559javadoc\u6ce8\u91ca,\u5b9e\u9645\u4f1a\u53e6\u5916\u751f\u6210\u4e00\u4e2axxxxx-sources.jar --\x3e\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-source-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>attach-sources</id>\n                        <goals>\n                            <goal>jar</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"12-oss\u64cd\u4f5c\u7c7b\u63a5\u53e3\u5b9a\u4e49",children:"1.2 OSS\u64cd\u4f5c\u7c7b\u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.p,{children:"OssTemplate\uff1aOSS \u6a21\u677f\u63a5\u53e3\uff0c\u6b64\u63a5\u53e3\u4e3b\u8981\u662f\u5bf9 OSS \u64cd\u4f5c\u7684\u65b9\u6cd5\u7684\u4e00\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u4e3a\u63a5\u53e3\u4e3b\u8981\u662f\u6ee1\u8db3\u53ef\u6269\u5c55\u539f\u5219\uff0c\u5c31\u662f\u5176\u4ed6\u4eba\u4f7f\u7528\u4e86\u6211\u4eec\u7684 jar \u5305\uff0c\u5b9e\u73b0\u6b64\u63a5\u53e3\u53ef\u4ee5\u81ea\u5b9a\u4e49\u76f8\u5173\u64cd\u4f5c\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u5982\u4e0b\u9762\u6240\u793a\u4ee3\u7801\uff1a\u5b9a\u4e49\u4e86\u4e00\u4e9b\u5bf9 OSS \u64cd\u4f5c\u7684\u65b9\u6cd5\u3002"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"package com.light.cloud.sdk.oss.service;\n\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.amazonaws.services.s3.model.Bucket;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadResult;\nimport com.amazonaws.services.s3.model.CopyObjectResult;\nimport com.amazonaws.services.s3.model.InitiateMultipartUploadResult;\nimport com.amazonaws.services.s3.model.MultipartUpload;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PartSummary;\nimport com.amazonaws.services.s3.model.PutObjectResult;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\nimport com.amazonaws.services.s3.model.UploadPartResult;\n\n/**\n * OSS\u64cd\u4f5c\u6a21\u677f\n *\n * @author Hui Liu\n * @date 2023/5/9\n */\npublic interface OssTemplate {\n\n    /**\n     * \u521b\u5efaBucket <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @return \u5b58\u50a8\u6876\n     */\n    Bucket createBucket(String bucketName) throws Exception;\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u7684buckets <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html <p>\n     *\n     * @return \u5b58\u50a8\u6876\u5217\u8868\n     */\n    List<Bucket> listBuckets() throws Exception;\n\n    /**\n     * \u901a\u8fc7Bucket\u540d\u79f0\u5220\u9664Bucket <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteBucket.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     */\n    void removeBucket(String bucketName) throws Exception;\n\n    /**\n     * \u4e0a\u4f20\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html <p>\n     *\n     * @param bucketName  bucket\u540d\u79f0\n     * @param objectName  \u6587\u4ef6\u540d\u79f0\n     * @param inputStream \u6587\u4ef6\u8f93\u5165\u6d41\n     * @param contextType \u6587\u4ef6\u7c7b\u578b\n     * @return \u4e0a\u4f20\u7ed3\u679c\n     */\n    PutObjectResult putObject(String bucketName, String objectName, InputStream inputStream, String contextType) throws Exception;\n\n\n    /**\n     * \u4e0a\u4f20\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param stream     \u6587\u4ef6\u6d41\n     * @return \u4e0a\u4f20\u7ed3\u679c\n     */\n    PutObjectResult putObject(String bucketName, String objectName, InputStream stream) throws Exception;\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8c61\u5143\u4fe1\u606f <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectMetadata.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @return \u6587\u4ef6\u5bf9\u8c61\n     */\n    ObjectMetadata getObjectMetadata(String bucketName, String objectName);\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @return \u6587\u4ef6\u5bf9\u8c61\n     */\n    S3Object getObject(String bucketName, String objectName) throws Exception;\n\n    /**\n     * \u590d\u5236\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html <p>\n     *\n     * @param bucketName    bucket\u540d\u79f0\n     * @param objectName    \u6587\u4ef6\u540d\u79f0\n     * @param newBucketName \u65b0bucket\u540d\u79f0\n     * @param newObjectName \u65b0\u6587\u4ef6\u540d\u79f0\n     */\n    CopyObjectResult copyObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception;\n\n    /**\n     * \u79fb\u52a8\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html <p>\n     *\n     * @param bucketName    bucket\u540d\u79f0\n     * @param objectName    \u6587\u4ef6\u540d\u79f0\n     * @param newBucketName \u65b0bucket\u540d\u79f0\n     * @param newObjectName \u65b0\u6587\u4ef6\u540d\u79f0\n     */\n    void moveObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception;\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8c61\uff0c\u5206\u6bb5\u83b7\u53d6 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param startByte  \u5f00\u59cb\u5b57\u8282\n     * @param endByte    \u7ed3\u675f\u5b57\u8282\n     * @return \u6587\u4ef6\u5bf9\u8c61\n     */\n    S3Object getObjectWithRange(String bucketName, String objectName, Long startByte, Long endByte) throws Exception;\n\n    /**\n     * \u83b7\u53d6\u5bf9\u8c61\u7684url <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_GeneratePresignedUrl.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param expireAt   \u8fc7\u671f\u65f6\u95f4\n     * @return \u5bf9\u8c61\u7684URL\n     */\n    String getPreSignViewUrl(String bucketName, String objectName, Date expireAt) throws Exception;\n\n    /**\n     * \u6839\u636e\u524d\u7f00\u67e5\u8be2\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param recursive  \u662f\u5426\u9012\u5f52\u67e5\u8be2\n     * @return S3ObjectSummary \u5217\u8868\n     */\n    List<S3ObjectSummary> listObjects(String bucketName, boolean recursive) throws Exception;\n\n    /**\n     * \u6839\u636e\u524d\u7f00\u67e5\u8be2\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html <p>\n     * AmazonS3\uff1ahttp://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGET.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param prefix     \u524d\u7f00\n     * @param recursive  \u662f\u5426\u9012\u5f52\u67e5\u8be2\n     * @return S3ObjectSummary \u5217\u8868\n     */\n    List<S3ObjectSummary> listObjectsByPrefix(String bucketName, String prefix, boolean recursive) throws Exception;\n\n    /**\n     * \u5220\u9664\u5bf9\u8c61 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     */\n    void removeObject(String bucketName, String objectName) throws Exception;\n\n    /**\n     * \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5b58\u5728 <p>\n     * AmazonS3\uff1a\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @throws Exception\n     */\n    Boolean doesObjectExist(String bucketName, String objectName) throws Exception;\n\n    /**\n     * \u5217\u51fa\u5df2\u7ecf\u5b58\u5728\u7684\u5206\u7247 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param uploadId   \u4e0a\u4f20id\n     * @throws Exception\n     */\n    List<PartSummary> listParts(String bucketName, String objectName, String uploadId) throws Exception;\n\n    /**\n     * \u5217\u51fa\u6b63\u5728\u8fdb\u884c\u7684\u4e0a\u4f20\u64cd\u4f5c <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/zh_cn/AmazonS3/latest/API/API_ListMultipartUploads.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @throws Exception\n     */\n    List<MultipartUpload> listMultiUploads(String bucketName) throws Exception;\n\n    /**\n     * \u521d\u59cb\u5316\u5206\u7247\u4e0a\u4f20\u4efb\u52a1 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @throws Exception\n     */\n    InitiateMultipartUploadResult initMultiUpload(String bucketName, String objectName) throws Exception;\n\n    /**\n     * \u53d6\u6d88\u5206\u7247\u4e0a\u4f20\u4efb\u52a1 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param uploadId   \u4e0a\u4f20id\n     * @throws Exception\n     */\n    void abortMultiUpload(String bucketName, String objectName, String uploadId) throws Exception;\n\n    /**\n     * \u4e0a\u4f20\u5206\u7247 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html <p>\n     *\n     * @param bucketName  bucket\u540d\u79f0\n     * @param objectName  \u6587\u4ef6\u540d\u79f0\n     * @param uploadId    \u4e0a\u4f20id\n     * @param inputStream \u6587\u4ef6\u8f93\u5165\u6d41\n     * @param partNumber  \u5206\u7247\u53f7\n     * @throws Exception\n     */\n    UploadPartResult uploadPart(String bucketName, String objectName, String uploadId,\n                                InputStream inputStream, Integer partNumber) throws Exception;\n\n    /**\n     * \u83b7\u53d6\u9884\u7b7e\u540d\u4e0a\u4f20url <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_GeneratePresignedUrl.html <p>\n     *\n     * @param bucketName bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0\n     * @param expireAt   \u8fc7\u671f\u65f6\u95f4\n     * @param params     \u7b7e\u540d\u53c2\u6570\n     * @return \u9884\u7b7e\u540d\u4e0a\u4f20URL\n     * @throws Exception\n     */\n    String getPreSignUploadUrl(String bucketName, String objectName, Date expireAt, Map<String, String> params) throws Exception;\n\n    /**\n     * \u5408\u5e76\u5206\u7247 <p>\n     * AmazonS3\uff1ahttps://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html <p>\n     * <p>\n     * Note: Minio\u5bf9\u8c61\u5b58\u50a8\u8981\u6c42\u7684\u6700\u5c0f\u5206\u7247\u662f5MB {@link com.amazonaws.services.s3.AmazonS3#completeMultipartUpload(com.amazonaws.services.s3.model.CompleteMultipartUploadRequest)}\n     *\n     * @param bucketName bucket\u540d\u79f0 bucket\u540d\u79f0\n     * @param objectName \u6587\u4ef6\u540d\u79f0 \u6587\u4ef6\u540d\n     * @param uploadId   \u4e0a\u4f20id\n     * @param chunkNum   \u5206\u7247\u6570\u91cf\n     * @return \u4e0a\u4f20\u7ed3\u679c\n     * @throws Exception\n     */\n    CompleteMultipartUploadResult completeMultiUpload(String bucketName, String objectName, String uploadId, Integer chunkNum) throws Exception;\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["\u57fa\u4e8e\u4e0a\u9762\u5b9a\u4e49\u7684 ",(0,a.jsx)(t.code,{children:"OssTemplate"})," \u63a5\u53e3\uff0c\u6269\u5c55\u4e86 ",(0,a.jsx)(t.code,{children:"S3OssTemplate"})," ",(0,a.jsx)(t.code,{children:"LfsOssTemplate"}),"\uff0c\u5206\u522b\u5bf9\u5e94\u4e0eS3\u5b58\u50a8\u548c\u672c\u5730\u6587\u4ef6\u5b58\u50a8"]}),"\n",(0,a.jsx)(t.h3,{id:"13-oss\u64cd\u4f5c\u7c7bs3\u5b9e\u73b0",children:"1.3 OSS\u64cd\u4f5c\u7c7bS3\u5b9e\u73b0"}),"\n",(0,a.jsx)(t.p,{children:"\u5b9e\u73b0 OssTemplate \u91cc\u9762\u7684\u65b9\u6cd5\uff0c\u8c03\u7528 AmazonS3 JavaSDK \u7684\u65b9\u6cd5\u5b9e\u73b0\u3002"}),"\n",(0,a.jsx)(t.p,{children:"AmazonS3 \u63d0\u4f9b\u4e86\u4f17\u591a\u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5199\u5168\u90e8\u7684\u4e86\uff0c\u516c\u53f8\u8981\u7528\u5230\u90a3\u4e9b\u5c31\u5199\u90a3\u4e9b\u5427\uff0c\u540e\u7eed\u6269\u5c55\u5c31\u884c\u3002"}),"\n",(0,a.jsxs)(t.p,{children:["AmazonS3 \u63a5\u53e3\u5730\u5740: ",(0,a.jsx)(t.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html",children:"https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package com.light.cloud.sdk.oss.service.impl;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.MediaTypeFactory;\n\nimport com.amazonaws.HttpMethod;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.internal.Mimetypes;\nimport com.amazonaws.services.s3.model.AbortMultipartUploadRequest;\nimport com.amazonaws.services.s3.model.Bucket;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadRequest;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadResult;\nimport com.amazonaws.services.s3.model.CopyObjectRequest;\nimport com.amazonaws.services.s3.model.CopyObjectResult;\nimport com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;\nimport com.amazonaws.services.s3.model.GetObjectRequest;\nimport com.amazonaws.services.s3.model.InitiateMultipartUploadRequest;\nimport com.amazonaws.services.s3.model.InitiateMultipartUploadResult;\nimport com.amazonaws.services.s3.model.ListMultipartUploadsRequest;\nimport com.amazonaws.services.s3.model.ListObjectsRequest;\nimport com.amazonaws.services.s3.model.ListPartsRequest;\nimport com.amazonaws.services.s3.model.MetadataDirective;\nimport com.amazonaws.services.s3.model.MultipartUpload;\nimport com.amazonaws.services.s3.model.MultipartUploadListing;\nimport com.amazonaws.services.s3.model.ObjectListing;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PartETag;\nimport com.amazonaws.services.s3.model.PartListing;\nimport com.amazonaws.services.s3.model.PartSummary;\nimport com.amazonaws.services.s3.model.PutObjectResult;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\nimport com.amazonaws.services.s3.model.UploadPartRequest;\nimport com.amazonaws.services.s3.model.UploadPartResult;\nimport com.amazonaws.util.IOUtils;\nimport com.light.cloud.common.core.exception.BizException;\nimport com.light.cloud.sdk.oss.properties.OssProperties;\nimport com.light.cloud.sdk.oss.service.OssTemplate;\n\n/**\n * OSS\u64cd\u4f5c\u4e1a\u52a1\u5b9e\u73b0\n *\n * @author Hui Liu\n * @date 2023/5/9\n */\npublic class S3OssTemplate implements OssTemplate {\n\n    private final AmazonS3 amazonS3;\n\n    private final OssProperties ossProperties;\n\n    public S3OssTemplate(AmazonS3 amazonS3, OssProperties ossProperties) {\n        this.amazonS3 = amazonS3;\n        this.ossProperties = ossProperties;\n    }\n\n    @Override\n    public Bucket createBucket(String bucketName) throws Exception {\n        if (!amazonS3.doesBucketExistV2(bucketName)) {\n            return amazonS3.createBucket((bucketName));\n        }\n        return null;\n    }\n\n    @Override\n    public List<Bucket> listBuckets() throws Exception {\n        return amazonS3.listBuckets();\n    }\n\n    @Override\n    public void removeBucket(String bucketName) throws Exception {\n        amazonS3.deleteBucket(bucketName);\n    }\n\n    @Override\n    public PutObjectResult putObject(String bucketName, String objectName, InputStream inputStream, String contextType) throws Exception {\n        return putObject(bucketName, objectName, inputStream, inputStream.available(), contextType);\n    }\n\n    @Override\n    public PutObjectResult putObject(String bucketName, String objectName, InputStream stream) throws Exception {\n        return putObject(bucketName, objectName, stream, stream.available(), Mimetypes.MIMETYPE_OCTET_STREAM);\n    }\n\n    private PutObjectResult putObject(String bucketName, String objectName, InputStream stream, long size,\n                                      String contextType) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        byte[] bytes = IOUtils.toByteArray(stream);\n        ObjectMetadata objectMetadata = new ObjectMetadata();\n        objectMetadata.setContentLength(size);\n        objectMetadata.setContentType(contextType);\n        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n        // \u4e0a\u4f20\n        return amazonS3.putObject(bucketName, objectName, byteArrayInputStream, objectMetadata);\n    }\n\n    @Override\n    public ObjectMetadata getObjectMetadata(String bucketName, String objectName) {\n        return amazonS3.getObjectMetadata(bucketName, objectName);\n    }\n\n    @Override\n    public S3Object getObject(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        return amazonS3.getObject(bucketName, objectName);\n    }\n\n    @Override\n    public CopyObjectResult copyObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception {\n        CopyObjectRequest request = new CopyObjectRequest();\n        request.setSourceBucketName(bucketName);\n        request.setSourceKey(objectName);\n        request.setDestinationBucketName(newBucketName);\n        request.setDestinationKey(newObjectName);\n        request.setMetadataDirective(MetadataDirective.COPY.name());\n        return amazonS3.copyObject(request);\n    }\n\n    @Override\n    public void moveObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception {\n        CopyObjectRequest request = new CopyObjectRequest();\n        request.setSourceBucketName(bucketName);\n        request.setSourceKey(objectName);\n        request.setDestinationBucketName(newBucketName);\n        request.setDestinationKey(newObjectName);\n        request.setMetadataDirective(MetadataDirective.COPY.name());\n        CopyObjectResult copyObjectResult = amazonS3.copyObject(request);\n\n        if (Objects.nonNull(copyObjectResult)) {\n            amazonS3.deleteObject(bucketName, objectName);\n        }\n    }\n\n    @Override\n    public S3Object getObjectWithRange(String bucketName, String objectName, Long startByte, Long endByte) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        GetObjectRequest request = new GetObjectRequest(bucketName, objectName)\n                .withRange(startByte, endByte);\n        return amazonS3.getObject(request);\n    }\n\n    @Override\n    public String getPreSignViewUrl(String bucketName, String objectName, Date expireAt) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        GeneratePresignedUrlRequest request = new GeneratePresignedUrlRequest(bucketName, objectName)\n                .withExpiration(expireAt)\n                .withMethod(HttpMethod.PUT);\n        URL url = amazonS3.generatePresignedUrl(request);\n        return url.toString();\n    }\n\n    @Override\n    public List<S3ObjectSummary> listObjects(String bucketName, boolean recursive) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        ListObjectsRequest request = new ListObjectsRequest();\n        request.setBucketName(bucketName);\n        ObjectListing objectListing = amazonS3.listObjects(request);\n        return objectListing.getObjectSummaries();\n    }\n\n    @Override\n    public List<S3ObjectSummary> listObjectsByPrefix(String bucketName, String prefix, boolean recursive) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        ListObjectsRequest request = new ListObjectsRequest();\n        request.setBucketName(bucketName);\n        request.setPrefix(prefix);\n        ObjectListing objectListing = amazonS3.listObjects(request);\n        return objectListing.getObjectSummaries();\n    }\n\n    @Override\n    public void removeObject(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        amazonS3.deleteObject(bucketName, objectName);\n    }\n\n    @Override\n    public Boolean doesObjectExist(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        return amazonS3.doesObjectExist(bucketName, objectName);\n    }\n\n    @Override\n    public List<PartSummary> listParts(String bucketName, String objectName, String uploadId) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        ListPartsRequest request = new ListPartsRequest(bucketName, objectName, uploadId);\n        PartListing partListing = amazonS3.listParts(request);\n        return partListing.getParts();\n    }\n\n    @Override\n    public List<MultipartUpload> listMultiUploads(String bucketName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        ListMultipartUploadsRequest request = new ListMultipartUploadsRequest(bucketName);\n        MultipartUploadListing result = amazonS3.listMultipartUploads(request);\n        return result.getMultipartUploads();\n    }\n\n    @Override\n    public InitiateMultipartUploadResult initMultiUpload(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        String contentType = MediaTypeFactory.getMediaType(objectName)\n                .orElse(MediaType.APPLICATION_OCTET_STREAM).toString();\n        ObjectMetadata objectMetadata = new ObjectMetadata();\n        objectMetadata.setContentType(contentType);\n        InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, objectName)\n                .withObjectMetadata(objectMetadata);\n        return amazonS3.initiateMultipartUpload(request);\n    }\n\n    @Override\n    public void abortMultiUpload(String bucketName, String objectName, String uploadId) throws Exception {\n        AbortMultipartUploadRequest request = new AbortMultipartUploadRequest(bucketName, objectName, uploadId);\n        amazonS3.abortMultipartUpload(request);\n    }\n\n    @Override\n    public UploadPartResult uploadPart(String bucketName, String objectName, String uploadId,\n                                       InputStream inputStream, Integer partNumber) throws Exception {\n        byte[] bytes = IOUtils.toByteArray(inputStream);\n        UploadPartRequest request = new UploadPartRequest()\n                .withBucketName(bucketName)\n                .withKey(objectName)\n                .withUploadId(uploadId)\n                .withPartNumber(partNumber)\n                .withInputStream(new ByteArrayInputStream(bytes))\n                .withPartSize(bytes.length);\n        return amazonS3.uploadPart(request);\n    }\n\n    @Override\n    public String getPreSignUploadUrl(String bucketName, String objectName, Date expireAt, Map<String, String> params) throws Exception {\n        GeneratePresignedUrlRequest request = new GeneratePresignedUrlRequest(bucketName, objectName)\n                .withExpiration(expireAt)\n                .withMethod(HttpMethod.PUT);\n        if (MapUtils.isNotEmpty(params)) {\n            params.forEach(request::addRequestParameter);\n        }\n        return amazonS3.generatePresignedUrl(request).toString();\n    }\n\n    @Override\n    public CompleteMultipartUploadResult completeMultiUpload(String bucketName, String objectName, String uploadId, Integer chunkNum) throws Exception {\n        List<PartSummary> parts = listParts(bucketName, objectName, uploadId);\n        if (!chunkNum.equals(parts.size())) {\n            // \u5df2\u4e0a\u4f20\u5206\u5757\u6570\u91cf\u4e0e\u8bb0\u5f55\u4e2d\u7684\u6570\u91cf\u4e0d\u5bf9\u5e94\uff0c\u4e0d\u80fd\u5408\u5e76\u5206\u5757\n            throw BizException.throwException("\u5206\u7247\u7f3a\u5931\uff0c\u8bf7\u91cd\u65b0\u4e0a\u4f20");\n        }\n        List<PartETag> partETagList = parts.stream()\n                .map(partSummary -> new PartETag(partSummary.getPartNumber(), partSummary.getETag()))\n                .collect(Collectors.toList());\n        CompleteMultipartUploadRequest request = new CompleteMultipartUploadRequest()\n                .withBucketName(bucketName)\n                .withKey(objectName)\n                .withUploadId(uploadId)\n                .withPartETags(partETagList);\n        return amazonS3.completeMultipartUpload(request);\n    }\n\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"14-oss\u64cd\u4f5c\u7c7blocalfilesystem\u5b9e\u73b0",children:"1.4 OSS\u64cd\u4f5c\u7c7bLocalFileSystem\u5b9e\u73b0"}),"\n",(0,a.jsx)(t.p,{children:"\u5b9e\u73b0 OssTemplate \u91cc\u9762\u7684\u65b9\u6cd5\uff0c\u57fa\u4e8e\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u3002 \u4e3b\u8981\u662f\u7528\u4e8e\u672c\u5730\u7684\u6f14\u793a\uff0c\u4ee5\u53ca\u52a0\u6df1\u5bf9\u6587\u4ef6\u7cfb\u7edf\u7684\u7406\u89e3\uff0c\u4e0d\u9002\u7528\u4e8e\u751f\u4ea7\u73af\u5883\u3002"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package com.light.cloud.sdk.oss.service.impl;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FilenameFilter;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.UUID;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.apache.commons.lang3.StringUtils;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.MediaTypeFactory;\n\nimport com.amazonaws.services.s3.internal.Mimetypes;\nimport com.amazonaws.services.s3.model.Bucket;\nimport com.amazonaws.services.s3.model.CompleteMultipartUploadResult;\nimport com.amazonaws.services.s3.model.CopyObjectResult;\nimport com.amazonaws.services.s3.model.InitiateMultipartUploadResult;\nimport com.amazonaws.services.s3.model.MultipartUpload;\nimport com.amazonaws.services.s3.model.ObjectMetadata;\nimport com.amazonaws.services.s3.model.PartSummary;\nimport com.amazonaws.services.s3.model.PutObjectResult;\nimport com.amazonaws.services.s3.model.S3Object;\nimport com.amazonaws.services.s3.model.S3ObjectSummary;\nimport com.amazonaws.services.s3.model.UploadPartResult;\nimport com.light.cloud.common.core.constant.BaseConstant;\nimport com.light.cloud.common.core.crypto.AESTool;\nimport com.light.cloud.common.core.exception.BizException;\nimport com.light.cloud.common.core.tool.DateTool;\nimport com.light.cloud.common.core.tool.JsonTool;\nimport com.light.cloud.sdk.oss.properties.OssProperties;\nimport com.light.cloud.sdk.oss.service.OssTemplate;\n\n/**\n * \u672c\u5730\u6587\u4ef6\u5b58\u50a8\u5b9e\u73b0 LocalFileSystemTemplate\n *\n * @author Hui Liu\n * @date 2023/5/9\n */\npublic class LfsOssTemplate implements OssTemplate {\n\n    public static final String DEFAULT_PART_BUCKET = "partUpload";\n    private final OssProperties ossProperties;\n\n    public LfsOssTemplate(OssProperties ossProperties) {\n        this.ossProperties = ossProperties;\n        URI endpoint = ossProperties.getEndpoint();\n        File rootFolder = new File(endpoint);\n        if (!rootFolder.exists()) {\n            rootFolder.mkdirs();\n        }\n    }\n\n    public File getRootFolder() {\n        URI endpoint = ossProperties.getEndpoint();\n        return new File(endpoint);\n    }\n\n    public File getBucketFolder(String bucketName) {\n        URI endpoint = ossProperties.getEndpoint();\n        return new File(endpoint.getPath(), bucketName);\n    }\n\n    public File getFile(String bucketName, String objectName) {\n        URI endpoint = ossProperties.getEndpoint();\n        File bucketFolder = new File(endpoint.getPath(), bucketName);\n        return new File(bucketFolder, objectName);\n    }\n\n    public File getPartBucketFolder(String bucketName) {\n        URI endpoint = ossProperties.getEndpoint();\n        File partBucketFolder = new File(endpoint.getPath(), DEFAULT_PART_BUCKET);\n        return new File(partBucketFolder, bucketName);\n    }\n\n    public File getPartFolder(String bucketName, String objectName, String uploadId) {\n        URI endpoint = ossProperties.getEndpoint();\n        File partBucketFolder = new File(endpoint.getPath(), DEFAULT_PART_BUCKET);\n        File bucketFolder = new File(partBucketFolder, bucketName);\n        return new File(bucketFolder, objectName + BaseConstant.UNDERSCORE + uploadId);\n    }\n\n    public String getPartFilename(String filename, Integer partNumber) {\n        return filename + BaseConstant.DOT + partNumber;\n    }\n\n    public Integer getPartNumber(String partFilename) {\n        String partNum = partFilename.substring(partFilename.lastIndexOf(BaseConstant.DOT) + 1);\n        return Integer.parseInt(partNum);\n    }\n\n    public String getETag(String bucketName, String objectName) {\n        return AESTool.encryptBase64(objectName, bucketName);\n    }\n\n    public static File[] listFiles(File file, String prefix, Boolean recursion) {\n        if (Objects.isNull(file)) {\n            return new File[0];\n        }\n        if (file.isFile()) {\n            return new File[]{file};\n        }\n        FilenameFilter filenameFilter = (dir, name) -> {\n            if (dir.isDirectory()) {\n                return recursion;\n            }\n            if (StringUtils.isNotBlank(prefix)) {\n                return name.startsWith(prefix);\n            }\n            return true;\n        };\n        return file.listFiles(filenameFilter);\n    }\n\n    @Override\n    public Bucket createBucket(String bucketName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File bucketFolder = getBucketFolder(bucketName);\n        if (!bucketFolder.exists()) {\n            bucketFolder.mkdirs();\n        }\n        Bucket bucket = new Bucket();\n        bucket.setName(bucketName);\n        bucket.setCreationDate(DateTool.now());\n        return bucket;\n    }\n\n    @Override\n    public List<Bucket> listBuckets() throws Exception {\n        File rootFolder = getRootFolder();\n        int idx = rootFolder.getPath().length() + 1;\n        File[] folders = rootFolder.listFiles();\n        if (ArrayUtils.isEmpty(folders)) {\n            return Collections.emptyList();\n        }\n\n        List<Bucket> buckets = new ArrayList<>();\n        Date now = DateTool.now();\n        for (File folder : folders) {\n            String path = folder.getPath();\n            Bucket bucket = new Bucket();\n            bucket.setName(path.substring(idx));\n            bucket.setCreationDate(now);\n\n            buckets.add(bucket);\n        }\n        return buckets;\n    }\n\n    @Override\n    public void removeBucket(String bucketName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File bucketFolder = getBucketFolder(bucketName);\n        bucketFolder.delete();\n    }\n\n    @Override\n    public PutObjectResult putObject(String bucketName, String objectName, InputStream inputStream, String contextType) throws Exception {\n        return putObject(bucketName, objectName, inputStream, inputStream.available(), contextType);\n    }\n\n    @Override\n    public PutObjectResult putObject(String bucketName, String objectName, InputStream stream) throws Exception {\n        return putObject(bucketName, objectName, stream, stream.available(), Mimetypes.MIMETYPE_OCTET_STREAM);\n    }\n\n    private PutObjectResult putObject(String bucketName, String objectName, InputStream stream, long size,\n                                      String contextType) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        ObjectMetadata objectMetadata = new ObjectMetadata();\n        objectMetadata.setContentLength(size);\n        objectMetadata.setContentType(contextType);\n        // \u4e0a\u4f20\n        File file = getFile(bucketName, objectName);\n        FileUtils.copyInputStreamToFile(stream, file);\n\n        PutObjectResult result = new PutObjectResult();\n        result.setETag(getETag(bucketName, objectName));\n        result.setMetadata(objectMetadata);\n        return result;\n    }\n\n    @Override\n    public ObjectMetadata getObjectMetadata(String bucketName, String objectName) {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n\n        File file = getFile(bucketName, objectName);\n        String contentType = MediaTypeFactory.getMediaType(objectName)\n                .orElse(MediaType.APPLICATION_OCTET_STREAM).toString();\n\n        ObjectMetadata result = new ObjectMetadata();\n        result.setLastModified(new Date(file.lastModified()));\n        result.setContentLength(file.length());\n        result.setContentType(contentType);\n        return result;\n    }\n\n    @Override\n    public S3Object getObject(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n\n        File file = getFile(bucketName, objectName);\n        // \u4e0b\u8f7d\u6587\u4ef6\n        S3Object result = new S3Object();\n        result.setBucketName(bucketName);\n        result.setKey(objectName);\n        result.setObjectContent(new FileInputStream(file));\n        return result;\n    }\n\n    @Override\n    public CopyObjectResult copyObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n\n        File file = getFile(bucketName, objectName);\n        // \u590d\u5236\u6587\u4ef6\n        File newBucketFolder = getBucketFolder(newBucketName);\n        if (!newBucketFolder.exists()) {\n            newBucketFolder.mkdirs();\n        }\n        File newFile = getFile(newBucketName, newObjectName);\n        FileUtils.copyFile(file, newFile);\n\n        CopyObjectResult result = new CopyObjectResult();\n        result.setETag(getETag(newBucketName, newObjectName));\n        result.setLastModifiedDate(DateTool.now());\n        return result;\n    }\n\n    @Override\n    public void moveObject(String bucketName, String objectName, String newBucketName, String newObjectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n\n        File file = getFile(bucketName, objectName);\n        // \u590d\u5236\u6587\u4ef6\n        File newBucketFolder = getBucketFolder(newBucketName);\n        if (!newBucketFolder.exists()) {\n            newBucketFolder.mkdirs();\n        }\n        File newFile = getFile(newBucketName, newObjectName);\n        FileUtils.copyFile(file, newFile);\n        // \u5220\u9664\u6587\u4ef6\n        file.delete();\n    }\n\n    @Override\n    public S3Object getObjectWithRange(String bucketName, String objectName, Long startByte, Long endByte) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File file = getFile(bucketName, objectName);\n        FileInputStream inputStream = new FileInputStream(file);\n\n        // \u83b7\u53d6\u6307\u5b9a\u8303\u56f4\u7684\u5b57\u8282\n        byte[] buffer = new byte[(int) (endByte - startByte + 1)];\n        inputStream.skip(startByte);\n        int byteRead = inputStream.read(buffer);\n        if (byteRead <= 0) {\n            return null;\n        }\n        // \u4e0b\u8f7d\u6587\u4ef6\n        S3Object result = new S3Object();\n        result.setBucketName(bucketName);\n        result.setKey(objectName);\n        result.setObjectContent(new ByteArrayInputStream(buffer, 0, byteRead));\n        return result;\n    }\n\n    @Override\n    public String getPreSignViewUrl(String bucketName, String objectName, Date expireAt) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        Map<String, Object> urlParam = new HashMap<>();\n        urlParam.put("bucketName", bucketName);\n        urlParam.put("objectName", objectName);\n        urlParam.put("expireAt", DateTool.format(expireAt, DateTool.PATTERN_YYYYMMDDHHMMSS));\n        URI uri = URI.create(ossProperties.getPreSignUrl() + BaseConstant.SLASH + AESTool.encryptBase64(JsonTool.beanToJson(urlParam)));\n        return uri.toString();\n    }\n\n    @Override\n    public List<S3ObjectSummary> listObjects(String bucketName, boolean recursive) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File bucketFolder = getBucketFolder(bucketName);\n        if (!bucketFolder.exists()) {\n            return Collections.emptyList();\n        }\n\n        File[] subFiles = listFiles(bucketFolder, null, recursive);\n\n        List<S3ObjectSummary> summaryList = new ArrayList<>();\n        for (File subFile : subFiles) {\n            if (subFile.isDirectory()) {\n                continue;\n            }\n            S3ObjectSummary s3ObjectSummary = new S3ObjectSummary();\n            s3ObjectSummary.setBucketName(bucketName);\n            s3ObjectSummary.setKey(subFile.getName());\n            s3ObjectSummary.setLastModified(new Date(subFile.lastModified()));\n            s3ObjectSummary.setSize(subFile.length());\n            s3ObjectSummary.setETag(getETag(bucketName, subFile.getName()));\n\n            summaryList.add(s3ObjectSummary);\n        }\n        return summaryList;\n    }\n\n    @Override\n    public List<S3ObjectSummary> listObjectsByPrefix(String bucketName, String prefix, boolean recursive) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File bucketFolder = getBucketFolder(bucketName);\n        if (!bucketFolder.exists()) {\n            return Collections.emptyList();\n        }\n        File[] subFiles = listFiles(bucketFolder, prefix, recursive);\n\n        List<S3ObjectSummary> summaryList = new ArrayList<>();\n        for (File subFile : subFiles) {\n            if (subFile.isDirectory()) {\n                continue;\n            }\n            S3ObjectSummary s3ObjectSummary = new S3ObjectSummary();\n            s3ObjectSummary.setBucketName(bucketName);\n            s3ObjectSummary.setKey(subFile.getName());\n            s3ObjectSummary.setLastModified(new Date(subFile.lastModified()));\n            s3ObjectSummary.setSize(subFile.length());\n            s3ObjectSummary.setETag(getETag(bucketName, subFile.getName()));\n\n            summaryList.add(s3ObjectSummary);\n        }\n        return summaryList;\n    }\n\n    @Override\n    public void removeObject(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File file = getFile(bucketName, objectName);\n        file.delete();\n    }\n\n    @Override\n    public Boolean doesObjectExist(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File file = getFile(bucketName, objectName);\n        return file.exists();\n    }\n\n    @Override\n    public List<PartSummary> listParts(String bucketName, String objectName, String uploadId) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File partFolder = getPartFolder(bucketName, objectName, uploadId);\n        File[] partFiles = partFolder.listFiles();\n        if (ArrayUtils.isEmpty(partFiles)) {\n            return Collections.emptyList();\n        }\n\n        List<PartSummary> parts = new ArrayList<>();\n        for (File partFile : partFiles) {\n            String partFilename = partFile.getName();\n            Integer partNumber = getPartNumber(partFilename);\n            PartSummary partSummary = new PartSummary();\n            partSummary.setPartNumber(partNumber);\n            partSummary.setSize(partFile.length());\n            partSummary.setETag(getETag(bucketName, partFilename));\n            partSummary.setLastModified(new Date(partFile.lastModified()));\n\n            parts.add(partSummary);\n        }\n        return parts;\n    }\n\n    @Override\n    public List<MultipartUpload> listMultiUploads(String bucketName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File partBucketFolder = getPartBucketFolder(bucketName);\n        File[] partFolders = partBucketFolder.listFiles();\n        if (ArrayUtils.isEmpty(partFolders)) {\n            return Collections.emptyList();\n        }\n\n        List<MultipartUpload> uploads = new ArrayList<>();\n        for (File partFolder : partFolders) {\n            String partFolderName = partFolder.getName();\n            String[] split = partFolderName.split("_");\n            MultipartUpload multipartUpload = new MultipartUpload();\n            multipartUpload.setUploadId(split[1]);\n            multipartUpload.setKey(split[0]);\n\n            uploads.add(multipartUpload);\n        }\n        return uploads;\n    }\n\n    @Override\n    public InitiateMultipartUploadResult initMultiUpload(String bucketName, String objectName) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        String uploadId = UUID.randomUUID().toString().replace(BaseConstant.DASH, BaseConstant.EMPTY);\n\n        File partFolder = getPartFolder(bucketName, objectName, uploadId);\n        if (!partFolder.exists()) {\n            partFolder.mkdirs();\n        }\n\n        InitiateMultipartUploadResult result = new InitiateMultipartUploadResult();\n        result.setBucketName(bucketName);\n        result.setKey(objectName);\n        result.setUploadId(uploadId);\n        return result;\n    }\n\n    @Override\n    public void abortMultiUpload(String bucketName, String objectName, String uploadId) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File partFolder = getPartFolder(bucketName, objectName, uploadId);\n        partFolder.delete();\n    }\n\n    @Override\n    public UploadPartResult uploadPart(String bucketName, String objectName, String uploadId,\n                                       InputStream inputStream, Integer partNumber) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        File partFolder = getPartFolder(bucketName, objectName, uploadId);\n        // \u4e0a\u4f20\u5206\u7247\n        File partFile = new File(partFolder, getPartFilename(objectName, partNumber));\n        FileUtils.copyInputStreamToFile(inputStream, partFile);\n\n        UploadPartResult result = new UploadPartResult();\n        result.setETag(getETag(bucketName, partFile.getName()));\n        result.setPartNumber(partNumber);\n        return result;\n    }\n\n    @Override\n    public String getPreSignUploadUrl(String bucketName, String objectName, Date expireAt, Map<String, String> params) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        Map<String, Object> urlParam = new HashMap<>(8);\n        urlParam.put("bucketName", bucketName);\n        urlParam.put("objectName", objectName);\n        urlParam.put("expireAt", DateTool.format(expireAt, DateTool.PATTERN_YYYYMMDDHHMMSS));\n        urlParam.putAll(params);\n        URI uri = URI.create(ossProperties.getPreSignUrl() + BaseConstant.SLASH + AESTool.encryptBase64(JsonTool.beanToJson(urlParam)));\n        return uri.toString();\n    }\n\n    @Override\n    public CompleteMultipartUploadResult completeMultiUpload(String bucketName, String objectName, String uploadId, Integer chunkNum) throws Exception {\n        if (StringUtils.isBlank(bucketName)) {\n            bucketName = ossProperties.getDefaultBucket();\n        }\n        // \u5408\u5e76\u524d\u7684\u5206\u7247\u6587\u4ef6\u5939\n        File partFolder = getPartFolder(bucketName, objectName, uploadId);\n        File[] parts = partFolder.listFiles();\n        if (ArrayUtils.isEmpty(parts) || !chunkNum.equals(parts.length)) {\n            // \u5df2\u4e0a\u4f20\u5206\u5757\u6570\u91cf\u4e0e\u8bb0\u5f55\u4e2d\u7684\u6570\u91cf\u4e0d\u5bf9\u5e94\uff0c\u4e0d\u80fd\u5408\u5e76\u5206\u5757\n            throw BizException.throwException("\u5206\u7247\u7f3a\u5931\uff0c\u8bf7\u91cd\u65b0\u4e0a\u4f20");\n        }\n\n        // \u5408\u5e76\u540e\u7684\u6587\u4ef6\n        File mergeFile = getFile(bucketName, objectName);\n        // \u6267\u884c\u5408\u5e76\n        try (BufferedOutputStream outputStream = new BufferedOutputStream(Files.newOutputStream(mergeFile.toPath()))) {\n            List<File> partList = Arrays.stream(parts).sorted(Comparator.comparing(File::getName)).toList();\n\n            int len;\n            byte[] bytes = new byte[1024];\n            for (File part : partList) {\n                BufferedInputStream inputStream = new BufferedInputStream(Files.newInputStream(part.toPath()));\n\n                while ((len = inputStream.read(bytes)) != -1) {\n                    outputStream.write(bytes, 0, len);\n                }\n                inputStream.close();\n            }\n        }\n        CompleteMultipartUploadResult result = new CompleteMultipartUploadResult();\n        result.setBucketName(bucketName);\n        result.setKey(objectName);\n        result.setETag(getETag(bucketName, mergeFile.getName()));\n        return result;\n    }\n\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"15-oss\u914d\u7f6e\u5c5e\u6027\u7c7b-ossproperties",children:"1.5 OSS\u914d\u7f6e\u5c5e\u6027\u7c7b OssProperties"}),"\n",(0,a.jsx)(t.p,{children:"OssTemplate \u76f8\u5173\u7684\u914d\u7f6e\u5c5e\u6027\uff0c\u65b9\u4fbf\u5ba2\u6237\u7aef\u8fdb\u884c\u5b9a\u5236\u5316\u914d\u7f6e\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u5c5e\u6027\u589e\u5220"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package com.light.cloud.sdk.oss.properties;\n\nimport java.net.URI;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\nimport lombok.Data;\n\n/**\n * OSS\u5c5e\u6027\u914d\u7f6e\n *\n * @author Hui Liu\n * @date 2023/5/9\n */\n@Data\n@ConfigurationProperties(prefix = OssProperties.PREFIX)\npublic class OssProperties {\n\n    public static final String PREFIX = "light.cloud.oss";\n\n    /**\n     * \u5bf9\u8c61\u5b58\u50a8\u670d\u52a1\u7684URL\n     */\n    private URI endpoint;\n\n    /**\n     * \u533a\u57df\n     */\n    private String region;\n\n    /**\n     * true path-style nginx \u53cd\u5411\u4ee3\u7406\u548cS3\u9ed8\u8ba4\u652f\u6301 pathStyle\u6a21\u5f0f {http://endpoint/bucketname}\n     * false supports virtual-hosted-style \u963f\u91cc\u4e91\u7b49\u9700\u8981\u914d\u7f6e\u4e3a virtual-hosted-style \u6a21\u5f0f{http://bucketname.endpoint}\n     * \u53ea\u662furl\u7684\u663e\u793a\u4e0d\u4e00\u6837\n     */\n    private Boolean pathStyleAccess = true;\n\n    /**\n     * Access key\n     */\n    private String accessKey;\n\n    /**\n     * Secret key\n     */\n    private String secretKey;\n\n    /**\n     * \u9ed8\u8ba4\u7684\u8bfb\u5199 Bucket\n     */\n    private String defaultBucket;\n\n    /**\n     * \u9884\u7b7e\u540d\u5730\u5740\n     */\n    private String preSignUrl;\n\n    /**\n     * \u6700\u5927\u7ebf\u7a0b\u6570\uff0c\u9ed8\u8ba4\uff1a100\n     */\n    private Integer maxConnections = 100;\n\n    /**\n     * \u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf use Local FileSystem\n     */\n    public Boolean local = false;\n\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"16-oss\u81ea\u52a8\u914d\u7f6e\u7c7b-ossautoconfiguration",children:"1.6 OSS\u81ea\u52a8\u914d\u7f6e\u7c7b OssAutoConfiguration"}),"\n",(0,a.jsx)(t.p,{children:"\u81ea\u52a8\u88c5\u914d\u7c7b\uff0c\u5c06 OssTemplate \u5b9e\u73b0\u6ce8\u5165\u5230Spring \u5bb9\u5668\u4e2d\uff0c\u5f00\u7bb1\u5373\u7528\u3002"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package com.light.cloud.sdk.oss.configuration;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.amazonaws.ClientConfiguration;\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.AWSCredentialsProvider;\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport com.amazonaws.client.builder.AwsClientBuilder;\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3Client;\nimport com.light.cloud.sdk.oss.properties.OssProperties;\nimport com.light.cloud.sdk.oss.service.OssTemplate;\nimport com.light.cloud.sdk.oss.service.impl.LfsOssTemplate;\nimport com.light.cloud.sdk.oss.service.impl.S3OssTemplate;\nimport lombok.RequiredArgsConstructor;\n\n/**\n * OSS\u914d\u7f6e\u7c7b\n *\n * @author Hui Liu\n * @date 2023/5/9\n */\n@Configuration\n@RequiredArgsConstructor\n@EnableConfigurationProperties(OssProperties.class)\npublic class OssAutoConfiguration {\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(prefix = OssProperties.PREFIX, name = "local", havingValue = "false", matchIfMissing = true)\n    public AmazonS3 ossClient(OssProperties ossProperties) {\n        // \u5ba2\u6237\u7aef\u914d\u7f6e\uff0c\u4e3b\u8981\u662f\u5168\u5c40\u7684\u914d\u7f6e\u4fe1\u606f\n        ClientConfiguration clientConfiguration = new ClientConfiguration();\n        clientConfiguration.setMaxConnections(ossProperties.getMaxConnections());\n        // url\u4ee5\u53caregion\u914d\u7f6e\n        AwsClientBuilder.EndpointConfiguration endpointConfiguration = new AwsClientBuilder.EndpointConfiguration(\n                ossProperties.getEndpoint().toString(), ossProperties.getRegion());\n        // \u51ed\u8bc1\u914d\u7f6e\n        AWSCredentials awsCredentials = new BasicAWSCredentials(ossProperties.getAccessKey(),\n                ossProperties.getSecretKey());\n        AWSCredentialsProvider awsCredentialsProvider = new AWSStaticCredentialsProvider(awsCredentials);\n        // build amazonS3Client\u5ba2\u6237\u7aef\n        return AmazonS3Client.builder().withEndpointConfiguration(endpointConfiguration)\n                .withClientConfiguration(clientConfiguration).withCredentials(awsCredentialsProvider)\n                .disableChunkedEncoding().withPathStyleAccessEnabled(ossProperties.getPathStyleAccess()).build();\n    }\n\n    @Bean\n    @ConditionalOnBean(AmazonS3.class)\n    public OssTemplate ossTemplate(AmazonS3 amazonS3, OssProperties ossProperties) {\n        return new S3OssTemplate(amazonS3, ossProperties);\n    }\n\n    @Bean\n    @ConditionalOnProperty(prefix = OssProperties.PREFIX, name = "local", havingValue = "true")\n    public OssTemplate lfsOssTemplate(OssProperties ossProperties) {\n        return new LfsOssTemplate(ossProperties);\n    }\n\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"17-springboot\u81ea\u52a8\u88c5\u914d\u914d\u7f6e\u6587\u4ef6",children:"1.7 SpringBoot\u81ea\u52a8\u88c5\u914d\u914d\u7f6e\u6587\u4ef6"}),"\n",(0,a.jsx)(t.h4,{id:"171-spring-boot-2x",children:"1.7.1 Spring Boot 2.x"}),"\n",(0,a.jsxs)(t.p,{children:["Spring Boot 2.x\u7684\u81ea\u52a8\u88c5\u914d\u6587\u4ef6 ",(0,a.jsx)(t.code,{children:"resouces/META-INF/spring.factories"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-factories",children:"# Auto Configure\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n  com.light.cloud.sdk.oss.configuration.OssAutoConfiguration\n"})}),"\n",(0,a.jsx)(t.h4,{id:"172-spring-boot-3x",children:"1.7.2 Spring Boot 3.x"}),"\n",(0,a.jsxs)(t.p,{children:["Spring Boot 2.x\u7684\u81ea\u52a8\u88c5\u914d\u6587\u4ef6 ",(0,a.jsx)(t.code,{children:"resouces/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports"})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-imports",children:"com.light.cloud.sdk.oss.configuration.OssAutoConfiguration\n"})}),"\n",(0,a.jsx)(t.h3,{id:"18-applicationyaml\u914d\u7f6e\u793a\u4f8b",children:"1.8 application.yaml\u914d\u7f6e\u793a\u4f8b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"# \u4f7f\u7528MinIO S3 Aliyun Tencent\u767bOSS\u5b58\u50a8\nlight:\n  cloud:\n    oss:\n      endpoint: http://127.0.0.1:9000\n      access-key: admin\n      secret-key: secret\n      default-bucket: light\n      pre-sign-url: http://127.0.0.1:9001\n      region: cn-wuhan\n      max-connections: 100\n      path-style-access: true\n      local: false\n\n---\n\n# \u4f7f\u7528\u672c\u5730\u6587\u4ef6\u7cfb\u7edf LocalFileSystem\nlight:\n  cloud:\n    oss:\n      endpoint: file:///d:/storage/\n      default-bucket: light\n      pre-sign-url: http://127.0.0.1:80/file\n      local: true\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"\u4e8c\u73af\u5883\u51c6\u5907",children:"\u4e8c\u3001\u73af\u5883\u51c6\u5907"}),"\n",(0,a.jsx)(t.h3,{id:"21-\u642d\u5efaminio-server",children:"2.1 \u642d\u5efaMinIO Server"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:'docker run -d \\\n  --publish 9000:9000 \\\n  --publish 9001:9001 \\\n  --volume //d/docker/minio/data:/data \\\n  --env MINIO_ROOT_USER=minioaccess \\\n  --env MINIO_ROOT_PASSWORD=miniosecret \\\n  --env MINIO_SERVER_URL=http://minio.example.net:9000 \\\n  --net dev \\\n  --restart=on-failure:3 \\\n  --name minio \\\n  minio/minio:RELEASE.2023-05-18T00-05-36Z server /data --console-address ":9001"\n'})}),"\n",(0,a.jsx)(t.h3,{id:"22-\u521d\u59cb\u5316\u6570\u636e\u5e93",children:"2.2 \u521d\u59cb\u5316\u6570\u636e\u5e93"}),"\n",(0,a.jsx)(t.p,{children:"\u4ee5\u4e0b\u4e3apgsql\u6570\u636e\u5e93\u811a\u672c\u793a\u4f8b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:'-- ----------------------------\n-- Table structure for slice_upload\n-- ----------------------------\nDROP TABLE IF EXISTS "public"."slice_upload";\nCREATE TABLE "public"."slice_upload"\n(\n    "id"                int8                                        NOT NULL,\n    "file_identifier"   varchar(64) COLLATE "pg_catalog"."default"  NOT NULL,\n    "filename"          varchar(255) COLLATE "pg_catalog"."default" NOT NULL,\n    "bucket_name"       varchar(64) COLLATE "pg_catalog"."default"  NOT NULL,\n    "object_name"       varchar(255) COLLATE "pg_catalog"."default" NOT NULL,\n    "upload_id"         varchar(255) COLLATE "pg_catalog"."default" NOT NULL,\n    "total_size"        int8                                        NOT NULL,\n    "chunk_size"        int8                                        NOT NULL,\n    "chunk_num"         int4                                        NOT NULL,\n    "deleted"           int4                                        NOT NULL,\n    "data_dept_id"      int8                                        NOT NULL,\n    "remark"            varchar(255) COLLATE "pg_catalog"."default",\n    "created_user"      int8                                        NOT NULL,\n    "created_user_name" varchar(32) COLLATE "pg_catalog"."default"  NOT NULL,\n    "created_time"      timestamp(6)                                NOT NULL,\n    "updated_user"      int8                                        NOT NULL,\n    "updated_user_name" varchar(32) COLLATE "pg_catalog"."default"  NOT NULL,\n    "updated_time"      timestamp(6)                                NOT NULL,\n    "revision"          int4                                        NOT NULL,\n    "tenant_id"         int8                                        NOT NULL\n);\n\nCOMMENT ON COLUMN "public"."slice_upload"."id" IS \'\u4e3b\u952e\';\nCOMMENT ON COLUMN "public"."slice_upload"."file_identifier" IS \'\u6587\u4ef6\u552f\u4e00\u6807\u8bc6 MD5\';\nCOMMENT ON COLUMN "public"."slice_upload"."filename" IS \'\u6587\u4ef6\u540d\';\nCOMMENT ON COLUMN "public"."slice_upload"."bucket_name" IS \'S3\u5b58\u50a8\u6876\';\nCOMMENT ON COLUMN "public"."slice_upload"."object_name" IS \'S3\u6587\u4ef6\u7684key\';\nCOMMENT ON COLUMN "public"."slice_upload"."upload_id" IS \'S3\u5206\u7247\u4e0a\u4f20\u7684 uploadId\';\nCOMMENT ON COLUMN "public"."slice_upload"."total_size" IS \'\u6587\u4ef6\u5927\u5c0f bytes\';\nCOMMENT ON COLUMN "public"."slice_upload"."chunk_size" IS \'\u6bcf\u4e2a\u5206\u7247\u5927\u5c0f bytes\';\nCOMMENT ON COLUMN "public"."slice_upload"."chunk_num" IS \'\u5206\u7247\u6570\u91cf\';\nCOMMENT ON COLUMN "public"."slice_upload"."deleted" IS \'\u662f\u5426\u5220\u9664;0-\u5426\uff1b1-\u662f\';\nCOMMENT ON COLUMN "public"."slice_upload"."data_dept_id" IS \'\u6570\u636e\u6240\u5c5e\u90e8\u95e8id\';\nCOMMENT ON COLUMN "public"."slice_upload"."remark" IS \'\u5907\u6ce8\';\nCOMMENT ON COLUMN "public"."slice_upload"."created_user" IS \'\u521b\u5efa\u4ebaId\';\nCOMMENT ON COLUMN "public"."slice_upload"."created_user_name" IS \'\u521b\u5efa\u4eba\';\nCOMMENT ON COLUMN "public"."slice_upload"."created_time" IS \'\u521b\u5efa\u65f6\u95f4\';\nCOMMENT ON COLUMN "public"."slice_upload"."updated_user" IS \'\u66f4\u65b0\u4ebaId\';\nCOMMENT ON COLUMN "public"."slice_upload"."updated_user_name" IS \'\u66f4\u65b0\u4eba\';\nCOMMENT ON COLUMN "public"."slice_upload"."updated_time" IS \'\u66f4\u65b0\u65f6\u95f4\';\nCOMMENT ON COLUMN "public"."slice_upload"."revision" IS \'\u4e50\u89c2\u9501\';\nCOMMENT ON COLUMN "public"."slice_upload"."tenant_id" IS \'\u79df\u6237\u53f7\';\nCOMMENT ON TABLE "public"."slice_upload" IS \'\u5206\u7247\u4e0a\u4f20\u8868\';\n\n-- ----------------------------\n-- Primary Key structure for table slice_upload\n-- ----------------------------\nALTER TABLE "public"."slice_upload"\n    ADD CONSTRAINT "slice_upload_pkey" PRIMARY KEY ("id");\n\n'})}),"\n",(0,a.jsx)(t.h2,{id:"\u4e09\u4f7f\u7528\u793a\u4f8b",children:"\u4e09\u3001\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,a.jsx)(t.p,{children:"\u5bf9\u4e8e\u6587\u4ef6\u7684\u7b80\u5355\u64cd\u4f5c\u63a5\u53e3\u793a\u4f8b\uff0c\u5305\u62ec"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\u6dfb\u52a0\u5b58\u50a8\u6876"}),"\n",(0,a.jsx)(t.li,{children:"\u5220\u9664\u5b58\u50a8\u6876"}),"\n",(0,a.jsx)(t.li,{children:"\u83b7\u53d6\u5b58\u50a8\u6876\u5217\u8868"}),"\n",(0,a.jsx)(t.li,{children:"\u83b7\u53d6\u6587\u4ef6\u5217\u8868"}),"\n",(0,a.jsx)(t.li,{children:"\u4e0a\u4f20\u6587\u4ef6"}),"\n",(0,a.jsx)(t.li,{children:"\u4e0b\u8f7d\u6587\u4ef6"}),"\n",(0,a.jsx)(t.li,{children:"\u83b7\u53d6\u6587\u4ef6\u7684\u9884\u89c8url"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"31-\u63a5\u53e3\u5b9a\u4e49",children:"3.1 \u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@RestController\n@RequestMapping("/oss")\n@Tags(value = {\n        @Tag(name = "\u30101.0.0\u3011-\u3010OSS\u3011")\n})\npublic class OssController {\n\n    @Autowired(required = false)\n    private FileService fileService;\n\n    @PostMapping("bucket/create")\n    @Operation(summary = "\u3010\u65b0\u5efa\u5b58\u50a8\u6876\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY)\n    })\n    public Result<Bucket> createBucket(@RequestParam String bucketName) throws Exception {\n        Bucket result = fileService.createBucket(bucketName);\n        return Result.success(result);\n    }\n\n    @GetMapping("bucket/list")\n    @Operation(summary = "\u3010\u5b58\u50a8\u6876\u5217\u8868\u3011", description = "Hui Liu")\n    public Result<List<Bucket>> listBucket() throws Exception {\n        List<Bucket> results = fileService.listBuckets();\n        return Result.success(results);\n    }\n\n    @DeleteMapping("bucket/delete")\n    @Operation(summary = "\u3010\u5220\u9664\u5b58\u50a8\u6876\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY)\n    })\n    public Result<Boolean> removeBucket(@RequestParam String bucketName) throws Exception {\n        fileService.removeBucket(bucketName);\n        return Result.success(true);\n    }\n\n    @GetMapping("list")\n    @Operation(summary = "\u3010\u6587\u4ef6\u5217\u8868\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY)\n    })\n    public Result<List<S3ObjectSummary>> list(String bucketName) throws Exception {\n        List<S3ObjectSummary> results = fileService.listObjects(bucketName, true);\n        return Result.success(results);\n    }\n\n    @PostMapping("upload")\n    @Operation(summary = "\u3010\u4e0a\u4f20\u6587\u4ef6\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "file", description = "\u6587\u4ef6", in = ParameterIn.QUERY)\n    })\n    public Result<PutObjectResult> upload(MultipartFile file) throws Exception {\n        PutObjectResult result = fileService.putObject(null, file.getOriginalFilename(), file.getInputStream(), file.getContentType());\n        return Result.success(result);\n    }\n\n    @PostMapping("preview")\n    @Operation(summary = "\u3010\u83b7\u53d6\u9884\u89c8url\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "filename", description = "\u6587\u4ef6\u540d", in = ParameterIn.QUERY)\n    })\n    public Result<String> preview(@RequestParam String filename) throws Exception {\n        String result = fileService.getPreSignViewUrl(null, filename, DateTool.fromNow(Duration.ofHours(1L)));\n        return Result.success(result);\n    }\n\n    @GetMapping("download")\n    @Operation(summary = "\u3010\u4e0b\u8f7d\u6587\u4ef6\u3011", description = "Hui Liu")\n    @Parameters(value = {\n            @Parameter(name = "filename", description = "\u6587\u4ef6\u540d", in = ParameterIn.QUERY)\n    })\n    public void download(@RequestParam String filename, HttpServletResponse response) throws Exception {\n        S3Object object = fileService.getObject(null, filename);\n        byte[] results = object.getObjectContent().readAllBytes();\n        download(response, filename, results);\n    }\n\n    public void download(HttpServletResponse response, String filename, byte[] bytes) throws IOException {\n        try {\n            // \u9632\u6b62\u4e2d\u6587\u4e71\u7801\n            String encodedFilename = URLEncoder.encode(filename, StandardCharsets.UTF_8.name())\n                    .replaceAll("\\\\+", "%20");\n\n            MediaType mediaType = MediaTypeFactory.getMediaType(filename)\n                    .orElse(MediaType.APPLICATION_OCTET_STREAM);\n\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentLength(bytes.length);\n            headers.setContentType(mediaType);\n            headers.setAccessControlAllowOrigin("*");\n            headers.setContentDisposition(ContentDisposition.attachment().filename(encodedFilename).build());\n\n            for (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n                response.setHeader(entry.getKey(), entry.getValue().getFirst());\n            }\n            ServletOutputStream outputStream = response.getOutputStream();\n            outputStream.write(bytes);\n            outputStream.flush();\n        } catch (Exception e) {\n            throw BizException.throwException(ResponseEnum.EXCEL_EXPORT_ERROR.getDesc(), e);\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"32-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",children:"3.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"public interface FileService {\n\n    Bucket createBucket(String bucketName) throws Exception;\n\n    List<Bucket> listBuckets() throws Exception;\n\n    void removeBucket(String bucketName) throws Exception;\n\n    List<S3ObjectSummary> listObjects(String bucketName, boolean recursive) throws Exception;\n\n    PutObjectResult putObject(String bucketName, String objectName, InputStream inputStream, String contentType) throws Exception;\n\n    String getPreSignViewUrl(String bucketName, String filename, Date expireAt) throws Exception;\n\n    S3Object getObject(String bucketName, String filename) throws Exception;\n\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"33-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",children:"3.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"@Slf4j\n@Service\npublic class FileServiceImpl implements FileService {\n\n    @Resource\n    private OssTemplate ossTemplate;\n\n    @Override\n    public Bucket createBucket(String bucketName) throws Exception {\n        return ossTemplate.createBucket(bucketName);\n    }\n\n    @Override\n    public List<Bucket> listBuckets() throws Exception {\n        return ossTemplate.listBuckets();\n    }\n\n    @Override\n    public void removeBucket(String bucketName) throws Exception {\n        ossTemplate.removeBucket(bucketName);\n    }\n\n    @Override\n    public List<S3ObjectSummary> listObjects(String bucketName, boolean recursive) throws Exception {\n        return ossTemplate.listObjects(bucketName, recursive);\n    }\n\n    @Override\n    public PutObjectResult putObject(String bucketName, String objectName, InputStream inputStream, String contentType) throws Exception {\n        return ossTemplate.putObject(bucketName, objectName, inputStream, contentType);\n    }\n\n    @Override\n    public String getPreSignViewUrl(String bucketName, String filename, Date expireAt) throws Exception {\n        return ossTemplate.getPreSignViewUrl(bucketName, filename, expireAt);\n    }\n\n    @Override\n    public S3Object getObject(String bucketName, String filename) throws Exception {\n        return ossTemplate.getObject(bucketName, filename);\n    }\n\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"34-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",children:"3.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"# \u521b\u5efabucket\ncurl -X POST 'http://localhost:10030/demo/oss/bucket/create?bucketName=test'\n\n# \u83b7\u53d6bucket\u5217\u8868\ncurl -X GET 'http://localhost:10030/demo/oss/bucket/list'\n\n# \u5220\u9664bucket\ncurl -X DELETE 'http://localhost:10030/demo/oss/bucket/delete?bucketName=test'\n\n# \u83b7\u53d6\u6587\u4ef6\u5217\u8868\ncurl -X GET 'http://localhost:10030/demo/oss/list?bucketName=test'\n\n# \u4e0a\u4f20\u6587\u4ef6\ncurl -X POST 'http://localhost:10030/demo/oss/upload?bucketName=test'  -H \"Content-Type: multipart/form-data\" --form 'file=@C:/Users/light/Desktop/temp.yaml'\n\n# \u83b7\u53d6\u6587\u4ef6\u9884\u89c8url\ncurl -X POST 'http://localhost:10030/demo/oss/preview?filename=temp'\n\n# \u4e0b\u8f7d\u6587\u4ef6\ncurl -X GET 'http://localhost:10030/demo/oss/download?filename=temp.yaml' -o temp.yaml\n"})}),"\n",(0,a.jsx)(t.h2,{id:"\u56db\u5206\u7247\u4e0b\u8f7d",children:"\u56db\u3001\u5206\u7247\u4e0b\u8f7d"}),"\n",(0,a.jsx)(t.p,{children:"\u652f\u6301\u5c06\u6587\u4ef6\u5206\u7247\u4e0b\u8f7d\uff0c\u53ef\u7531\u5ba2\u6237\u7aef\u6307\u5b9a\u6bcf\u4e2a\u5206\u7247\u7684\u5927\u5c0f"}),"\n",(0,a.jsx)(t.h3,{id:"41-\u63a5\u53e3\u5b9a\u4e49",children:"4.1 \u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'/**\n * \u65ad\u70b9\u4e0b\u8f7d <p>\n * https://mp.weixin.qq.com/s/HMIMpbDvuMmPU-ax43BzuA <p>\n * https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html <p>\n * https://help.aliyun.com/document_detail/39571.html <p>\n */\n@GetMapping("downloadChunk")\n@Operation(summary = "\u3010\u4e0b\u8f7d\u6587\u4ef6(\u652f\u6301\u5206\u7247)\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY),\n        @Parameter(name = "objectName", description = "\u6587\u4ef6\u540d", in = ParameterIn.QUERY),\n        @Parameter(name = "range", description = "\u4e0b\u8f7d\u7684\u8303\u56f4 bytes=0-, bytes=1024-2048, bytes=-4096", in = ParameterIn.QUERY),\n})\npublic void downloadChunk(@RequestParam String bucketName, @RequestParam String objectName, @RequestParam(required = false) String range, HttpServletResponse response) throws Exception {\n    ChunkDownload chunkDownload = fileService.downloadFile(bucketName, objectName, range);\n    byte[] bytes = chunkDownload.getS3Object().getObjectContent().readAllBytes();\n    download(response, bytes, chunkDownload.getStartByte(), chunkDownload.getEndByte());\n}\n\npublic void download(HttpServletResponse response, byte[] bytes, Long startByte, Long endByte) throws IOException {\n    // \u8bbe\u7f6eHTTP\u54cd\u5e94\u5934\n    HttpHeaders headers = new HttpHeaders();\n    headers.setContentLength(bytes.length);\n    headers.set(HttpHeaders.CONTENT_RANGE, String.format("bytes %d-%d/%d", startByte, endByte, bytes.length));\n    for (Map.Entry<String, List<String>> entry : headers.entrySet()) {\n        response.setHeader(entry.getKey(), entry.getValue().getFirst());\n    }\n    // \u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001\u7801\n    response.setStatus(HttpStatus.PARTIAL_CONTENT.value());\n    // \u8bbe\u7f6e\u54cd\u5e94\u5b57\u8282\n    ServletOutputStream outputStream = response.getOutputStream();\n    outputStream.write(bytes);\n    outputStream.flush();\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"42-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",children:"4.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"/**\n     * \u4e0b\u8f7d\u6587\u4ef6 <p>\n     * Tips\uff1a \u652f\u6301\u65ad\u70b9\u4e0b\u8f7d\n     *\n     * @param bucketName \u6587\u4ef6\u6807\u8bc6MD5\n     * @param objectName \u6587\u4ef6\u6807\u8bc6MD5\n     * @param range      \u8303\u56f4\n     */\n    ChunkDownload downloadFile(String bucketName, String objectName, String range) throws Exception;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"43-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",children:"4.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Override\npublic ChunkDownload downloadFile(String bucketName, String objectName, String range) throws Exception {\n    ObjectMetadata objectMetadata = ossTemplate.getObjectMetadata(bucketName, objectName);\n    Long totalSize = objectMetadata.getContentLength();\n    // \u5904\u7406\u5b57\u8282\u4fe1\u606f\n    ChunkDownload chunkDownload = executeRangeInfo(range, totalSize);\n\n    // rangeInfo = null\uff0c\u76f4\u63a5\u4e0b\u8f7d\u6574\u4e2a\u6587\u4ef6\n    S3Object s3Object = null;\n    if (Objects.isNull(chunkDownload)) {\n        chunkDownload = new ChunkDownload();\n        s3Object = ossTemplate.getObject(bucketName, objectName);\n    } else {\n        // \u4e0b\u8f7d\u90e8\u5206\u6587\u4ef6\n        s3Object = ossTemplate.getObjectWithRange(bucketName, objectName,\n                chunkDownload.getStartByte(), chunkDownload.getEndByte());\n    }\n\n    chunkDownload.setTotalSize(totalSize);\n    chunkDownload.setS3Object(s3Object);\n    chunkDownload.setPartSize(s3Object.getObjectMetadata().getContentLength());\n    return chunkDownload;\n}\n\nprivate ChunkDownload executeRangeInfo(String range, Long fileSize) {\n    if (StringUtils.isEmpty(range) || !range.contains("bytes=") || !range.contains("-")) {\n        return null;\n    }\n\n    long startByte = 0;\n    long endByte = fileSize - 1;\n    range = range.substring(range.lastIndexOf("=") + 1).trim();\n    String[] ranges = range.split("-");\n    if (ranges.length <= 0 || ranges.length > 2) {\n        return null;\n    }\n\n    try {\n        if (ranges.length == 1) {\n            if (range.startsWith("-")) {\n                // 1. \u5982\uff1abytes=-1024  \u4ece\u5f00\u59cb\u5b57\u8282\u5230\u7b2c1024\u4e2a\u5b57\u8282\u7684\u6570\u636e\n                endByte = Long.parseLong(ranges[0]);\n            } else if (range.endsWith("-")) {\n                // 2. \u5982\uff1abytes=1024-  \u7b2c1024\u4e2a\u5b57\u8282\u5230\u6700\u540e\u5b57\u8282\u7684\u6570\u636e\n                startByte = Long.parseLong(ranges[0]);\n            }\n        } else {\n            // 3. \u5982\uff1abytes=1024-2048  \u7b2c1024\u4e2a\u5b57\u8282\u52302048\u4e2a\u5b57\u8282\u7684\u6570\u636e\n            startByte = Long.parseLong(ranges[0]);\n            endByte = Long.parseLong(ranges[1]);\n        }\n    } catch (NumberFormatException e) {\n        startByte = 0;\n        endByte = fileSize - 1;\n    }\n\n    if (startByte >= fileSize) {\n        log.error("range error, startByte >= fileSize. startByte: {}, fileSize: {}", startByte, fileSize);\n        return null;\n    }\n\n    return BuilderTool.of(ChunkDownload.class)\n            .with(ChunkDownload::setStartByte, startByte)\n            .with(ChunkDownload::setEndByte, endByte)\n            .build();\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"44-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",children:"4.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"# \u4e0b\u8f7d\u5206\u72471\ncurl -X GET 'http://localhost:10030/demo/oss/downloadChunk?bucketName=light&objectName=temp.yaml&range=bytes=0-102400' -o temp.yaml.1\n\n# \u4e0b\u8f7d\u5206\u72472\ncurl -X GET 'http://localhost:10030/demo/oss/downloadChunk?bucketName=light&objectName=temp.yaml&range=bytes=102401-204800' -o temp.yaml.2\n\n# \u4e0b\u8f7d\u5206\u72473\ncurl -X GET 'http://localhost:10030/demo/oss/downloadChunk?bucketName=light&objectName=temp.yaml&range=bytes=204801-' -o temp.yaml.3\n"})}),"\n",(0,a.jsx)(t.h2,{id:"\u4e94\u5206\u7247\u4e0a\u4f20",children:"\u4e94\u3001\u5206\u7247\u4e0a\u4f20"}),"\n",(0,a.jsx)(t.p,{children:"\u5bf9\u4e8e\u8d85\u5927\u6587\u4ef6\u7684\u4e0a\u4f20\uff0c\u53ef\u4ee5\u5728\u524d\u7aef\u5bf9\u6587\u4ef6\u60ca\u9192\u5207\u5206\uff0c\u5206\u7247\u4e0a\u4f20"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\u6821\u9a8c\u5f53\u524d\u6587\u4ef6\u662f\u5426\u5b58\u5728"}),"\n",(0,a.jsx)(t.li,{children:"\u521d\u59cb\u5316\u4e0a\u4f20\u4efb\u52a1"}),"\n",(0,a.jsx)(t.li,{children:"\u83b7\u53d6\u9884\u7b7e\u540d\u7684\u4e0a\u4f20URL\uff0c\u524d\u7aef\u76f4\u4f20\u5230S3"}),"\n",(0,a.jsx)(t.li,{children:"\u4e0a\u4f20\u5206\u7247"}),"\n",(0,a.jsx)(t.li,{children:"\u83b7\u53d6\u6240\u6709\u5206\u7247"}),"\n",(0,a.jsx)(t.li,{children:"\u5408\u5e76\u5206\u7247"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"51-\u63a5\u53e3\u5b9a\u4e49",children:"5.1 \u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@GetMapping("chunkUpload/validate/{identifier}")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u4e0a\u4f20\u524d\u7684\u6821\u9a8c\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "identifier", description = "\u5f85\u4e0a\u4f20\u6587\u4ef6\u7684MD5", in = ParameterIn.PATH)\n})\npublic Result<TaskInfo> validate(@PathVariable("identifier") String identifier) throws Exception {\n    TaskInfo result = fileService.getTaskInfo(identifier);\n    return Result.success(result);\n}\n\n@PostMapping("chunkUpload/initTask")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u521d\u59cb\u5316\u4e0a\u4f20\u4efb\u52a1\u3011", description = "Hui Liu")\npublic Result<TaskInfo> initTask(@RequestBody InitTaskParam param) throws Exception {\n    TaskInfo result = fileService.initTask(param);\n    return Result.success(result);\n}\n\n@GetMapping("chunkUpload/{identifier}/{partNumber}")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u83b7\u53d6\u5206\u7247\u7684\u9884\u7b7e\u540d\u4e0a\u4f20\u5730\u5740\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "identifier", description = "\u5f85\u4e0a\u4f20\u6587\u4ef6\u7684MD5", in = ParameterIn.PATH),\n        @Parameter(name = "partNumber", description = "\u5206\u7247\u53f7", in = ParameterIn.PATH)\n})\npublic Result<String> preSignUploadUrl(@PathVariable("identifier") String identifier,\n                                        @PathVariable("partNumber") Integer partNumber) throws Exception {\n    TaskInfo taskInfo = fileService.getTaskInfo(identifier);\n    if (Objects.isNull(taskInfo)) {\n        Result.failure(400, "\u5206\u7247\u4efb\u52a1\u4e0d\u5b58\u5728");\n    }\n    Map<String, String> params = new HashMap<>(16);\n    params.put("partNumber", partNumber.toString());\n    params.put("uploadId", taskInfo.getUploadId());\n    String result = fileService.getPreSignUploadUrl(taskInfo.getBucketName(), taskInfo.getObjectName(),\n            DateTool.fromNow(Duration.ofHours(1L)), params);\n    return Result.success(result);\n}\n\n@PostMapping("chunkUpload/uploadPart")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u4e0a\u4f20\u5206\u7247\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY),\n        @Parameter(name = "objectName", description = "\u6587\u4ef6\u540d", in = ParameterIn.QUERY),\n        @Parameter(name = "uploadId", description = "\u4e0a\u4f20id", in = ParameterIn.QUERY),\n        @Parameter(name = "partNumber", description = "\u5206\u7247\u53f7", in = ParameterIn.QUERY),\n})\npublic Result<UploadPartResult> uploadPart(@RequestParam String bucketName, @RequestParam String objectName,\n                                            @RequestParam String uploadId, @RequestParam Integer partNumber,\n                                            MultipartFile file) throws Exception {\n    UploadPartResult result = fileService.uploadPart(bucketName, objectName, uploadId, file.getInputStream(), partNumber);\n    return Result.success(result);\n}\n\n@GetMapping("chunkUpload/listParts")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u5206\u7247\u5217\u8868\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "bucketName", description = "bucket", in = ParameterIn.QUERY),\n        @Parameter(name = "objectName", description = "\u6587\u4ef6\u540d", in = ParameterIn.QUERY),\n        @Parameter(name = "uploadId", description = "\u4e0a\u4f20id", in = ParameterIn.QUERY),\n})\npublic Result<List<PartSummary>> listParts(@RequestParam String bucketName, @RequestParam String objectName,\n                                            @RequestParam String uploadId) throws Exception {\n    List<PartSummary> results = fileService.listParts(bucketName, objectName, uploadId);\n    return Result.success(results);\n}\n\n/**\n * \u65ad\u70b9\u7eed\u4f20\uff1a\u5408\u5e76\u5206\u7247\n */\n@GetMapping("chunkUpload/merge/{identifier}")\n@Operation(summary = "\u3010\u65ad\u70b9\u7eed\u4f20\uff1a\u5408\u5e76\u5206\u7247\u3011", description = "Hui Liu")\n@Parameters(value = {\n        @Parameter(name = "identifier", description = "\u5f85\u4e0a\u4f20\u6587\u4ef6\u7684MD5", in = ParameterIn.PATH)\n})\npublic Result<CompleteMultipartUploadResult> mergeParts(@PathVariable("identifier") String identifier) throws Exception {\n    TaskInfo taskInfo = fileService.getTaskInfo(identifier);\n    if (Objects.isNull(taskInfo)) {\n        Result.failure(400, "\u5206\u7247\u4efb\u52a1\u4e0d\u5b58\u5728");\n    }\n    if (YesNoEnum.NO.eqValue(taskInfo.getFinish())) {\n        CompleteMultipartUploadResult result = fileService.completeMultiUpload(taskInfo.getBucketName(), taskInfo.getObjectName(),\n                taskInfo.getUploadId(), taskInfo.getChunkNum());\n\n        return Result.success(result);\n    }\n    return Result.success(null);\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"52-\u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49",children:"5.2 \u4e1a\u52a1\u63a5\u53e3\u5b9a\u4e49"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:"/**\n * \u6839\u636e\u6587\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\n */\nTaskInfo getTaskInfo(String identifier) throws Exception;\n\n/**\n * \u521d\u59cb\u5316\u4e00\u4e2a\u4efb\u52a1\n */\nTaskInfo initTask(InitTaskParam param) throws Exception;\n\nString getPreSignUploadUrl(String bucketName, String objectName, Date expireAt, Map<String, String> params) throws Exception;\n\nUploadPartResult uploadPart(String bucketName, String objectName, String uploadId, InputStream inputStream, Integer partNumber) throws Exception;\n\nList<PartSummary> listParts(String bucketName, String objectName, String uploadId) throws Exception;\n\nCompleteMultipartUploadResult completeMultiUpload(String bucketName, String objectName, String uploadId, Integer chunkNum) throws Exception;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"53-\u4e1a\u52a1\u5b9e\u73b0\u7c7b",children:"5.3 \u4e1a\u52a1\u5b9e\u73b0\u7c7b"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@Override\npublic TaskInfo getTaskInfo(String identifier) throws Exception {\n    // \u4eceDB\u67e5\u8be2\u5206\u7247\u4fe1\u606f\n    SliceUpload sliceUpload = sliceUploadService.queryByIdentifier(identifier);\n\n    // \u6ca1\u6709\u5206\u7247\u4fe1\u606f\uff0c\u8868\u793a\u8fd8\u672a\u521d\u59cb\u5316\u5206\u7247\u4e0a\u4f20\u4efb\u52a1\n    if (Objects.isNull(sliceUpload)) {\n        return null;\n    }\n\n    // \u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5b58\u5728\u8868\u793a\u4e0a\u4f20\u5b8c\u6210\uff0c\u4e0d\u5b58\u5728\u8868\u793a\u672a\u5b8c\u6210\n    Boolean exists = ossTemplate.doesObjectExist(sliceUpload.getBucketName(), sliceUpload.getObjectName());\n    if (exists) {\n        return BuilderTool.of(TaskInfo.class)\n                .with(TaskInfo::setFilename, sliceUpload.getFilename())\n                .with(TaskInfo::setFileIdentifier, sliceUpload.getFileIdentifier())\n                .with(TaskInfo::setBucketName, sliceUpload.getBucketName())\n                .with(TaskInfo::setObjectName, sliceUpload.getObjectName())\n                .with(TaskInfo::setUploadId, sliceUpload.getUploadId())\n                .with(TaskInfo::setTotalSize, sliceUpload.getTotalSize())\n                .with(TaskInfo::setChunkSize, sliceUpload.getChunkSize())\n                .with(TaskInfo::setChunkNum, sliceUpload.getChunkNum())\n                .with(TaskInfo::setFinish, YesNoEnum.YES.getValue())\n                .build();\n    }\n    // \u67e5\u8be2\u5df2\u5b8c\u6210\u7684\u5206\u7247\n    List<PartSummary> parts = ossTemplate.listParts(sliceUpload.getBucketName(),\n            sliceUpload.getObjectName(), sliceUpload.getUploadId());\n    return BuilderTool.of(TaskInfo.class)\n            .with(TaskInfo::setFilename, sliceUpload.getFilename())\n            .with(TaskInfo::setFileIdentifier, sliceUpload.getFileIdentifier())\n            .with(TaskInfo::setBucketName, sliceUpload.getBucketName())\n            .with(TaskInfo::setObjectName, sliceUpload.getObjectName())\n            .with(TaskInfo::setUploadId, sliceUpload.getUploadId())\n            .with(TaskInfo::setTotalSize, sliceUpload.getTotalSize())\n            .with(TaskInfo::setChunkSize, sliceUpload.getChunkSize())\n            .with(TaskInfo::setChunkNum, sliceUpload.getChunkNum())\n            .with(TaskInfo::setExistsParts, parts)\n            .with(TaskInfo::setFinish, YesNoEnum.NO.getValue())\n            .build();\n}\n\n@Override\npublic TaskInfo initTask(InitTaskParam param) throws Exception {\n    String filename = param.getFilename();\n    String bucketName = ossProperties.getDefaultBucket();\n    String suffix = filename.substring(filename.lastIndexOf(".") + 1);\n    String objectName = StrUtil.format("{}.{}", IdUtil.randomUUID(), suffix);\n\n    // \u4eceS3\u83b7\u53d6\u4e0a\u4f20id\n    InitiateMultipartUploadResult initiateMultipartUploadResult = ossTemplate.initMultiUpload(bucketName, objectName);\n    String uploadId = initiateMultipartUploadResult.getUploadId();\n\n    // \u6301\u4e45\u5316\u5230\u6570\u636e\u5e93\n    int chunkNum = (int) Math.ceil(param.getTotalSize() * 1.0 / param.getChunkSize());\n    SliceUpload sliceUpload = BuilderTool.of(SliceUpload.class)\n            .with(SliceUpload::setFilename, param.getFilename())\n            .with(SliceUpload::setFileIdentifier, param.getFileIdentifier())\n            .with(SliceUpload::setBucketName, bucketName)\n            .with(SliceUpload::setObjectName, objectName)\n            .with(SliceUpload::setUploadId, uploadId)\n            .with(SliceUpload::setTotalSize, param.getTotalSize())\n            .with(SliceUpload::setChunkSize, param.getChunkSize())\n            .with(SliceUpload::setChunkNum, chunkNum)\n            .build();\n    sliceUploadService.save(sliceUpload);\n\n    // \u8fd4\u56de\u7ed3\u679c\n    return BuilderTool.of(TaskInfo.class)\n            .with(TaskInfo::setUploadId, sliceUpload.getUploadId())\n            .with(TaskInfo::setBucketName, sliceUpload.getBucketName())\n            .with(TaskInfo::setObjectName, sliceUpload.getObjectName())\n            .with(TaskInfo::setFinish, YesNoEnum.NO.getValue())\n            .build();\n}\n\n@Override\npublic String getPreSignUploadUrl(String bucketName, String objectName, Date expireAt, Map<String, String> params) throws Exception {\n    return ossTemplate.getPreSignUploadUrl(bucketName, objectName, expireAt, params);\n}\n\n@Override\npublic UploadPartResult uploadPart(String bucketName, String objectName, String uploadId, InputStream inputStream, Integer partNumber) throws Exception {\n    SliceUpload sliceUpload = sliceUploadService.querySliceUpload(bucketName, objectName, uploadId);\n    if (Objects.isNull(sliceUpload)) {\n        throw BizException.throwException("\u672a\u627e\u5230\u4e0a\u4f20\u4fe1\u606f! bucketName: %s, bucketName: %s, bucketName: %s",\n                bucketName, objectName, uploadId);\n    }\n    return ossTemplate.uploadPart(bucketName, objectName, uploadId, inputStream, partNumber);\n}\n\n@Override\npublic List<PartSummary> listParts(String bucketName, String objectName, String uploadId) throws Exception {\n    return ossTemplate.listParts(bucketName, objectName, uploadId);\n}\n\n@Override\npublic CompleteMultipartUploadResult completeMultiUpload(String bucketName, String objectName, String uploadId, Integer chunkNum) throws Exception {\n    return ossTemplate.completeMultiUpload(bucketName, objectName, uploadId, chunkNum);\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"54-\u63a5\u53e3\u8c03\u7528\u793a\u4f8b",children:"5.4 \u63a5\u53e3\u8c03\u7528\u793a\u4f8b"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"\u6ce8\u610f\uff1a"})," MinIO S3 \u7b49\u5bf9\u6587\u4ef6\u5206\u7247\u5927\u5c0f\u6709\u8981\u6c42(> 5MB)\uff0c\u592a\u5c0f\u7684\u6587\u4ef6\u4e0d\u652f\u6301\u5408\u5e76"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"# \u4e0a\u4f20\u524d\u7684\u6821\u9a8c\ncurl -X GET 'http://localhost:10030/demo/oss/chunkUpload/validate/file-md5'\n\n# \u521d\u59cb\u5316\u4e0a\u4f20\u4efb\u52a1\ncurl -X POST 'http://localhost:10030/demo/oss/chunkUpload/initTask' \\\n--header 'MockSeed: 1' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"fileIdentifier\": \"file-md5\",\n    \"filename\": \"temp.yaml\",\n    \"totalSize\": 265135,\n    \"chunkSize\": 102400,\n    \"chunkNum\": 3\n}'\n\n# \u4e0a\u4f20\u5206\u7247\ncurl -X POST 'http://localhost:10030/demo/oss/chunkUpload/uploadPart' \\\n--header 'MockSeed: 1' \\\n--form 'bucketName=\"light\"' \\\n--form 'objectName=\"b16f23a1-fcd5-4bc1-a4b6-2d9034f58f87.yaml\"' \\\n--form 'uploadId=\"YjIxYmUxZDgtMGFiYS00NGU3LWJlNTUtM2JiZTU2MWI2ZmJmLjc1YmVmODBiLWY4MDgtNDZiMi05ODQ3LWE1OTU1NjNlYWE0Mg\"' \\\n--form 'partNumber=\"1\"' \\\n--form 'file=@C:/Users/light/Desktop/temp.yaml.1'\n\ncurl -X POST 'http://localhost:10030/demo/oss/chunkUpload/uploadPart' \\\n--header 'MockSeed: 1' \\\n--form 'bucketName=\"light\"' \\\n--form 'objectName=\"b16f23a1-fcd5-4bc1-a4b6-2d9034f58f87.yaml\"' \\\n--form 'uploadId=\"YjIxYmUxZDgtMGFiYS00NGU3LWJlNTUtM2JiZTU2MWI2ZmJmLjc1YmVmODBiLWY4MDgtNDZiMi05ODQ3LWE1OTU1NjNlYWE0Mg\"' \\\n--form 'partNumber=\"2\"' \\\n--form 'file=@C:/Users/light/Desktop/temp.yaml.2'\n\ncurl -X POST 'http://localhost:10030/demo/oss/chunkUpload/uploadPart' \\\n--header 'MockSeed: 1' \\\n--form 'bucketName=\"light\"' \\\n--form 'objectName=\"b16f23a1-fcd5-4bc1-a4b6-2d9034f58f87.yaml\"' \\\n--form 'uploadId=\"YjIxYmUxZDgtMGFiYS00NGU3LWJlNTUtM2JiZTU2MWI2ZmJmLjc1YmVmODBiLWY4MDgtNDZiMi05ODQ3LWE1OTU1NjNlYWE0Mg\"' \\\n--form 'partNumber=\"3\"' \\\n--form 'file=@C:/Users/light/Desktop/temp.yaml.3'\n\n# \u5206\u7247\u5217\u8868\ncurl -X GET 'http://localhost:10030/demo/oss/chunkUpload/listParts?bucketName=light&objectName=b16f23a1-fcd5-4bc1-a4b6-2d9034f58f87.yaml&uploadId=YjIxYmUxZDgtMGFiYS00NGU3LWJlNTUtM2JiZTU2MWI2ZmJmLjc1YmVmODBiLWY4MDgtNDZiMi05ODQ3LWE1OTU1NjNlYWE0Mg'\n\n# \u83b7\u53d6\u9884\u7b7e\u540d\u4e0a\u4f20\u5730\u5740\ncurl -X GET 'http://localhost:10030/demo/oss/chunkUpload/file-md5/1' --header 'MockSeed: 1'\n\n# \u5408\u5e76\u5206\u7247\ncurl -X GET 'http://localhost:10030/demo/oss/chunkUpload/merge/file-md5'\n"})})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var a=n(96540);const r={},i=a.createContext(r);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);
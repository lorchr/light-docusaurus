"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[94439],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(96540);const i={},o=r.createContext(i);function a(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:t},e.children)}},82047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"zh-cn/spring-authorization-server/SAS-Wecom-DingTalk-Login","title":"SAS-Wecom-DingTalk-Login","description":"\u4e00\u3001\u524d\u8a00","source":"@site/docs/zh-cn/spring-authorization-server/22-SAS-Wecom-DingTalk-Login.md","sourceDirName":"zh-cn/spring-authorization-server","slug":"/zh-cn/spring-authorization-server/SAS-Wecom-DingTalk-Login","permalink":"/docs/zh-cn/spring-authorization-server/SAS-Wecom-DingTalk-Login","draft":false,"unlisted":false,"editUrl":"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/22-SAS-Wecom-DingTalk-Login.md","tags":[],"version":"current","sidebarPosition":22,"frontMatter":{},"sidebar":"troch","previous":{"title":"Opaque-Token-Resource-Server","permalink":"/docs/zh-cn/spring-authorization-server/Opaque-Token-Resource-Server"},"next":{"title":"LDAP-Login","permalink":"/docs/zh-cn/spring-authorization-server/LDAP-Login"}}');var i=n(74848),o=n(28453);const a={},s=void 0,u={},c=[{value:"\u4e00\u3001\u524d\u8a00",id:"\u4e00\u524d\u8a00",level:2},{value:"\u4e8c\u3001\u5206\u6790",id:"\u4e8c\u5206\u6790",level:2},{value:"\u4e09\u3001\u51c6\u5907",id:"\u4e09\u51c6\u5907",level:2},{value:"\u5fae\u4fe1\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",id:"\u5fae\u4fe1\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",level:3},{value:"\u9489\u9489\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",id:"\u9489\u9489\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",level:3},{value:"\u56db\u3001\u7f16\u7801",id:"\u56db\u7f16\u7801",level:2},{value:"1. \u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u9002\u914d\u5668",id:"1-\u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u9002\u914d\u5668",level:3},{value:"1. AuthorizationRequestCustomizerAdapter",id:"1-authorizationrequestcustomizeradapter",level:4},{value:"2. OAuth2AccessTokenResponseClientAdapter",id:"2-oauth2accesstokenresponseclientadapter",level:4},{value:"3. OAuth2UserRequestEntityConverterAdapter",id:"3-oauth2userrequestentityconverteradapter",level:4},{value:"2. \u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u59d4\u6258\u7c7b",id:"2-\u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u59d4\u6258\u7c7b",level:3},{value:"1. AuthorizationRequestCustomizerDelegator",id:"1-authorizationrequestcustomizerdelegator",level:4},{value:"2. OAuth2AccessTokenResponseClientDelegator",id:"2-oauth2accesstokenresponseclientdelegator",level:4},{value:"3. OAuth2UserRequestEntityConverterDelegator",id:"3-oauth2userrequestentityconverterdelegator",level:4},{value:"3. \u9489\u9489\u7684\u9002\u914d\u5668\u5b9e\u73b0",id:"3-\u9489\u9489\u7684\u9002\u914d\u5668\u5b9e\u73b0",level:3},{value:"1.DingTalkAccessTokenResponseClient",id:"1dingtalkaccesstokenresponseclient",level:4},{value:"2. DingTalkAuthorizationRequestConsumer",id:"2-dingtalkauthorizationrequestconsumer",level:4},{value:"3. DingTalkCodeGrantRequestEntityConverter",id:"3-dingtalkcodegrantrequestentityconverter",level:4},{value:"4. DingTalkMapAccessTokenResponseConverter",id:"4-dingtalkmapaccesstokenresponseconverter",level:4},{value:"5. DingTalkUserRequestEntityConverter",id:"5-dingtalkuserrequestentityconverter",level:4},{value:"6. DingTalkUserResponseConverter",id:"6-dingtalkuserresponseconverter",level:4},{value:"7. DingTalkParameterNames",id:"7-dingtalkparameternames",level:4},{value:"8. DingTalkUserConverter",id:"8-dingtalkuserconverter",level:4},{value:"9. DingTalkOAuth2LoginAuthenticationProvider",id:"9-dingtalkoauth2loginauthenticationprovider",level:4},{value:"4. \u4f01\u4e1a\u5fae\u4fe1\u7684\u9002\u914d\u5668\u5b9e\u73b0",id:"4-\u4f01\u4e1a\u5fae\u4fe1\u7684\u9002\u914d\u5668\u5b9e\u73b0",level:3},{value:"1. WecomAccessTokenResponseClient",id:"1-wecomaccesstokenresponseclient",level:4},{value:"2. WecomAuthorizationRequestConsumer",id:"2-wecomauthorizationrequestconsumer",level:4},{value:"3. WecomCodeGrantRequestEntityConverter",id:"3-wecomcodegrantrequestentityconverter",level:4},{value:"4. WecomMapAccessTokenResponseConverter",id:"4-wecommapaccesstokenresponseconverter",level:4},{value:"5. WecomUserRequestEntityConverter",id:"5-wecomuserrequestentityconverter",level:4},{value:"6. WecomUserResponseConverter",id:"6-wecomuserresponseconverter",level:4},{value:"7. WecomParameterNames",id:"7-wecomparameternames",level:4},{value:"8. WecomUserConverter",id:"8-wecomuserconverter",level:4},{value:"5. \u5fae\u4fe1\u7684\u7f51\u9875\u6388\u6743\u767b\u5f55\u7684\u6539\u9020",id:"5-\u5fae\u4fe1\u7684\u7f51\u9875\u6388\u6743\u767b\u5f55\u7684\u6539\u9020",level:3},{value:"1. WechatAccessTokenResponseClient",id:"1-wechataccesstokenresponseclient",level:4},{value:"2. WechatAuthorizationRequestConsumer",id:"2-wechatauthorizationrequestconsumer",level:4},{value:"3. WechatCodeGrantRequestEntityConverter",id:"3-wechatcodegrantrequestentityconverter",level:4},{value:"4. WechatMapAccessTokenResponseConverter",id:"4-wechatmapaccesstokenresponseconverter",level:4},{value:"5. WechatUserRequestEntityConverter",id:"5-wechatuserrequestentityconverter",level:4},{value:"6. WechatUserResponseConverter",id:"6-wechatuserresponseconverter",level:4},{value:"7. WechatParameterNames",id:"7-wechatparameternames",level:4},{value:"6. \u914d\u7f6e\u9002\u914d\u5668\u3001\u59d4\u6258\u7c7b\u5230OAuth2 \u914d\u7f6e\u7c7b",id:"6-\u914d\u7f6e\u9002\u914d\u5668\u59d4\u6258\u7c7b\u5230oauth2-\u914d\u7f6e\u7c7b",level:3},{value:"1. BasicAuthorizationRequestResolver",id:"1-basicauthorizationrequestresolver",level:4},{value:"2. BeanConfig",id:"2-beanconfig",level:4},{value:"3. ResourceConfig",id:"3-resourceconfig",level:4},{value:"4. TestController",id:"4-testcontroller",level:4},{value:"5. CustomOAuth2UserService",id:"5-customoauth2userservice",level:4},{value:"6. application.yaml",id:"6-applicationyaml",level:4},{value:"\u4e94\u3001\u6d4b\u8bd5",id:"\u4e94\u6d4b\u8bd5",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"\u4e00\u524d\u8a00",children:"\u4e00\u3001\u524d\u8a00"}),"\n",(0,i.jsx)(t.h2,{id:"\u4e8c\u5206\u6790",children:"\u4e8c\u3001\u5206\u6790"}),"\n",(0,i.jsx)(t.h2,{id:"\u4e09\u51c6\u5907",children:"\u4e09\u3001\u51c6\u5907"}),"\n",(0,i.jsx)(t.h3,{id:"\u5fae\u4fe1\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",children:"\u5fae\u4fe1\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://developer.work.weixin.qq.com/resource/devtool",children:"\u8c03\u8bd5\u5de5\u5177"})}),"\n"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\u767b\u5f55PC\u7248\u4f01\u4e1a\u5fae\u4fe1\uff0c\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u901a\u8baf\u5f55"})," - ",(0,i.jsx)(t.code,{children:"\u6dfb\u52a0\u6210\u5458"})," - ",(0,i.jsx)(t.code,{children:"\u524d\u5f80\u7ba1\u7406\u540e\u53f0"}),"\uff0c\u6216",(0,i.jsx)(t.a,{href:"https://work.weixin.qq.com/wework_admin/loginpage_wx",children:"\u76f4\u63a5\u8bbf\u95ee"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u6211\u7684\u4f01\u4e1a"})," \u8bb0\u5f55\u4e0b\u65b9\u7684 ",(0,i.jsx)(t.code,{children:"\u4f01\u4e1aID"})," \u5b57\u6bb5"]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5e94\u7528\u7ba1\u7406"}),"\uff0c\u5728 ",(0,i.jsx)(t.code,{children:"\u81ea\u5efa\u5e94\u7528"})," \u4e0b\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u521b\u5efa\u5e94\u7528"}),"\uff0c\u6216",(0,i.jsx)(t.a,{href:"https://work.weixin.qq.com/wework_admin/frame#/apps/createApiApp",children:"\u76f4\u63a5\u8bbf\u95ee"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u8bb0\u5f55\u5bf9\u5e94\u7684 ",(0,i.jsx)(t.code,{children:"AgentId"})," \u548c ",(0,i.jsx)(t.code,{children:"Secret"})," \u5b57\u6bb5"]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u8005\u63a5\u53e3"})," - ",(0,i.jsx)(t.code,{children:"\u7f51\u9875\u6388\u6743\u53caJS-SDK"}),"\uff0c\u8bbe\u7f6e ",(0,i.jsx)(t.code,{children:"\u53ef\u4fe1\u57df\u540d"})," \u5730\u5740 ",(0,i.jsx)(t.code,{children:"21f3d2ed.r3.cpolar.top"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u8005\u63a5\u53e3"})," - ",(0,i.jsx)(t.code,{children:"\u4f01\u4e1a\u5fae\u4fe1\u6388\u6743\u767b\u5f55"}),"\uff0c\u8bbe\u7f6e ",(0,i.jsx)(t.code,{children:"Web\u7f51\u9875"})," \u7684 ",(0,i.jsx)(t.code,{children:"\u6388\u6743\u56de\u8c03\u57df"}),"\u5730\u5740 ",(0,i.jsx)(t.code,{children:"21f3d2ed.r3.cpolar.top"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u8005\u63a5\u53e3"})," - ",(0,i.jsx)(t.code,{children:"\u4f01\u4e1a\u53ef\u4fe1IP"}),"\uff0c\u8bbe\u7f6e\u670d\u52a1\u5668\u7684\u5916\u7f51IP\u5730\u5740\uff08\u53ef\u4ee5\u5728\u4f7f\u7528\u62a5\u9519\u65f6\u5728\u8bbe\u7f6e\uff09"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"\u9489\u9489\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa",children:"\u9489\u9489\u4f01\u4e1a\u6ce8\u518c\u53ca\u5e94\u7528\u521b\u5efa"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://open.dingtalk.com/document/orgapp/tutorial-obtaining-user-personal-information",children:"\u5b9e\u73b0\u767b\u5f55\u7b2c\u4e09\u65b9\u7f51\u7ad9"})}),"\n"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\u767b\u5f55PC\u7248\u9489\u9489\uff0c\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u66f4\u591a"})," - ",(0,i.jsx)(t.code,{children:"\u7ba1\u7406\u540e\u53f0"}),"\uff0c\u6216",(0,i.jsx)(t.a,{href:"https://open-dev.dingtalk.com",children:"\u76f4\u63a5\u8bbf\u95ee"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5de5\u4f5c\u53f0"})," - ",(0,i.jsx)(t.code,{children:"\u7ba1\u7406\u5e94\u7528"})," - ",(0,i.jsx)(t.code,{children:"\u521b\u5efa\u5e94\u7528"}),"\uff0c\u6216",(0,i.jsx)(t.a,{href:"https://open-dev.dingtalk.com/fe/app#/corp/app",children:"\u76f4\u63a5\u8bbf\u95ee"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u5728\u57fa\u7840\u4fe1\u606f\u9875\u9762\u8bb0\u5f55 ",(0,i.jsx)(t.code,{children:"client_id"})," ",(0,i.jsx)(t.code,{children:"client_secret"})," \u5907\u7528"]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u914d\u7f6e"})," - ",(0,i.jsx)(t.code,{children:"\u6743\u9650\u7ba1\u7406"}),"\uff0c\u7ed9\u5e94\u7528\u6388\u4e88 ",(0,i.jsx)(t.code,{children:"\u901a\u8baf\u5f55\u4e2a\u4eba\u4fe1\u606f\u8bfb\u6743\u9650"})," \u6743\u9650"]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u914d\u7f6e"})," - ",(0,i.jsx)(t.code,{children:"\u5b89\u5168\u8bbe\u7f6e"}),"\uff0c\u914d\u7f6e\u514d\u767b\u5f55\u5730\u5740 ",(0,i.jsx)(t.code,{children:"http://968395c.r3.cpolar.top"})]}),"\n",(0,i.jsxs)(t.li,{children:["\u70b9\u51fb ",(0,i.jsx)(t.code,{children:"\u5f00\u53d1\u914d\u7f6e"})," - ",(0,i.jsx)(t.code,{children:"\u5206\u4eab\u8bbe\u7f6e"}),"\uff0c\u914d\u7f6e\u56de\u8c03\u5730\u5740 ",(0,i.jsx)(t.code,{children:"http://968395c.r3.cpolar.top/login/oauth2/code/ding_talk"})]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:'# \u83b7\u53d6Token\ncurl -I -X POST https://api.dingtalk.com/v1.0/oauth2/userAccessToken \\\n -H \'Content-Type: application/json\' \\\n -d \'{\n  "clientId" : "dingutlbtrmynzsxoznm",\n  "clientSecret" : "6GG1WRTTyfxArA3TuRB6tSvOn2kpDMxrhC64pVhhndgvsIlMJlitX_f4TYkInrsZ",\n  "code" : "cecd31b3c56d3ce88f49cb40dbe5f754",\n  "grant-type" : "authorization_code",\n  "grantType" : "authorization_code"\n}\'\n\n# \u83b7\u53d6\u7528\u6237\u4fe1\u606f\ncurl -I -X GET https://api.dingtalk.com/v1.0/contact/users/me \\\n  -H \'x-acs-dingtalk-access-token: 8d354635812b3047888988ee9f984564\'\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"\u56db\u7f16\u7801",children:"\u56db\u3001\u7f16\u7801"}),"\n",(0,i.jsx)(t.h3,{id:"1-\u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u9002\u914d\u5668",children:"1. \u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u9002\u914d\u5668"}),"\n",(0,i.jsx)(t.h4,{id:"1-authorizationrequestcustomizeradapter",children:"1. AuthorizationRequestCustomizerAdapter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.adapter;\n\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\n\nimport java.util.function.Consumer;\nimport java.util.function.Predicate;\n\n/**\n * \u53d1\u8d77\u8ba4\u8bc1\u8bf7\u6c42\u7684\u9002\u914d\u5668\n */\npublic abstract class AuthorizationRequestCustomizerAdapter\n        implements Predicate<OAuth2AuthorizationRequest.Builder>,\n        Consumer<OAuth2AuthorizationRequest.Builder> {\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-oauth2accesstokenresponseclientadapter",children:"2. OAuth2AccessTokenResponseClientAdapter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.adapter;\n\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AccessTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\n\nimport java.util.function.Predicate;\n\n/**\n * \u83b7\u53d6Token\u7684\u5ba2\u6237\u7aef\u9002\u914d\u5668\n */\npublic abstract class OAuth2AccessTokenResponseClientAdapter\n        implements OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest>,\n        Predicate<OAuth2AuthorizationCodeGrantRequest> {\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"3-oauth2userrequestentityconverteradapter",children:"3. OAuth2UserRequestEntityConverterAdapter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.adapter;\n\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequestEntityConverter;\n\nimport java.util.function.Predicate;\n\n/**\n * \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\u9002\u914d\u5668\n */\npublic abstract class OAuth2UserRequestEntityConverterAdapter\n        extends OAuth2UserRequestEntityConverter\n        implements Predicate<OAuth2UserRequest> {\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2-\u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u59d4\u6258\u7c7b",children:"2. \u81ea\u5b9a\u4e49\u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\u76f8\u5173\u59d4\u6258\u7c7b"}),"\n",(0,i.jsx)(t.h4,{id:"1-authorizationrequestcustomizerdelegator",children:"1. AuthorizationRequestCustomizerDelegator"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.delegator;\n\nimport com.light.sas.authorization.baisc.adapter.AuthorizationRequestCustomizerAdapter;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\n\nimport java.util.List;\nimport java.util.function.Consumer;\n\n/**\n * \u767b\u5f55\u8ba4\u8bc1\u8bf7\u6c42\u59d4\u6258\u7c7b\n */\n@RequiredArgsConstructor\npublic class AuthorizationRequestCustomizerDelegator implements Consumer<OAuth2AuthorizationRequest.Builder> {\n\n    private final List<AuthorizationRequestCustomizerAdapter> customizers;\n\n    @Override\n    public void accept(OAuth2AuthorizationRequest.Builder builder) {\n        for (AuthorizationRequestCustomizerAdapter customizer : customizers) {\n            if (customizer.test(builder)) {\n                customizer.accept(builder);\n            }\n        }\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-oauth2accesstokenresponseclientdelegator",children:"2. OAuth2AccessTokenResponseClientDelegator"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.delegator;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2AccessTokenResponseClientAdapter;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AccessTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\n\nimport java.util.List;\n\n/**\n * \u83b7\u53d6Token\u7684\u5ba2\u6237\u7aef\u59d4\u6258\u7c7b\n */\n@RequiredArgsConstructor\npublic class OAuth2AccessTokenResponseClientDelegator implements OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> {\n\n    /**\n     * \u9ed8\u8ba4\u4f7f\u7528DefaultAuthorizationCodeTokenResponseClient\u6765\u83b7\u53d6token\n     */\n    private final DefaultAuthorizationCodeTokenResponseClient tokenResponseClient = new DefaultAuthorizationCodeTokenResponseClient();\n\n    private final List<OAuth2AccessTokenResponseClientAdapter> clients;\n\n    @Override\n    public OAuth2AccessTokenResponse getTokenResponse(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        for (OAuth2AccessTokenResponseClientAdapter client : clients) {\n            if (client.test(authorizationGrantRequest)) {\n                return client.getTokenResponse(authorizationGrantRequest);\n            }\n        }\n        return tokenResponseClient.getTokenResponse(authorizationGrantRequest);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"3-oauth2userrequestentityconverterdelegator",children:"3. OAuth2UserRequestEntityConverterDelegator"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc.delegator;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2UserRequestEntityConverterAdapter;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequestEntityConverter;\n\nimport java.util.List;\n\n/**\n * \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\u59d4\u6258\u7c7b\n */\n@RequiredArgsConstructor\npublic class OAuth2UserRequestEntityConverterDelegator extends OAuth2UserRequestEntityConverter {\n\n    private final List<OAuth2UserRequestEntityConverterAdapter> converters;\n\n    @Override\n    public RequestEntity<?> convert(OAuth2UserRequest userRequest) {\n        for (OAuth2UserRequestEntityConverterAdapter converter : converters) {\n            if (converter.test(userRequest)) {\n                return converter.convert(userRequest);\n            }\n        }\n        return super.convert(userRequest);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3-\u9489\u9489\u7684\u9002\u914d\u5668\u5b9e\u73b0",children:"3. \u9489\u9489\u7684\u9002\u914d\u5668\u5b9e\u73b0"}),"\n",(0,i.jsx)(t.h4,{id:"1dingtalkaccesstokenresponseclient",children:"1.DingTalkAccessTokenResponseClient"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2AccessTokenResponseClientAdapter;\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.http.converter.OAuth2AccessTokenResponseHttpMessageConverter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * \u6570\u636e\u54cd\u5e94\u5904\u7406\u7c7b\n */\n@Component\npublic class DingTalkAccessTokenResponseClient extends OAuth2AccessTokenResponseClientAdapter {\n\n    /**\n     * \u9ed8\u8ba4\u4f7f\u7528DefaultAuthorizationCodeTokenResponseClient\u6765\u83b7\u53d6token\n     */\n    private final DefaultAuthorizationCodeTokenResponseClient tokenResponseClient = new DefaultAuthorizationCodeTokenResponseClient();\n\n    private final DingTalkCodeGrantRequestEntityConverter grantRequestEntityConverter = new DingTalkCodeGrantRequestEntityConverter();\n\n    private final RestTemplate restTemplate;\n    public DingTalkAccessTokenResponseClient() {\n        tokenResponseClient.setRequestEntityConverter(grantRequestEntityConverter);\n        // \u81ea\u5b9a\u4e49 RestTemplate\uff0c\u9002\u914d\u9489\u9489\u767b\u5f55\u83b7\u53d6token\n        OAuth2AccessTokenResponseHttpMessageConverter messageConverter = new OAuth2AccessTokenResponseHttpMessageConverter();\n        List<MediaType> mediaTypes = new ArrayList<>(messageConverter.getSupportedMediaTypes());\n        // \u9489\u9489\u83b7\u53d6token\u65f6\u54cd\u5e94\u7684\u7c7b\u578b\u4e3a application/json\uff0c\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\n        mediaTypes.add(MediaType.APPLICATION_JSON);\n        messageConverter.setAccessTokenResponseConverter(new DingTalkMapAccessTokenResponseConverter());\n        messageConverter.setSupportedMediaTypes(mediaTypes);\n\n        // \u521d\u59cb\u5316RestTemplate\n        restTemplate = new RestTemplate(Arrays.asList(\n                // \u9ed8\u8ba4\u652f\u6301application/x-www-form-urlencoded\n                // new FormHttpMessageConverter(),\n                messageConverter,\n                // \u9ed8\u8ba4\u652f\u6301application/json\n                new MappingJackson2HttpMessageConverter()\n                ));\n\n        restTemplate.setErrorHandler(new OAuth2ErrorResponseErrorHandler());\n        tokenResponseClient.setRestOperations(restTemplate);\n    }\n\n    @Override\n    public boolean test(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        String registrationId = authorizationGrantRequest.getClientRegistration().getRegistrationId();\n\n        return DingTalkParameterNames.THIRD_LOGIN_DING_TALK.equals(registrationId);\n    }\n\n    @Override\n    public OAuth2AccessTokenResponse getTokenResponse(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        OAuth2AccessTokenResponse tokenResponse = tokenResponseClient.getTokenResponse(authorizationGrantRequest);\n        String code = authorizationGrantRequest.getAuthorizationExchange()\n                .getAuthorizationResponse()\n                .getCode();\n        // \u628acode\u653e\u5728OAuth2AccessTokenResponse\u4e2d\n        Map<String, Object> additionalParameters = new HashMap<>(tokenResponse.getAdditionalParameters());\n        additionalParameters.put(OAuth2ParameterNames.CODE, code);\n\n        return OAuth2AccessTokenResponse.withResponse(tokenResponse)\n                .additionalParameters(additionalParameters)\n                .build();\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-dingtalkauthorizationrequestconsumer",children:"2. DingTalkAuthorizationRequestConsumer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.authorization.baisc.adapter.AuthorizationRequestCustomizerAdapter;\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Objects;\n\n/**\n * \u81ea\u5b9a\u4e49\u9489\u9489\u767b\u5f55\u8ba4\u8bc1\u8bf7\u6c42\n */\n@Component\npublic class DingTalkAuthorizationRequestConsumer extends AuthorizationRequestCustomizerAdapter {\n\n    @Override\n    public boolean test(OAuth2AuthorizationRequest.Builder builder) {\n        OAuth2AuthorizationRequest authorizationRequest = builder.build();\n        Object registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        return Objects.equals(registrationId, DingTalkParameterNames.THIRD_LOGIN_DING_TALK);\n    }\n\n    @Override\n    public void accept(OAuth2AuthorizationRequest.Builder builder) {\n        OAuth2AuthorizationRequest authorizationRequest = builder.build();\n        Object registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        // \u5c06prompt\u6dfb\u52a0\u81f3\u8bf7\u6c42\u53c2\u6570\u4e2d\n        builder.additionalParameters((params) -> params.put(DingTalkParameterNames.PROMPT, DingTalkParameterNames.PROMPT_CONSENT));\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"3-dingtalkcodegrantrequestentityconverter",children:"3. DingTalkCodeGrantRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequestEntityConverter;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\n\nimport java.net.URI;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * \u9489\u9489\u767b\u5f55\u8bf7\u6c42token\u5165\u53c2\u5904\u7406\u7c7b\n */\npublic class DingTalkCodeGrantRequestEntityConverter extends OAuth2AuthorizationCodeGrantRequestEntityConverter {\n\n    @Override\n    protected MultiValueMap<String, String> createParameters(OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest) {\n        // \u5982\u679c\u662f\u5fae\u4fe1\u767b\u5f55\uff0c\u83b7\u53d6token\u65f6\u643a\u5e26appid\u53c2\u6570\u4e0esecret\u53c2\u6570\n        MultiValueMap<String, String> parameters = super.createParameters(authorizationCodeGrantRequest);\n        ClientRegistration clientRegistration = authorizationCodeGrantRequest.getClientRegistration();\n        String registrationId = clientRegistration.getRegistrationId();\n        if (DingTalkParameterNames.THIRD_LOGIN_DING_TALK.equals(registrationId)) {\n            // \u5982\u679c\u5f53\u524d\u662f\u9489\u9489\u767b\u5f55\uff0c\u643a\u5e26clientId\u548cclientSecret\n            parameters.add(DingTalkParameterNames.CLIENT_ID, clientRegistration.getClientId());\n            parameters.add(DingTalkParameterNames.CLIENT_SECRET, clientRegistration.getClientSecret());\n            parameters.add(DingTalkParameterNames.GRANT_TYPE, DingTalkParameterNames.AUTHORIZATION_CODE);\n\n            parameters.remove(OAuth2ParameterNames.GRANT_TYPE);\n            parameters.remove(OAuth2ParameterNames.REDIRECT_URI);\n        }\n        return parameters;\n    }\n\n    @Override\n    public RequestEntity<?> convert(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        RequestEntity<?> requestEntity = super.convert(authorizationGrantRequest);\n        URI url = requestEntity.getUrl();\n        HttpMethod method = requestEntity.getMethod();\n\n        // \u53c2\u6570\u9ed8\u8ba4\u4e3aform\u8868\u5355\u683c\u5f0f\uff0c\u9700\u8981\u8f6c\u4e3ajson\u683c\u5f0f\n        LinkedMultiValueMap<String, String> originalBody = (LinkedMultiValueMap<String, String>) requestEntity.getBody();\n        String clientId = originalBody.get(DingTalkParameterNames.CLIENT_ID).get(0);\n        String clientSecret = originalBody.get(DingTalkParameterNames.CLIENT_SECRET).get(0);\n        String grantType = originalBody.get(DingTalkParameterNames.GRANT_TYPE).get(0);\n        String code = originalBody.get(OAuth2ParameterNames.CODE).get(0);\n\n        Map<String, Object> body = new LinkedHashMap<>();\n        body.put(OAuth2ParameterNames.CODE, code);\n        body.put(DingTalkParameterNames.CLIENT_ID, clientId);\n        body.put(DingTalkParameterNames.CLIENT_SECRET, clientSecret);\n        body.put(DingTalkParameterNames.GRANT_TYPE, grantType);\n\n        // \u8bbe\u7f6e\u8bf7\u6c42\u5934 Content-Type \u9ed8\u8ba4\u503c\u4e3a application/x-www-form-urlencoded;charset=UTF-8 \u9489\u9489\u9700\u8981\u8bbe\u7f6e\u4e3a application/json\n        HttpHeaders headers = requestEntity.getHeaders();\n        HttpHeaders httpHeaders = new HttpHeaders();\n        httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n        httpHeaders.setAccept(headers.getAccept());\n        httpHeaders.set(DingTalkParameterNames.HEADER_AUTHORIZATION, headers.get(DingTalkParameterNames.HEADER_AUTHORIZATION).get(0));\n\n        return new RequestEntity<>(body, httpHeaders, method, url);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"4-dingtalkmapaccesstokenresponseconverter",children:"4. DingTalkMapAccessTokenResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * \u9489\u9489\u767b\u5f55\u83b7\u53d6token\u7684\u54cd\u5e94\u5904\u7406\u7c7b\n */\npublic class DingTalkMapAccessTokenResponseConverter implements Converter<Map<String, Object>, OAuth2AccessTokenResponse> {\n\n    private static final Set<String> TOKEN_RESPONSE_PARAMETER_NAMES = new HashSet<>(\n            Arrays.asList(DingTalkParameterNames.ACCESS_TOKEN,\n                    DingTalkParameterNames.REFRESH_TOKEN,\n                    DingTalkParameterNames.EXPIRES_IN));\n\n    @Override\n    public OAuth2AccessTokenResponse convert(Map<String, Object> source) {\n        String accessToken = getParameterValue(source, DingTalkParameterNames.ACCESS_TOKEN);\n        OAuth2AccessToken.TokenType accessTokenType = getAccessTokenType(source);\n        long expiresIn = getExpiresIn(source);\n        Set<String> scopes = getScopes(source);\n        String refreshToken = getParameterValue(source, DingTalkParameterNames.REFRESH_TOKEN);\n        Map<String, Object> additionalParameters = new LinkedHashMap<>();\n        for (Map.Entry<String, Object> entry : source.entrySet()) {\n            if (!TOKEN_RESPONSE_PARAMETER_NAMES.contains(entry.getKey())) {\n                additionalParameters.put(entry.getKey(), entry.getValue());\n            }\n        }\n        // Note: \u5e94\u4e3a\u9489\u9489\u7684\u7528\u6237\u4fe1\u606f\u9700\u8981 openid scope\u6743\u9650\uff0c\u6846\u67b6\u9ed8\u8ba4openid scope\u7684\u8bf7\u6c42\u7531 OidcAuthorizationCodeAuthenticationProvider \u5904\u7406\n        // \u975eopenid\u8bf7\u6c42 org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationProvider.authenticate\n        // \u5e26openid\u8bf7\u6c42 org.springframework.security.oauth2.client.oidc.authentication.OidcAuthorizationCodeAuthenticationProvider.authenticate\n        additionalParameters.put(OidcParameterNames.ID_TOKEN, accessToken);\n        return OAuth2AccessTokenResponse.withToken(accessToken)\n                // \u5982\u679ctoken type\u4e3a\u7a7a\uff0c\u7ed9\u4e2a\u9ed8\u8ba4\u503c\n                .tokenType(accessTokenType == null ? OAuth2AccessToken.TokenType.BEARER : accessTokenType)\n                .expiresIn(expiresIn)\n                .scopes(scopes)\n                .refreshToken(refreshToken)\n                .additionalParameters(additionalParameters)\n                .build();\n    }\n\n    private static OAuth2AccessToken.TokenType getAccessTokenType(Map<String, Object> tokenResponseParameters) {\n        if (OAuth2AccessToken.TokenType.BEARER.getValue()\n                .equalsIgnoreCase(getParameterValue(tokenResponseParameters, OAuth2ParameterNames.TOKEN_TYPE))) {\n            return OAuth2AccessToken.TokenType.BEARER;\n        }\n        return null;\n    }\n\n    private static long getExpiresIn(Map<String, Object> tokenResponseParameters) {\n        return getParameterValue(tokenResponseParameters, DingTalkParameterNames.EXPIRES_IN, 0L);\n    }\n\n    private static Set<String> getScopes(Map<String, Object> tokenResponseParameters) {\n        if (tokenResponseParameters.containsKey(OAuth2ParameterNames.SCOPE)) {\n            String scope = getParameterValue(tokenResponseParameters, OAuth2ParameterNames.SCOPE);\n            return new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n        return Collections.emptySet();\n    }\n\n    private static String getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName) {\n        Object obj = tokenResponseParameters.get(parameterName);\n        return (obj != null) ? obj.toString() : null;\n    }\n\n    private static long getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName,\n                                          long defaultValue) {\n        long parameterValue = defaultValue;\n\n        Object obj = tokenResponseParameters.get(parameterName);\n        if (obj != null) {\n            // Final classes Long and Integer do not need to be coerced\n            if (obj.getClass() == Long.class) {\n                parameterValue = (Long) obj;\n            }\n            else if (obj.getClass() == Integer.class) {\n                parameterValue = (Integer) obj;\n            }\n            else {\n                // Attempt to coerce to a long (typically from a String)\n                try {\n                    parameterValue = Long.parseLong(obj.toString());\n                }\n                catch (NumberFormatException ignored) {\n                }\n            }\n        }\n\n        return parameterValue;\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"5-dingtalkuserrequestentityconverter",children:"5. DingTalkUserRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2UserRequestEntityConverterAdapter;\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\n\n/**\n * \u9489\u9489\u767b\u5f55\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u53c2\u6570\u8f6c\u6362\u5668\n */\n@Component\npublic class DingTalkUserRequestEntityConverter extends OAuth2UserRequestEntityConverterAdapter {\n\n    @Override\n    public boolean test(OAuth2UserRequest userRequest) {\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        return DingTalkParameterNames.THIRD_LOGIN_DING_TALK.equals(clientRegistration.getRegistrationId());\n    }\n\n    /**\n     * https://oapi.dingtalk.com/v1.0/contact/users/{unionId}\n     */\n    @Override\n    public RequestEntity<?> convert(OAuth2UserRequest userRequest) {\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        URI uri = UriComponentsBuilder\n                .fromUriString(clientRegistration.getProviderDetails().getUserInfoEndpoint().getUri())\n                .build(DingTalkParameterNames.ME);\n\n        // token\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(DingTalkParameterNames.HEADER_X_ACS_DINGTALK_ACCESS_TOKEN, userRequest.getAccessToken().getTokenValue());\n        return new RequestEntity<>(headers, HttpMethod.GET, uri);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"6-dingtalkuserresponseconverter",children:"6. DingTalkUserResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.dingtalk;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * \u9489\u9489\u7528\u6237\u4fe1\u606f\u54cd\u5e94\u8f6c\u6362\u5668\n */\npublic class DingTalkUserResponseConverter extends MappingJackson2HttpMessageConverter {\n\n    public DingTalkUserResponseConverter() {\n        List<MediaType> mediaTypes = new ArrayList<>(super.getSupportedMediaTypes());\n        mediaTypes.add(MediaType.APPLICATION_JSON);\n        super.setSupportedMediaTypes(mediaTypes);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"7-dingtalkparameternames",children:"7. DingTalkParameterNames"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.constant;\n\n/**\n * \u9489\u9489\u767b\u5f55\u76f8\u5173\u5e38\u91cf\u53c2\u6570\n * https://open.dingtalk.com/document/orgapp/tutorial-obtaining-user-personal-information\n */\npublic class DingTalkParameterNames {\n\n    /**\n     * \u4e09\u65b9\u767b\u5f55\u7c7b\u578b\u2014\u2014DingTalk\n     */\n    public static final String THIRD_LOGIN_DING_TALK = "ding_talk";\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5e94\u7528id\n     */\n    public static final String APP_ID = "appid";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014agentid\uff1a\u5e94\u7528id\n     */\n    public static final String AGENT_ID = "agentid";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014clientId\uff1a\u5e94\u7528id\n     */\n    public static final String CLIENT_ID = "clientId";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014clientSecret\uff1a\u5fae\u4fe1\u7684\u5e94\u7528\u79d8\u94a5\n     */\n    public static final String CLIENT_SECRET = "clientSecret";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014grantType\uff1a\u6388\u6743\u7c7b\u578b\n     */\n    public static final String GRANT_TYPE = "grantType";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014authorization_code\uff1a\u6388\u6743\u7801\u6a21\u5f0f\n     */\n    public static final String AUTHORIZATION_CODE = "authorization_code";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014prompt\uff1a\u5fae\u4fe1\u7684\u5e94\u7528\u79d8\u94a5\n     */\n    public static final String PROMPT = "prompt";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014consent: \u503c\u4e3a consent \u65f6\u9700\u8981\u786e\u8ba4\u6388\u6743\n     */\n    public static final String PROMPT_CONSENT = "consent";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014accessToken\uff1aToken\u4ee4\u724c\n     */\n    public static final String ACCESS_TOKEN = "accessToken";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014refreshToken\uff1a\u5237\u65b0Token\n     */\n    public static final String REFRESH_TOKEN = "refreshToken";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014expireIn\uff1aToken\u8fc7\u671f\u65f6\u95f4\n     */\n    public static final String EXPIRES_IN = "expireIn";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014Authorization\uff1a\u8ba4\u8bc1header\u5934\u53c2\u6570\n     */\n    public static final String HEADER_AUTHORIZATION = "Authorization";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014me\uff1a\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5176\u4ed6\u7528\u6237\u4f7f\u7528unionId\u83b7\u53d6\n     */\n    public static final String ME = "me";\n\n    /**\n     * \u9489\u9489\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014me\uff1a\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4fe1\u606f\uff0c\u5176\u4ed6\u7528\u6237\u4f7f\u7528unionId\u83b7\u53d6\n     */\n    public static final String HEADER_X_ACS_DINGTALK_ACCESS_TOKEN = "x-acs-dingtalk-access-token";\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"8-dingtalkuserconverter",children:"8. DingTalkUserConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.strategy.impl;\n\nimport com.light.sas.constant.DingTalkParameterNames;\nimport com.light.sas.entity.OAuth2ThirdAccount;\nimport com.light.sas.strategy.OAuth2UserConverterStrategy;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;\n\n/**\n * \u9489\u9489\u7528\u6237\u4fe1\u606f\u8f6c\u6362\u5668\n * @see <a href="https://developer.work.weixin.qq.com/document/path/98176">\u83b7\u53d6\u7528\u6237\u4fe1\u606f</a>\n */\n@RequiredArgsConstructor\n@Component(DingTalkUserConverter.LOGIN_TYPE)\npublic class DingTalkUserConverter implements OAuth2UserConverterStrategy {\n\n    protected static final String LOGIN_TYPE = DingTalkParameterNames.THIRD_LOGIN_DING_TALK;\n\n    @Override\n    public OAuth2ThirdAccount convert(OAuth2User auth2User) {\n        // \u83b7\u53d6\u4e09\u65b9\u7528\u6237\u4fe1\u606f\n        Map<String, Object> attributes = auth2User.getAttributes();\n        // \u8f6c\u6362\u81f3Oauth2ThirdAccount\n        OAuth2ThirdAccount thirdAccount = new OAuth2ThirdAccount();\n        String uniqueId = String.valueOf(attributes.get("unionId"));\n        String openId = String.valueOf(attributes.get("openId"));\n        String mobile = String.valueOf(attributes.get("mobile"));\n        String stateCode = String.valueOf(attributes.get("stateCode"));\n        String email = String.valueOf(attributes.get("email"));\n        thirdAccount.setUniqueId(uniqueId);\n        thirdAccount.setThirdUsername(auth2User.getName());\n        thirdAccount.setType(LOGIN_TYPE);\n        // \u8bbe\u7f6e\u57fa\u7840\u7528\u6237\u4fe1\u606f\n        thirdAccount.setName(auth2User.getName());\n        thirdAccount.setAvatar(String.valueOf(attributes.get("avatarUrl")));\n        return thirdAccount;\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"9-dingtalkoauth2loginauthenticationprovider",children:"9. DingTalkOAuth2LoginAuthenticationProvider"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.dingtalk;\n\nimport com.light.sas.constant.DingTalkParameterNames;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper;\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationProvider;\nimport org.springframework.security.oauth2.client.authentication.OAuth2AuthorizationCodeAuthenticationToken;\nimport org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationToken;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserService;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.OAuth2AuthorizationException;\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.Assert;\n\nimport java.util.Collection;\nimport java.util.Map;\n\n/**\n * @see org.springframework.security.oauth2.client.authentication.OAuth2LoginAuthenticationProvider\n */\n@Component\npublic class DingTalkOAuth2LoginAuthenticationProvider implements AuthenticationProvider {\n\n    private final OAuth2AuthorizationCodeAuthenticationProvider authorizationCodeAuthenticationProvider;\n\n    private final OAuth2UserService<OAuth2UserRequest, OAuth2User> userService;\n\n    private GrantedAuthoritiesMapper authoritiesMapper = ((authorities) -> authorities);\n\n    /**\n     * Constructs an {@code OAuth2LoginAuthenticationProvider} using the provided\n     * parameters.\n     * @param accessTokenResponseClient the client used for requesting the access token\n     * credential from the Token Endpoint\n     * @param userService the service used for obtaining the user attributes of the\n     * End-User from the UserInfo Endpoint\n     */\n    public DingTalkOAuth2LoginAuthenticationProvider(\n            DingTalkAccessTokenResponseClient accessTokenResponseClient,\n            OAuth2UserService<OAuth2UserRequest, OAuth2User> userService) {\n        Assert.notNull(userService, "userService cannot be null");\n        this.authorizationCodeAuthenticationProvider = new OAuth2AuthorizationCodeAuthenticationProvider(\n                accessTokenResponseClient);\n        this.userService = userService;\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        OAuth2LoginAuthenticationToken loginAuthenticationToken = (OAuth2LoginAuthenticationToken) authentication;\n//      region Add support for DingTalkLogin\n        // Section 3.1.2.1 Authentication Request -\n        // https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest scope\n        // REQUIRED. OpenID Connect requests MUST contain the "openid" scope value.\n//        if (loginAuthenticationToken.getAuthorizationExchange()\n//                .getAuthorizationRequest()\n//                .getScopes()\n//                .contains("openid")) {\n//            // This is an OpenID Connect Authentication Request so return null\n//            // and let OidcAuthorizationCodeAuthenticationProvider handle it instead\n//            return null;\n//        }\n        ClientRegistration clientRegistration = loginAuthenticationToken.getClientRegistration();\n        if (!DingTalkParameterNames.THIRD_LOGIN_DING_TALK.equals(clientRegistration.getRegistrationId())) {\n            return null;\n        }\n//        endregion\n        OAuth2AuthorizationCodeAuthenticationToken authorizationCodeAuthenticationToken;\n        try {\n            authorizationCodeAuthenticationToken = (OAuth2AuthorizationCodeAuthenticationToken) this.authorizationCodeAuthenticationProvider\n                    .authenticate(\n                            new OAuth2AuthorizationCodeAuthenticationToken(loginAuthenticationToken.getClientRegistration(),\n                                    loginAuthenticationToken.getAuthorizationExchange()));\n        }\n        catch (OAuth2AuthorizationException ex) {\n            OAuth2Error oauth2Error = ex.getError();\n            throw new OAuth2AuthenticationException(oauth2Error, oauth2Error.toString(), ex);\n        }\n        OAuth2AccessToken accessToken = authorizationCodeAuthenticationToken.getAccessToken();\n        Map<String, Object> additionalParameters = authorizationCodeAuthenticationToken.getAdditionalParameters();\n        OAuth2User oauth2User = this.userService.loadUser(new OAuth2UserRequest(\n                loginAuthenticationToken.getClientRegistration(), accessToken, additionalParameters));\n        Collection<? extends GrantedAuthority> mappedAuthorities = this.authoritiesMapper\n                .mapAuthorities(oauth2User.getAuthorities());\n        OAuth2LoginAuthenticationToken authenticationResult = new OAuth2LoginAuthenticationToken(\n                loginAuthenticationToken.getClientRegistration(), loginAuthenticationToken.getAuthorizationExchange(),\n                oauth2User, mappedAuthorities, accessToken, authorizationCodeAuthenticationToken.getRefreshToken());\n        authenticationResult.setDetails(loginAuthenticationToken.getDetails());\n        return authenticationResult;\n    }\n\n    /**\n     * Sets the {@link GrantedAuthoritiesMapper} used for mapping\n     * {@link OAuth2User#getAuthorities()} to a new set of authorities which will be\n     * associated to the {@link OAuth2LoginAuthenticationToken}.\n     * @param authoritiesMapper the {@link GrantedAuthoritiesMapper} used for mapping the\n     * user\'s authorities\n     */\n    public final void setAuthoritiesMapper(GrantedAuthoritiesMapper authoritiesMapper) {\n        Assert.notNull(authoritiesMapper, "authoritiesMapper cannot be null");\n        this.authoritiesMapper = authoritiesMapper;\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return OAuth2LoginAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"4-\u4f01\u4e1a\u5fae\u4fe1\u7684\u9002\u914d\u5668\u5b9e\u73b0",children:"4. \u4f01\u4e1a\u5fae\u4fe1\u7684\u9002\u914d\u5668\u5b9e\u73b0"}),"\n",(0,i.jsx)(t.h4,{id:"1-wecomaccesstokenresponseclient",children:"1. WecomAccessTokenResponseClient"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wecom;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2AccessTokenResponseClientAdapter;\nimport com.light.sas.constant.WecomParameterNames;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.FormHttpMessageConverter;\nimport org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.http.converter.OAuth2AccessTokenResponseHttpMessageConverter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * \u76ee\u524d\u989d\u5916\u652f\u6301\u201ctext/plain\u201d\u7c7b\u578b\u6570\u636e\u54cd\u5e94\u5904\u7406\u7c7b\n */\n@Component\npublic class WecomAccessTokenResponseClient extends OAuth2AccessTokenResponseClientAdapter {\n\n    /**\n     * \u9ed8\u8ba4\u4f7f\u7528DefaultAuthorizationCodeTokenResponseClient\u6765\u83b7\u53d6token\n     */\n    private final DefaultAuthorizationCodeTokenResponseClient tokenResponseClient = new DefaultAuthorizationCodeTokenResponseClient();\n\n    public WecomAccessTokenResponseClient() {\n        tokenResponseClient.setRequestEntityConverter(new WecomCodeGrantRequestEntityConverter());\n        // \u81ea\u5b9a\u4e49 RestTemplate\uff0c\u9002\u914d\u5fae\u4fe1\u767b\u5f55\u83b7\u53d6token\n        OAuth2AccessTokenResponseHttpMessageConverter messageConverter = new OAuth2AccessTokenResponseHttpMessageConverter();\n        List<MediaType> mediaTypes = new ArrayList<>(messageConverter.getSupportedMediaTypes());\n        // \u5fae\u4fe1\u83b7\u53d6token\u65f6\u54cd\u5e94\u7684\u7c7b\u578b\u4e3a\u201ctext/plain\u201d\uff0c\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\n        mediaTypes.add(MediaType.TEXT_PLAIN);\n        messageConverter.setAccessTokenResponseConverter(new WecomMapAccessTokenResponseConverter());\n        messageConverter.setSupportedMediaTypes(mediaTypes);\n\n        // \u521d\u59cb\u5316RestTemplate\n        RestTemplate restTemplate = new RestTemplate(Arrays.asList(\n                new FormHttpMessageConverter(),\n                messageConverter));\n\n        restTemplate.setErrorHandler(new OAuth2ErrorResponseErrorHandler());\n        tokenResponseClient.setRestOperations(restTemplate);\n    }\n\n    @Override\n    public boolean test(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        String registrationId = authorizationGrantRequest.getClientRegistration().getRegistrationId();\n\n        return WecomParameterNames.THIRD_LOGIN_WECOM.equals(registrationId);\n    }\n\n    @Override\n    public OAuth2AccessTokenResponse getTokenResponse(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        // TODO \u7f13\u5b58\u83b7\u53d6token \u5982\u679c\u83b7\u53d6\u4e0d\u5230\u518d\u8bf7\u6c42 \u5e76\u653e\u5165\u7f13\u5b58 \u4f01\u4e1a\u5fae\u4fe1\u7684token\u4e0d\u5141\u8bb8\u9891\u7e41\u83b7\u53d6\n        OAuth2AccessTokenResponse tokenResponse = tokenResponseClient.getTokenResponse(authorizationGrantRequest);\n        String code = authorizationGrantRequest.getAuthorizationExchange()\n                .getAuthorizationResponse()\n                .getCode();\n\n        // \u628acode\u653e\u5728OAuth2AccessTokenResponse\u4e2d\n        return OAuth2AccessTokenResponse.withResponse(tokenResponse)\n                .additionalParameters(Collections.singletonMap(OAuth2ParameterNames.CODE, code))\n                .build();\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-wecomauthorizationrequestconsumer",children:"2. WecomAuthorizationRequestConsumer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.wecom;\n\nimport com.light.sas.authorization.baisc.adapter.AuthorizationRequestCustomizerAdapter;\nimport com.light.sas.constant.WecomParameterNames;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.stereotype.Component;\n\nimport java.util.LinkedHashMap;\nimport java.util.Objects;\n\n/**\n * \u81ea\u5b9a\u4e49\u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u8ba4\u8bc1\u8bf7\u6c42\n */\n@Component\npublic class WecomAuthorizationRequestConsumer extends AuthorizationRequestCustomizerAdapter {\n\n    @Override\n    public boolean test(OAuth2AuthorizationRequest.Builder builder) {\n        OAuth2AuthorizationRequest authorizationRequest = builder.build();\n        Object registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        return Objects.equals(registrationId, WecomParameterNames.THIRD_LOGIN_WECOM);\n    }\n\n    @Override\n    public void accept(OAuth2AuthorizationRequest.Builder builder) {\n        builder.attributes(attributes ->\n                builder.parameters(parameters -> {\n                    LinkedHashMap<String, Object> linkedParameters = new LinkedHashMap<>();\n                    parameters.forEach((k, v) -> {\n                        // \u628a client_id \u540d\u79f0\u6362\u6210 appid\n                        if (OAuth2ParameterNames.CLIENT_ID.equals(k)) {\n                            linkedParameters.put(WecomParameterNames.APP_ID, v);\n                        }\n                        // \u56de\u6536\u5fc5\u8981\u53c2\u6570 redirect_uri\n                        if (OAuth2ParameterNames.REDIRECT_URI.equals(k)) {\n                            linkedParameters.put(OAuth2ParameterNames.REDIRECT_URI, v);\n                        }\n                        // \u56de\u6536\u5fc5\u8981\u53c2\u6570 state\n                        if (OAuth2ParameterNames.STATE.equals(k)) {\n                            linkedParameters.put(OAuth2ParameterNames.STATE, v);\n                        }\n                    });\n                    // TODO \u589e\u52a0 agentid  \u8fd9\u91cc\u786c\u7f16\u7801\u4e86 \u5e94\u8be5\u52a0\u4e00\u4e2a\u914d\u7f6e\n                    linkedParameters.put(WecomParameterNames.AGENT_ID, "1000007");\n                    // \u5176\u5b83\u65e0\u6548\u53c2\u6570\u90fd\u6e05\u9664\u4e86\n                    parameters.clear();\n                    // \u628a\u6709\u7528\u7684\u53c2\u6570\u518d\u653e\u56de\u53bb\n                    parameters.putAll(linkedParameters);\n                }));\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"3-wecomcodegrantrequestentityconverter",children:"3. WecomCodeGrantRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.wecom;\n\nimport com.light.sas.constant.WecomParameterNames;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequestEntityConverter;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u8bf7\u6c42token\u5165\u53c2\u5904\u7406\u7c7b\n */\npublic class WecomCodeGrantRequestEntityConverter extends OAuth2AuthorizationCodeGrantRequestEntityConverter {\n\n    @Override\n    public RequestEntity<?> convert(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        String code = authorizationGrantRequest.getAuthorizationExchange()\n                .getAuthorizationResponse()\n                .getCode();\n\n        if(!StringUtils.hasText(code)) {\n            throw new OAuth2AuthenticationException("\u7528\u6237\u7ec8\u6b62\u6388\u6743");\n        }\n\n        ClientRegistration clientRegistration = authorizationGrantRequest.getClientRegistration();\n\n        MultiValueMap<String, String> queryParameters = new LinkedMultiValueMap<>();\n        queryParameters.add(WecomParameterNames.CORP_ID, clientRegistration.getClientId());\n        queryParameters.add(WecomParameterNames.CORP_SECRET, clientRegistration.getClientSecret());\n\n        String tokenUri = clientRegistration.getProviderDetails().getTokenUri();\n        URI uri = UriComponentsBuilder.fromUriString(tokenUri)\n                .queryParams(queryParameters)\n                .build()\n                .toUri();\n        return RequestEntity.get(uri).build();\n    }\n\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"4-wecommapaccesstokenresponseconverter",children:"4. WecomMapAccessTokenResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.wecom;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u83b7\u53d6token\u7684\u54cd\u5e94\u5904\u7406\u7c7b\n */\npublic class WecomMapAccessTokenResponseConverter implements Converter<Map<String, Object>, OAuth2AccessTokenResponse> {\n\n    private static final Set<String> TOKEN_RESPONSE_PARAMETER_NAMES = new HashSet<>(\n            Arrays.asList(OAuth2ParameterNames.ACCESS_TOKEN,\n                    OAuth2ParameterNames.EXPIRES_IN,\n                    OAuth2ParameterNames.REFRESH_TOKEN,\n                    OAuth2ParameterNames.SCOPE,\n                    OAuth2ParameterNames.TOKEN_TYPE));\n\n    @Override\n    public OAuth2AccessTokenResponse convert(Map<String, Object> source) {\n        String accessToken = getParameterValue(source, OAuth2ParameterNames.ACCESS_TOKEN);\n        OAuth2AccessToken.TokenType accessTokenType = getAccessTokenType(source);\n        long expiresIn = getExpiresIn(source);\n        Set<String> scopes = getScopes(source);\n        String refreshToken = getParameterValue(source, OAuth2ParameterNames.REFRESH_TOKEN);\n        Map<String, Object> additionalParameters = new LinkedHashMap<>();\n        for (Map.Entry<String, Object> entry : source.entrySet()) {\n            if (!TOKEN_RESPONSE_PARAMETER_NAMES.contains(entry.getKey())) {\n                additionalParameters.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return OAuth2AccessTokenResponse.withToken(accessToken)\n                // \u5982\u679ctoken type\u4e3a\u7a7a\uff0c\u7ed9\u4e2a\u9ed8\u8ba4\u503c\n                .tokenType(accessTokenType == null ? OAuth2AccessToken.TokenType.BEARER : accessTokenType)\n                .expiresIn(expiresIn)\n                .scopes(scopes)\n                .refreshToken(refreshToken)\n                .additionalParameters(additionalParameters)\n                .build();\n    }\n\n    private static OAuth2AccessToken.TokenType getAccessTokenType(Map<String, Object> tokenResponseParameters) {\n        if (OAuth2AccessToken.TokenType.BEARER.getValue()\n                .equalsIgnoreCase(getParameterValue(tokenResponseParameters, OAuth2ParameterNames.TOKEN_TYPE))) {\n            return OAuth2AccessToken.TokenType.BEARER;\n        }\n        return null;\n    }\n\n    private static long getExpiresIn(Map<String, Object> tokenResponseParameters) {\n        return getParameterValue(tokenResponseParameters, OAuth2ParameterNames.EXPIRES_IN, 0L);\n    }\n\n    private static Set<String> getScopes(Map<String, Object> tokenResponseParameters) {\n        if (tokenResponseParameters.containsKey(OAuth2ParameterNames.SCOPE)) {\n            String scope = getParameterValue(tokenResponseParameters, OAuth2ParameterNames.SCOPE);\n            return new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n        return Collections.emptySet();\n    }\n\n    private static String getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName) {\n        Object obj = tokenResponseParameters.get(parameterName);\n        return (obj != null) ? obj.toString() : null;\n    }\n\n    private static long getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName,\n                                          long defaultValue) {\n        long parameterValue = defaultValue;\n\n        Object obj = tokenResponseParameters.get(parameterName);\n        if (obj != null) {\n            // Final classes Long and Integer do not need to be coerced\n            if (obj.getClass() == Long.class) {\n                parameterValue = (Long) obj;\n            }\n            else if (obj.getClass() == Integer.class) {\n                parameterValue = (Integer) obj;\n            }\n            else {\n                // Attempt to coerce to a long (typically from a String)\n                try {\n                    parameterValue = Long.parseLong(obj.toString());\n                }\n                catch (NumberFormatException ignored) {\n                }\n            }\n        }\n\n        return parameterValue;\n    }\n\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"5-wecomuserrequestentityconverter",children:"5. WecomUserRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wecom;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2UserRequestEntityConverterAdapter;\nimport com.light.sas.constant.WecomParameterNames;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u53c2\u6570\u8f6c\u6362\u5668\n */\n@Component\npublic class WecomUserRequestEntityConverter extends OAuth2UserRequestEntityConverterAdapter {\n\n    @Override\n    public boolean test(OAuth2UserRequest userRequest) {\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        return WecomParameterNames.THIRD_LOGIN_WECOM.equals(clientRegistration.getRegistrationId());\n    }\n\n    @Override\n    public RequestEntity<?> convert(OAuth2UserRequest userRequest) {\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        // \u5bf9\u4e8e\u5fae\u4fe1\u767b\u5f55\u7684\u7279\u6b8a\u5904\u7406\uff0c\u8bf7\u6c42\u7528\u6237\u4fe1\u606f\u65f6\u6dfb\u52a0openid\u4e0eaccess_token\u53c2\u6570\n        Object code = userRequest.getAdditionalParameters().get(OAuth2ParameterNames.CODE);\n        URI uri = UriComponentsBuilder\n                .fromUriString(clientRegistration.getProviderDetails().getUserInfoEndpoint().getUri())\n                .queryParam(OAuth2ParameterNames.CODE, code)\n                .queryParam(OAuth2ParameterNames.ACCESS_TOKEN, userRequest.getAccessToken().getTokenValue())\n                .build().toUri();\n        return new RequestEntity<>(HttpMethod.GET, uri);\n    }\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"6-wecomuserresponseconverter",children:"6. WecomUserResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wecom;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u7528\u6237\u4fe1\u606f\u54cd\u5e94\u8f6c\u6362\u5668\n */\npublic class WecomUserResponseConverter extends MappingJackson2HttpMessageConverter {\n\n    public WecomUserResponseConverter() {\n        List<MediaType> mediaTypes = new ArrayList<>(super.getSupportedMediaTypes());\n        // \u5fae\u4fe1\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u65f6\u54cd\u5e94\u7684\u7c7b\u578b\u4e3a\u201ctext/plain\u201d\uff0c\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\n        mediaTypes.add(MediaType.TEXT_PLAIN);\n        super.setSupportedMediaTypes(mediaTypes);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"7-wecomparameternames",children:"7. WecomParameterNames"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.constant;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u5e38\u91cf\u53c2\u6570\n */\npublic class WecomParameterNames {\n\n    /**\n     * \u4e09\u65b9\u767b\u5f55\u7c7b\u578b\u2014\u2014Wecom\n     */\n    public static final String THIRD_LOGIN_WECOM = "wecom";\n    /**\n     * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5fae\u4fe1\u7684\u5e94\u7528id\n     */\n    public static final String APP_ID = "appid";\n\n    /**\n     * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5fae\u4fe1\u7684\u5e94\u7528id\n     */\n    public static final String AGENT_ID = "agentid";\n\n    /**\n     * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5fae\u4fe1\u7684\u4f01\u4e1aid\n     */\n    public static final String CORP_ID = "corpid";\n\n    /**\n     * \u4f01\u4e1a\u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5fae\u4fe1\u7684\u5e94\u7528\u79d8\u94a5\n     */\n    public static final String CORP_SECRET = "corpsecret";\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"8-wecomuserconverter",children:"8. WecomUserConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.strategy.impl;\n\nimport com.light.sas.constant.WecomParameterNames;\nimport com.light.sas.entity.OAuth2ThirdAccount;\nimport com.light.sas.strategy.OAuth2UserConverterStrategy;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Map;\n\n/**\n * \u4f01\u4e1a\u5fae\u4fe1\u7528\u6237\u4fe1\u606f\u8f6c\u6362\u5668\n * @see <a href="https://developer.work.weixin.qq.com/document/path/98176">\u83b7\u53d6\u7528\u6237\u4fe1\u606f</a>\n */\n@RequiredArgsConstructor\n@Component(WecomUserConverter.LOGIN_TYPE)\npublic class WecomUserConverter implements OAuth2UserConverterStrategy {\n\n    protected static final String LOGIN_TYPE = WecomParameterNames.THIRD_LOGIN_WECOM;\n\n    @Override\n    public OAuth2ThirdAccount convert(OAuth2User auth2User) {\n        // \u83b7\u53d6\u4e09\u65b9\u7528\u6237\u4fe1\u606f\n        Map<String, Object> attributes = auth2User.getAttributes();\n        // \u8f6c\u6362\u81f3Oauth2ThirdAccount\n        OAuth2ThirdAccount thirdAccount = new OAuth2ThirdAccount();\n        String uniqueId = String.valueOf(attributes.get("userid"));\n        if (StringUtils.hasText(uniqueId)) {\n            uniqueId = String.valueOf(attributes.get("openid"));\n        }\n        thirdAccount.setUniqueId(uniqueId);\n        thirdAccount.setThirdUsername(auth2User.getName());\n        thirdAccount.setType(LOGIN_TYPE);\n        thirdAccount.setLocation(attributes.get("province") + " " + attributes.get("city"));\n        // \u8bbe\u7f6e\u57fa\u7840\u7528\u6237\u4fe1\u606f\n        thirdAccount.setName(auth2User.getName());\n        thirdAccount.setAvatar(String.valueOf(attributes.get("headimgurl")));\n        return thirdAccount;\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"5-\u5fae\u4fe1\u7684\u7f51\u9875\u6388\u6743\u767b\u5f55\u7684\u6539\u9020",children:"5. \u5fae\u4fe1\u7684\u7f51\u9875\u6388\u6743\u767b\u5f55\u7684\u6539\u9020"}),"\n",(0,i.jsx)(t.h4,{id:"1-wechataccesstokenresponseclient",children:"1. WechatAccessTokenResponseClient"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wechat;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2AccessTokenResponseClientAdapter;\nimport com.light.sas.constant.WechatParameterNames;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.FormHttpMessageConverter;\nimport org.springframework.security.oauth2.client.endpoint.DefaultAuthorizationCodeTokenResponseClient;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.http.converter.OAuth2AccessTokenResponseHttpMessageConverter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * \u76ee\u524d\u989d\u5916\u652f\u6301\u201ctext/plain\u201d\u7c7b\u578b\u6570\u636e\u54cd\u5e94\u5904\u7406\u7c7b\n */\n@Component\npublic class WechatAccessTokenResponseClient extends OAuth2AccessTokenResponseClientAdapter {\n\n    /**\n     * \u9ed8\u8ba4\u4f7f\u7528DefaultAuthorizationCodeTokenResponseClient\u6765\u83b7\u53d6token\n     */\n    private final DefaultAuthorizationCodeTokenResponseClient tokenResponseClient = new DefaultAuthorizationCodeTokenResponseClient();\n\n    /**\n     * \u521d\u59cb\u5316\u65f6\u8bbe\u7f6e DefaultAuthorizationCodeTokenResponseClient \u652f\u6301\u7684\u54cd\u5e94\u6570\u636e\u683c\u5f0f\n     *  \u9ed8\u8ba4\u6dfb\u52a0\u201ctext/plain\u201d\u7c7b\u578b\u7684\u683c\u5f0f\n     */\n    public WechatAccessTokenResponseClient() {\n        tokenResponseClient.setRequestEntityConverter(new WechatCodeGrantRequestEntityConverter());\n        // \u81ea\u5b9a\u4e49 RestTemplate\uff0c\u9002\u914d\u5fae\u4fe1\u767b\u5f55\u83b7\u53d6token\n        OAuth2AccessTokenResponseHttpMessageConverter messageConverter = new OAuth2AccessTokenResponseHttpMessageConverter();\n        List<MediaType> mediaTypes = new ArrayList<>(messageConverter.getSupportedMediaTypes());\n        // \u5fae\u4fe1\u83b7\u53d6token\u65f6\u54cd\u5e94\u7684\u7c7b\u578b\u4e3a\u201ctext/plain\u201d\uff0c\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\n        mediaTypes.add(MediaType.TEXT_PLAIN);\n        messageConverter.setAccessTokenResponseConverter(new WechatMapAccessTokenResponseConverter());\n        messageConverter.setSupportedMediaTypes(mediaTypes);\n\n        // \u521d\u59cb\u5316RestTemplate\n        RestTemplate restTemplate = new RestTemplate(Arrays.asList(\n                new FormHttpMessageConverter(),\n                messageConverter));\n\n        restTemplate.setErrorHandler(new OAuth2ErrorResponseErrorHandler());\n        tokenResponseClient.setRestOperations(restTemplate);\n    }\n\n    @Override\n    public boolean test(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        String registrationId = authorizationGrantRequest.getClientRegistration().getRegistrationId();\n        return WechatParameterNames.THIRD_LOGIN_WECHAT.equals(registrationId);\n    }\n\n    @Override\n    public OAuth2AccessTokenResponse getTokenResponse(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        return tokenResponseClient.getTokenResponse(authorizationGrantRequest);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-wechatauthorizationrequestconsumer",children:"2. WechatAuthorizationRequestConsumer"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.wechat;\n\nimport com.light.sas.authorization.baisc.adapter.AuthorizationRequestCustomizerAdapter;\nimport com.light.sas.constant.WechatParameterNames;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Objects;\n\n/**\n * \u81ea\u5b9a\u4e49\u5fae\u4fe1\u767b\u5f55\u8ba4\u8bc1\u8bf7\u6c42\n */\n@Component\npublic class WechatAuthorizationRequestConsumer extends AuthorizationRequestCustomizerAdapter {\n\n    @Override\n    public boolean test(OAuth2AuthorizationRequest.Builder builder) {\n        OAuth2AuthorizationRequest authorizationRequest = builder.build();\n        Object registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        return Objects.equals(registrationId, WechatParameterNames.THIRD_LOGIN_WECHAT);\n    }\n\n    @Override\n    public void accept(OAuth2AuthorizationRequest.Builder builder) {\n        OAuth2AuthorizationRequest authorizationRequest = builder.build();\n        Object registrationId = authorizationRequest.getAttribute(OAuth2ParameterNames.REGISTRATION_ID);\n        if (Objects.equals(registrationId, WechatParameterNames.THIRD_LOGIN_WECHAT)) {\n            // \u5224\u65ad\u662f\u5426\u5fae\u4fe1\u767b\u5f55\uff0c\u5982\u679c\u662f\u5fae\u4fe1\u767b\u5f55\u5219\u5c06appid\u6dfb\u52a0\u81f3\u8bf7\u6c42\u53c2\u6570\u4e2d\n            builder.additionalParameters((params) -> params.put(WechatParameterNames.FORCE_POPUP, true));\n            builder.additionalParameters((params) -> params.put(WechatParameterNames.APP_ID, authorizationRequest.getClientId()));\n\n            // \u5fae\u4fe1\u7684PC\u7aef\u8ba4\u8bc1\u5bf9\u53c2\u6570\u987a\u5e8f\u6709\u5f3a\u6b63\u5219\u6821\u9a8c\uff0c\u4fee\u6539\u53c2\u6570\u987a\u5e8f\n            builder.parameters((params) -> {\n                // \u79fb\u9664oauth2\u53c2\u6570\uff0c\u987a\u5e8f\u4e0d\u5bf9\u4e0d\u80fd\u6b63\u5e38\u83b7\u53d6\u5230\u5fae\u4fe1\u6388\u6743\u7801\n                params.remove(OAuth2ParameterNames.RESPONSE_TYPE);\n                params.remove(OAuth2ParameterNames.CLIENT_ID);\n                params.remove(OAuth2ParameterNames.SCOPE);\n                params.remove(OAuth2ParameterNames.STATE);\n                params.remove(OAuth2ParameterNames.REDIRECT_URI);\n                params.remove(WechatParameterNames.FORCE_POPUP);\n                params.remove(WechatParameterNames.APP_ID);\n\n                // \u91cd\u65b0\u6dfb\u52a0\u5230\u53c2\u6570\u4e2d\n                params.put(WechatParameterNames.APP_ID, authorizationRequest.getClientId());\n                params.put(OAuth2ParameterNames.REDIRECT_URI, authorizationRequest.getRedirectUri());\n                params.put(OAuth2ParameterNames.RESPONSE_TYPE, authorizationRequest.getResponseType().getValue());\n                params.put(OAuth2ParameterNames.SCOPE, StringUtils.collectionToDelimitedString(authorizationRequest.getScopes(), " "));\n                params.put(OAuth2ParameterNames.STATE, authorizationRequest.getState());\n                params.put(OAuth2ParameterNames.CLIENT_ID, authorizationRequest.getClientId());\n                params.put(WechatParameterNames.FORCE_POPUP, true);\n            });\n        }\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"3-wechatcodegrantrequestentityconverter",children:"3. WechatCodeGrantRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wechat;\n\nimport com.light.sas.constant.WechatParameterNames;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequest;\nimport org.springframework.security.oauth2.client.endpoint.OAuth2AuthorizationCodeGrantRequestEntityConverter;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\n\n/**\n * \u5fae\u4fe1\u767b\u5f55\u8bf7\u6c42token\u5165\u53c2\u5904\u7406\u7c7b\n */\npublic class WechatCodeGrantRequestEntityConverter extends OAuth2AuthorizationCodeGrantRequestEntityConverter {\n\n    @Override\n    protected MultiValueMap<String, String> createParameters(OAuth2AuthorizationCodeGrantRequest authorizationCodeGrantRequest) {\n        // \u5982\u679c\u662f\u5fae\u4fe1\u767b\u5f55\uff0c\u83b7\u53d6token\u65f6\u643a\u5e26appid\u53c2\u6570\u4e0esecret\u53c2\u6570\n        MultiValueMap<String, String> parameters = super.createParameters(authorizationCodeGrantRequest);\n        String registrationId = authorizationCodeGrantRequest.getClientRegistration().getRegistrationId();\n        if (WechatParameterNames.THIRD_LOGIN_WECHAT.equals(registrationId)) {\n            // \u5982\u679c\u5f53\u524d\u662f\u5fae\u4fe1\u767b\u5f55\uff0c\u643a\u5e26appid\u548csecret\n            parameters.add(WechatParameterNames.APP_ID, authorizationCodeGrantRequest.getClientRegistration().getClientId());\n            parameters.add(WechatParameterNames.APP_SECRET, authorizationCodeGrantRequest.getClientRegistration().getClientSecret());\n        }\n        return parameters;\n    }\n\n    @Override\n    public RequestEntity<?> convert(OAuth2AuthorizationCodeGrantRequest authorizationGrantRequest) {\n        RequestEntity<?> requestEntity = super.convert(authorizationGrantRequest);\n        String registrationId = authorizationGrantRequest.getClientRegistration().getRegistrationId();\n        // \u6846\u67b6\u9ed8\u8ba4\u662fPOST\u8bf7\u6c42\uff0c\u53c2\u6570\u5728form-data\u4e2d\uff0c\u5fae\u4fe1\u7684token\u63a5\u53e3\u53c2\u6570\u5728queryParam\u4e2d\n        if (WechatParameterNames.THIRD_LOGIN_WECHAT.equals(registrationId)) {\n            URI url = requestEntity.getUrl();\n            LinkedMultiValueMap<String, List<String>> body = (LinkedMultiValueMap<String, List<String>>) requestEntity.getBody();\n\n            URI uri = UriComponentsBuilder\n                    .fromUri(url)\n                    .queryParam(WechatParameterNames.APP_ID, body.get(WechatParameterNames.APP_ID))\n                    .queryParam(WechatParameterNames.APP_SECRET, body.get(WechatParameterNames.APP_SECRET))\n                    .queryParam(OAuth2ParameterNames.CODE, body.get(OAuth2ParameterNames.CODE))\n                    .queryParam(OAuth2ParameterNames.GRANT_TYPE, body.get(OAuth2ParameterNames.GRANT_TYPE))\n                    .queryParam(OAuth2ParameterNames.REDIRECT_URI, body.get(OAuth2ParameterNames.REDIRECT_URI))\n                    .build().toUri();\n            return new RequestEntity<>(HttpMethod.GET, uri);\n        }\n        return requestEntity;\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"4-wechatmapaccesstokenresponseconverter",children:"4. WechatMapAccessTokenResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.authorization.wechat;\n\nimport org.springframework.core.convert.converter.Converter;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * \u5fae\u4fe1\u767b\u5f55\u83b7\u53d6token\u7684\u54cd\u5e94\u5904\u7406\u7c7b\n */\npublic class WechatMapAccessTokenResponseConverter implements Converter<Map<String, Object>, OAuth2AccessTokenResponse> {\n\n    private static final Set<String> TOKEN_RESPONSE_PARAMETER_NAMES = new HashSet<>(\n            Arrays.asList(OAuth2ParameterNames.ACCESS_TOKEN,\n                    OAuth2ParameterNames.EXPIRES_IN,\n                    OAuth2ParameterNames.REFRESH_TOKEN,\n                    OAuth2ParameterNames.SCOPE,\n                    OAuth2ParameterNames.TOKEN_TYPE));\n\n    @Override\n    public OAuth2AccessTokenResponse convert(Map<String, Object> source) {\n        String accessToken = getParameterValue(source, OAuth2ParameterNames.ACCESS_TOKEN);\n        OAuth2AccessToken.TokenType accessTokenType = getAccessTokenType(source);\n        long expiresIn = getExpiresIn(source);\n        Set<String> scopes = getScopes(source);\n        String refreshToken = getParameterValue(source, OAuth2ParameterNames.REFRESH_TOKEN);\n        Map<String, Object> additionalParameters = new LinkedHashMap<>();\n        for (Map.Entry<String, Object> entry : source.entrySet()) {\n            if (!TOKEN_RESPONSE_PARAMETER_NAMES.contains(entry.getKey())) {\n                additionalParameters.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return OAuth2AccessTokenResponse.withToken(accessToken)\n                // \u5982\u679ctoken type\u4e3a\u7a7a\uff0c\u7ed9\u4e2a\u9ed8\u8ba4\u503c\n                .tokenType(accessTokenType == null ? OAuth2AccessToken.TokenType.BEARER : accessTokenType)\n                .expiresIn(expiresIn)\n                .scopes(scopes)\n                .refreshToken(refreshToken)\n                .additionalParameters(additionalParameters)\n                .build();\n    }\n\n    private static OAuth2AccessToken.TokenType getAccessTokenType(Map<String, Object> tokenResponseParameters) {\n        if (OAuth2AccessToken.TokenType.BEARER.getValue()\n                .equalsIgnoreCase(getParameterValue(tokenResponseParameters, OAuth2ParameterNames.TOKEN_TYPE))) {\n            return OAuth2AccessToken.TokenType.BEARER;\n        }\n        return null;\n    }\n\n    private static long getExpiresIn(Map<String, Object> tokenResponseParameters) {\n        return getParameterValue(tokenResponseParameters, OAuth2ParameterNames.EXPIRES_IN, 0L);\n    }\n\n    private static Set<String> getScopes(Map<String, Object> tokenResponseParameters) {\n        if (tokenResponseParameters.containsKey(OAuth2ParameterNames.SCOPE)) {\n            String scope = getParameterValue(tokenResponseParameters, OAuth2ParameterNames.SCOPE);\n            return new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n        return Collections.emptySet();\n    }\n\n    private static String getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName) {\n        Object obj = tokenResponseParameters.get(parameterName);\n        return (obj != null) ? obj.toString() : null;\n    }\n\n    private static long getParameterValue(Map<String, Object> tokenResponseParameters, String parameterName,\n                                          long defaultValue) {\n        long parameterValue = defaultValue;\n\n        Object obj = tokenResponseParameters.get(parameterName);\n        if (obj != null) {\n            // Final classes Long and Integer do not need to be coerced\n            if (obj.getClass() == Long.class) {\n                parameterValue = (Long) obj;\n            }\n            else if (obj.getClass() == Integer.class) {\n                parameterValue = (Integer) obj;\n            }\n            else {\n                // Attempt to coerce to a long (typically from a String)\n                try {\n                    parameterValue = Long.parseLong(obj.toString());\n                }\n                catch (NumberFormatException ignored) {\n                }\n            }\n        }\n\n        return parameterValue;\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"5-wechatuserrequestentityconverter",children:"5. WechatUserRequestEntityConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wechat;\n\nimport com.light.sas.authorization.baisc.adapter.OAuth2UserRequestEntityConverterAdapter;\nimport com.light.sas.constant.WechatParameterNames;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.util.UriComponentsBuilder;\n\nimport java.net.URI;\n\n/**\n * \u5fae\u4fe1\u767b\u5f55\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u53c2\u6570\u8f6c\u6362\u5668\n */\n@Component\npublic class WechatUserRequestEntityConverter extends OAuth2UserRequestEntityConverterAdapter {\n\n    @Override\n    public boolean test(OAuth2UserRequest userRequest) {\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        return WechatParameterNames.THIRD_LOGIN_WECHAT.equals(clientRegistration.getRegistrationId());\n    }\n\n    @Override\n    public RequestEntity<?> convert(OAuth2UserRequest userRequest) {\n        // \u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u5ba2\u6237\u7aef\u4fe1\u606f\n        ClientRegistration clientRegistration = userRequest.getClientRegistration();\n        if (WechatParameterNames.THIRD_LOGIN_WECHAT.equals(clientRegistration.getRegistrationId())) {\n            // \u5bf9\u4e8e\u5fae\u4fe1\u767b\u5f55\u7684\u7279\u6b8a\u5904\u7406\uff0c\u8bf7\u6c42\u7528\u6237\u4fe1\u606f\u65f6\u6dfb\u52a0openid\u4e0eaccess_token\u53c2\u6570\n            Object openid = userRequest.getAdditionalParameters().get(WechatParameterNames.OPEN_ID);\n            URI uri = UriComponentsBuilder\n                    .fromUriString(clientRegistration.getProviderDetails().getUserInfoEndpoint().getUri())\n                    .queryParam(WechatParameterNames.OPEN_ID, openid)\n                    .queryParam(OAuth2ParameterNames.ACCESS_TOKEN, userRequest.getAccessToken().getTokenValue())\n                    .build().toUri();\n            return new RequestEntity<>(HttpMethod.GET, uri);\n        }\n        return super.convert(userRequest);\n    }\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"6-wechatuserresponseconverter",children:"6. WechatUserResponseConverter"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.wechat;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * \u5fae\u4fe1\u7528\u6237\u4fe1\u606f\u54cd\u5e94\u8f6c\u6362\u5668\n */\npublic class WechatUserResponseConverter extends MappingJackson2HttpMessageConverter {\n\n    public WechatUserResponseConverter() {\n        List<MediaType> mediaTypes = new ArrayList<>(super.getSupportedMediaTypes());\n        // \u5fae\u4fe1\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u65f6\u54cd\u5e94\u7684\u7c7b\u578b\u4e3a\u201ctext/plain\u201d\uff0c\u8fd9\u91cc\u7279\u6b8a\u5904\u7406\u4e00\u4e0b\n        mediaTypes.add(MediaType.TEXT_PLAIN);\n        super.setSupportedMediaTypes(mediaTypes);\n    }\n\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"7-wechatparameternames",children:"7. WechatParameterNames"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.constant;\n\n/**\n * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u5e38\u91cf\u53c2\u6570\n */\npublic class WechatParameterNames {\n\n    /**\n     * \u4e09\u65b9\u767b\u5f55\u7c7b\u578b\u2014\u2014Wechat\n     */\n    public static final String THIRD_LOGIN_WECHAT = "wechat";\n\n    /**\n     * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014appid\uff1a\u5fae\u4fe1\u7684\u5e94\u7528id\n     */\n    public static final String APP_ID = "appid";\n\n    /**\n     * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014secret\uff1a\u5fae\u4fe1\u7684\u5e94\u7528\u79d8\u94a5\n     */\n    public static final String APP_SECRET = "secret";\n\n    /**\n     * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014openid\uff1a\u7528\u6237\u552f\u4e00id\n     */\n    public static final String OPEN_ID = "openid";\n\n    /**\n     * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014unionid\uff1a\u7528\u6237\u552f\u4e00id\n     */\n    public static final String UNION_ID = "unionid";\n\n    /**\n     * \u5fae\u4fe1\u767b\u5f55\u76f8\u5173\u53c2\u6570\u2014\u2014forcePopup\uff1a\u5f3a\u5236\u6b64\u6b21\u6388\u6743\u9700\u8981\u7528\u6237\u5f39\u7a97\u786e\u8ba4\n     */\n    public static final String FORCE_POPUP = "forcePopup";\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h3,{id:"6-\u914d\u7f6e\u9002\u914d\u5668\u59d4\u6258\u7c7b\u5230oauth2-\u914d\u7f6e\u7c7b",children:"6. \u914d\u7f6e\u9002\u914d\u5668\u3001\u59d4\u6258\u7c7b\u5230OAuth2 \u914d\u7f6e\u7c7b"}),"\n",(0,i.jsx)(t.h4,{id:"1-basicauthorizationrequestresolver",children:"1. BasicAuthorizationRequestResolver"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.light.sas.authorization.baisc;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizationRequestResolver;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestResolver;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest;\n\n/**\n * \u57fa\u7840\u6388\u6743\u8bf7\u6c42\u5904\u7406\u7c7b\n */\npublic class BasicAuthorizationRequestResolver implements OAuth2AuthorizationRequestResolver {\n\n    private final DefaultOAuth2AuthorizationRequestResolver authorizationRequestResolver;\n\n    public BasicAuthorizationRequestResolver(DefaultOAuth2AuthorizationRequestResolver authorizationRequestResolver) {\n        this.authorizationRequestResolver = authorizationRequestResolver;\n    }\n\n    @Override\n    public OAuth2AuthorizationRequest resolve(HttpServletRequest request) {\n        return this.authorizationRequestResolver.resolve(request);\n    }\n\n    @Override\n    public OAuth2AuthorizationRequest resolve(HttpServletRequest request, String clientRegistrationId) {\n        return this.authorizationRequestResolver.resolve(request, clientRegistrationId);\n    }\n}\n\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-beanconfig",children:"2. BeanConfig"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.config;\n\nimport com.light.sas.authorization.baisc.BasicAuthorizationRequestResolver;\nimport com.light.sas.authorization.baisc.adapter.AuthorizationRequestCustomizerAdapter;\nimport com.light.sas.authorization.baisc.adapter.OAuth2AccessTokenResponseClientAdapter;\nimport com.light.sas.authorization.baisc.adapter.OAuth2UserRequestEntityConverterAdapter;\nimport com.light.sas.authorization.baisc.delegator.AuthorizationRequestCustomizerDelegator;\nimport com.light.sas.authorization.baisc.delegator.OAuth2AccessTokenResponseClientDelegator;\nimport com.light.sas.authorization.baisc.delegator.OAuth2UserRequestEntityConverterDelegator;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.DefaultOAuth2AuthorizationRequestResolver;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\nimport java.util.List;\n\n/**\n * \u5c06bean\u6ce8\u5165\u81f3ioc\u7684\u914d\u7f6e\u7c7b\n */\n@Configuration\n@EnableConfigurationProperties\npublic class BeanConfig {\n\n    /**\n     * \u8de8\u57df\u8fc7\u6ee4\u5668\u914d\u7f6e\n     *\n     * @return CorsFilter\n     */\n    @Bean\n    public CorsFilter corsFilter() {\n\n        // \u521d\u59cb\u5316cors\u914d\u7f6e\u5bf9\u8c61\n        CorsConfiguration configuration = new CorsConfiguration();\n\n        // \u8bbe\u7f6e\u5141\u8bb8\u8de8\u57df\u7684\u57df\u540d,\u5982\u679c\u5141\u8bb8\u643a\u5e26cookie\u7684\u8bdd,\u8def\u5f84\u5c31\u4e0d\u80fd\u5199*\u53f7, *\u8868\u793a\u6240\u6709\u7684\u57df\u540d\u90fd\u53ef\u4ee5\u8de8\u57df\u8bbf\u95ee\n        configuration.addAllowedOrigin("http://127.0.0.1:5173");\n        configuration.addAllowedOrigin("http://192.168.3.49:5173");\n        // \u8bbe\u7f6e\u8de8\u57df\u8bbf\u95ee\u53ef\u4ee5\u643a\u5e26cookie\n        configuration.setAllowCredentials(true);\n        // \u5141\u8bb8\u6240\u6709\u7684\u8bf7\u6c42\u65b9\u6cd5 ==> GET POST PUT Delete\n        configuration.addAllowedMethod("*");\n        // \u5141\u8bb8\u643a\u5e26\u4efb\u4f55\u5934\u4fe1\u606f\n        configuration.addAllowedHeader("*");\n\n        // \u521d\u59cb\u5316cors\u914d\u7f6e\u6e90\u5bf9\u8c61\n        UrlBasedCorsConfigurationSource configurationSource = new UrlBasedCorsConfigurationSource();\n\n        // \u7ed9\u914d\u7f6e\u6e90\u5bf9\u8c61\u8bbe\u7f6e\u8fc7\u6ee4\u7684\u53c2\u6570\n        // \u53c2\u6570\u4e00: \u8fc7\u6ee4\u7684\u8def\u5f84 == > \u6240\u6709\u7684\u8def\u5f84\u90fd\u8981\u6c42\u6821\u9a8c\u662f\u5426\u8de8\u57df\n        // \u53c2\u6570\u4e8c: \u914d\u7f6e\u7c7b\n        configurationSource.registerCorsConfiguration("/**", configuration);\n\n        // \u8fd4\u56de\u914d\u7f6e\u597d\u7684\u8fc7\u6ee4\u5668\n        return new CorsFilter(configurationSource);\n    }\n\n    /**\n     * \u8ba4\u8bc1\u8bf7\u6c42\u59d4\u6258\u7c7b\uff0c\u652f\u6301\u591a\u4e2a\u8ba4\u8bc1\u8bf7\u6c42\u81ea\u5b9a\u4e49\n     * @param customizers \u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u8bf7\u6c42\u5904\u7406\u7c7b\uff0c\u5982\uff1a\u5fae\u4fe1 \u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\u7b49\n     * @return \u8ba4\u8bc1\u8bf7\u6c42\u59d4\u6258\u5bf9\u8c61\n     */\n    @Bean\n    public AuthorizationRequestCustomizerDelegator authorizationRequestCustomizerDelegator(List<AuthorizationRequestCustomizerAdapter> customizers) {\n        return new AuthorizationRequestCustomizerDelegator(customizers);\n    }\n\n    /**\n     * Token\u54cd\u5e94\u59d4\u6258\u7c7b\uff0c\u652f\u6301\u591a\u4e2aToken\u54cd\u5e94\u81ea\u5b9a\u4e49\n     * @param clients \u81ea\u5b9a\u4e49\u7684Token\u54cd\u5e94\u5904\u7406\u7c7b\uff0c\u5982\uff1a\u5fae\u4fe1 \u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\u7b49\n     * @return Token\u54cd\u5e94\u59d4\u6258\u5bf9\u8c61\n     */\n    @Bean\n    public OAuth2AccessTokenResponseClientDelegator accessTokenResponseClientDelegator(List<OAuth2AccessTokenResponseClientAdapter> clients) {\n        return new OAuth2AccessTokenResponseClientDelegator(clients);\n    }\n\n    /**\n     * \u7528\u6237\u8bf7\u6c42\u59d4\u6258\u7c7b\uff0c\u652f\u6301\u591a\u4e2a\u7528\u6237\u8bf7\u6c42\u81ea\u5b9a\u4e49\n     * @param converters \u81ea\u5b9a\u4e49\u7684\u7528\u6237\u8bf7\u6c42\u8f6c\u6362\u5668\uff0c\u5982\uff1a\u5fae\u4fe1 \u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\u7b49\n     * @return \u7528\u6237\u8bf7\u6c42\u59d4\u6258\u5bf9\u8c61\n     */\n    @Bean\n    public OAuth2UserRequestEntityConverterDelegator requestEntityConverterDelegator(List<OAuth2UserRequestEntityConverterAdapter> converters) {\n        return new OAuth2UserRequestEntityConverterDelegator(converters);\n    }\n\n    /**\n     * \u8ba4\u8bc1\u8bf7\u6c42\u89e3\u6790\u7c7b\n     * @param clientRegistrationRepository \u8ba4\u8bc1\u5ba2\u6237\u7aef\u6301\u4e45\u5c42\u5bf9\u8c61\n     * @param authorizationRequestCustomizerDelegator \u8ba4\u8bc1\u8bf7\u6c42\u59d4\u6258\u5bf9\u8c61\n     * @return \u8ba4\u8bc1\u8bf7\u6c42\u89e3\u6790\u5bf9\u8c61\n     */\n    @Bean\n    public BasicAuthorizationRequestResolver basicAuthorizationRequestResolver(\n            ClientRegistrationRepository clientRegistrationRepository,\n            AuthorizationRequestCustomizerDelegator authorizationRequestCustomizerDelegator) {\n        // DI\u901a\u8fc7\u6784\u9020\u5668\u81ea\u52a8\u6ce8\u5165clientRegistrationRepository\uff0c\u5b9e\u4f8b\u5316DefaultOAuth2AuthorizationRequestResolver\u5904\u7406\n        DefaultOAuth2AuthorizationRequestResolver authorizationRequestResolver = new DefaultOAuth2AuthorizationRequestResolver(clientRegistrationRepository,\n                OAuth2AuthorizationRequestRedirectFilter.DEFAULT_AUTHORIZATION_REQUEST_BASE_URI);\n        // \u517c\u5bb9\u5fae\u4fe1\u767b\u5f55\u6388\u6743\u7533\u8bf7\n        authorizationRequestResolver.setAuthorizationRequestCustomizer(authorizationRequestCustomizerDelegator);\n        return new BasicAuthorizationRequestResolver(authorizationRequestResolver);\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"3-resourceconfig",children:"3. ResourceConfig"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.config;\n\nimport com.light.sas.authorization.baisc.BasicAuthorizationRequestResolver;\nimport com.light.sas.authorization.baisc.delegator.OAuth2AccessTokenResponseClientDelegator;\nimport com.light.sas.authorization.dingtalk.DingTalkOAuth2LoginAuthenticationProvider;\nimport com.light.sas.authorization.handler.LoginFailureHandler;\nimport com.light.sas.authorization.handler.LoginSuccessHandler;\nimport com.light.sas.properties.CustomSecurityProperties;\nimport com.light.sas.utils.SecurityUtils;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.util.UrlUtils;\nimport org.springframework.web.filter.CorsFilter;\n\n/**\n * \u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n * <p>\n * {@link EnableMethodSecurity} \u5f00\u542f\u5168\u5c40\u65b9\u6cd5\u8ba4\u8bc1\uff0c\u542f\u7528JSR250\u6ce8\u89e3\u652f\u6301\uff0c\u542f\u7528\u6ce8\u89e3 {@link Secured} \u652f\u6301\uff0c\n * \u5728Spring Security 6.0\u7248\u672c\u4e2d\u5c06@Configuration\u6ce8\u89e3\u4ece@EnableWebSecurity, @EnableMethodSecurity, @EnableGlobalMethodSecurity\n * \u548c @EnableGlobalAuthentication \u4e2d\u79fb\u9664\uff0c\u4f7f\u7528\u8fd9\u4e9b\u6ce8\u89e3\u9700\u624b\u52a8\u6dfb\u52a0 @Configuration \u6ce8\u89e3\n * {@link EnableWebSecurity} \u6ce8\u89e3\u6709\u4e24\u4e2a\u4f5c\u7528:\n * 1. \u52a0\u8f7d\u4e86WebSecurityConfiguration\u914d\u7f6e\u7c7b, \u914d\u7f6e\u5b89\u5168\u8ba4\u8bc1\u7b56\u7565\u3002\n * 2. \u52a0\u8f7d\u4e86AuthenticationConfiguration, \u914d\u7f6e\u4e86\u8ba4\u8bc1\u4fe1\u606f\u3002\n */\n@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\n@EnableMethodSecurity(jsr250Enabled = true, securedEnabled = true)\npublic class ResourceConfig {\n\n    private final CorsFilter corsFilter;\n\n    /**\n     * \u4e0d\u9700\u8981\u8ba4\u8bc1\u5373\u53ef\u8bbf\u95ee\u7684\u8def\u5f84\n     */\n    private final CustomSecurityProperties customSecurityProperties;\n\n    private final OAuth2AccessTokenResponseClientDelegator accessTokenResponseClientDelegator;\n\n    private final BasicAuthorizationRequestResolver authorizationRequestResolver;\n\n    private final DingTalkOAuth2LoginAuthenticationProvider dingTalkOAuth2LoginAuthenticationProvider;\n\n    /**\n     * \u914d\u7f6e\u8ba4\u8bc1\u76f8\u5173\u7684\u8fc7\u6ee4\u5668\u94fe(\u8d44\u6e90\u670d\u52a1\uff0c\u5ba2\u6237\u7aef\u914d\u7f6e)\n     *\n     * @param http spring security\u6838\u5fc3\u914d\u7f6e\u7c7b\n     * @return \u8fc7\u6ee4\u5668\u94fe\n     * @throws Exception \u629b\u51fa\n     */\n    @Bean\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\n        // \u6dfb\u52a0\u57fa\u7840\u7684\u8ba4\u8bc1\u914d\u7f6e\n        SecurityUtils.applyBasicSecurity(http, corsFilter, customSecurityProperties);\n\n        http.authorizeHttpRequests((authorize) -> authorize\n                        // \u653e\u884c\u9759\u6001\u8d44\u6e90\u548c\u4e0d\u9700\u8981\u8ba4\u8bc1\u7684url\n                        .requestMatchers(customSecurityProperties.getIgnoreUriList().toArray(new String[0])).permitAll()\n                        .anyRequest().authenticated()\n                )\n                // \u6307\u5b9a\u767b\u5f55\u9875\u9762\n                .formLogin(formLogin -> {\n                            formLogin.loginPage("/login");\n                            if (UrlUtils.isAbsoluteUrl(customSecurityProperties.getLoginUrl())) {\n                                // \u7edd\u5bf9\u8def\u5f84\u4ee3\u8868\u662f\u524d\u540e\u7aef\u5206\u79bb\uff0c\u767b\u5f55\u6210\u529f\u548c\u5931\u8d25\u6539\u4e3a\u5199\u56dejson\uff0c\u4e0d\u91cd\u5b9a\u5411\u4e86\n                                formLogin.successHandler(new LoginSuccessHandler());\n                                formLogin.failureHandler(new LoginFailureHandler());\n                            }\n                        }\n                );\n\n        // \u81ea\u5b9a\u4e49\u9489\u9489\u8ba4\u8bc1\u767b\u5f55\u8ba4\u8bc1\u63d0\u4f9b\n        http.authenticationProvider(dingTalkOAuth2LoginAuthenticationProvider);\n\n        // \u8054\u5408\u8eab\u4efd\u8ba4\u8bc1\n        http.oauth2Login(oauth2Login -> oauth2Login\n                .loginPage(customSecurityProperties.getLoginUrl())\n                .authorizationEndpoint(authorization -> authorization\n                        .authorizationRequestResolver(this.authorizationRequestResolver)\n                )\n                .tokenEndpoint(token -> token\n                        .accessTokenResponseClient(this.accessTokenResponseClientDelegator)\n                )\n        );\n\n        return http.build();\n    }\n\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"4-testcontroller",children:"4. TestController"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.controller;\n\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n/**\n * \u6d4b\u8bd5\u63a5\u53e3\n */\n@RestController\npublic class TestController {\n\n    @GetMapping("/test01")\n    @PreAuthorize("hasAuthority(\'SCOPE_message.read\')")\n    public String test01() {\n        return "test01";\n    }\n\n    @GetMapping("/test02")\n    @PreAuthorize("hasAuthority(\'SCOPE_message.write\')")\n    public String test02() {\n        return "test02";\n    }\n\n    @GetMapping("/app")\n    @PreAuthorize("hasAuthority(\'app\')")\n    public String app() {\n        return "app";\n    }\n}\n\n'})}),"\n",(0,i.jsx)(t.h4,{id:"5-customoauth2userservice",children:"5. CustomOAuth2UserService"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.light.sas.service.impl;\n\nimport com.light.sas.authorization.baisc.delegator.OAuth2UserRequestEntityConverterDelegator;\nimport com.light.sas.authorization.dingtalk.DingTalkUserResponseConverter;\nimport com.light.sas.authorization.wechat.WechatUserResponseConverter;\nimport com.light.sas.authorization.wecom.WecomUserResponseConverter;\nimport com.light.sas.constant.SecurityConstants;\nimport com.light.sas.entity.OAuth2ThirdAccount;\nimport com.light.sas.exception.InvalidCaptchaException;\nimport com.light.sas.service.OAuth2ThirdAccountService;\nimport com.light.sas.strategy.context.OAuth2UserConverterContext;\nimport jakarta.servlet.http.HttpServletRequest;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.converter.ByteArrayHttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.ResourceHttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\nimport org.springframework.http.converter.support.AllEncompassingFormHttpMessageConverter;\nimport org.springframework.security.authentication.AuthenticationServiceException;\nimport org.springframework.security.oauth2.client.http.OAuth2ErrorResponseErrorHandler;\nimport org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;\nimport org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.user.DefaultOAuth2User;\nimport org.springframework.security.oauth2.core.user.OAuth2User;\nimport org.springframework.security.web.WebAttributes;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.context.request.RequestAttributes;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\n\n/**\n * \u81ea\u5b9a\u4e49\u4e09\u65b9oauth2\u767b\u5f55\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u670d\u52a1\n */\n@Slf4j\n@Service\npublic class CustomOAuth2UserService extends DefaultOAuth2UserService {\n\n    private final OAuth2ThirdAccountService thirdAccountService;\n\n    private final OAuth2UserConverterContext userConverterContext;\n\n    public CustomOAuth2UserService(OAuth2ThirdAccountService thirdAccountService,\n                                   OAuth2UserConverterContext userConverterContext,\n                                   OAuth2UserRequestEntityConverterDelegator userRequestEntityConverterDelegator) {\n        this.thirdAccountService = thirdAccountService;\n        this.userConverterContext = userConverterContext;\n        // \u521d\u59cb\u5316\u65f6\u6dfb\u52a0\u5fae\u4fe1\u7528\u6237\u4fe1\u606f\u8bf7\u6c42\u5904\u7406\uff0coidcUserService\u672c\u8d28\u4e0a\u662f\u8c03\u7528\u8be5\u7c7b\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\uff0c\u4e0d\u7528\u6dfb\u52a0\n        super.setRequestEntityConverter(userRequestEntityConverterDelegator);\n        // \u8bbe\u7f6e\u7528\u6237\u4fe1\u606f\u8f6c\u6362\u5668\n        RestTemplate restTemplate = new RestTemplate();\n        restTemplate.setErrorHandler(new OAuth2ErrorResponseErrorHandler());\n        List<HttpMessageConverter<?>> messageConverters = List.of(\n                new StringHttpMessageConverter(),\n                // \u83b7\u53d6\u5fae\u4fe1\u7528\u6237\u4fe1\u606f\u65f6\u4f7f\u5176\u652f\u6301\u201ctext/plain\u201d\n                new WechatUserResponseConverter(),\n                new WecomUserResponseConverter(),\n                new DingTalkUserResponseConverter(),\n                new ResourceHttpMessageConverter(),\n                new ByteArrayHttpMessageConverter(),\n                new AllEncompassingFormHttpMessageConverter()\n        );\n        restTemplate.setMessageConverters(messageConverters);\n        super.setRestOperations(restTemplate);\n    }\n\n    @Override\n    public OAuth2User loadUser(OAuth2UserRequest userRequest) throws OAuth2AuthenticationException {\n        try {\n            OAuth2User auth2User = super.loadUser(userRequest);\n            // \u8f6c\u4e3a\u9879\u76ee\u4e2d\u7684\u4e09\u65b9\u7528\u6237\u4fe1\u606f\n            OAuth2ThirdAccount oauth2ThirdAccount = userConverterContext.convert(userRequest, auth2User);\n            // \u68c0\u67e5\u7528\u6237\u4fe1\u606f\n            thirdAccountService.checkAndSaveUser(oauth2ThirdAccount);\n            // \u5c06loginType\u8bbe\u7f6e\u81f3attributes\u4e2d\n            LinkedHashMap<String, Object> attributes = new LinkedHashMap<>(auth2User.getAttributes());\n            // \u5c06RegistrationId\u5f53\u505a\u767b\u5f55\u7c7b\u578b\n            attributes.put(SecurityConstants.LOGIN_TYPE_NAME, userRequest.getClientRegistration().getRegistrationId());\n            String userNameAttributeName = userRequest.getClientRegistration().getProviderDetails().getUserInfoEndpoint()\n                    .getUserNameAttributeName();\n            return new DefaultOAuth2User(auth2User.getAuthorities(), attributes, userNameAttributeName);\n        } catch (Exception e) {\n            log.error("Load user info error", e);\n            // \u83b7\u53d6\u5f53\u524drequest\n            RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();\n            if (requestAttributes == null) {\n                throw new InvalidCaptchaException("Failed to get the current request.");\n            }\n            HttpServletRequest request = ((ServletRequestAttributes) requestAttributes).getRequest();\n            // \u5c06\u5f02\u5e38\u653e\u5165session\u4e2d\n            request.getSession(Boolean.FALSE).setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, e);\n            throw new AuthenticationServiceException(e.getMessage(), e);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"6-applicationyaml",children:"6. application.yaml"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",children:"server:\n  port: 8080\n#  # \u6ce8\u610f\u5f3a\u5236\u8bbe\u7f6e session \u7684\u57df\u540d\uff0c\u53ef\u80fd\u5bfc\u81f4session\u5931\u6548\n#  servlet:\n#    session:\n#      cookie:\n#        domain: 127.0.0.1\n\nspring:\n  jackson:\n    default-property-inclusion: non_null\n  datasource:\n    driver-class-name: org.postgresql.Driver\n    url: jdbc:postgresql://localhost:5432/sas?stringtype=unspecified\n    username: postgres\n    password: postgres\n  data:\n    redis:\n      host: 127.0.0.1\n      port: 6379\n      password: ''\n      database: 0\n      timeout: 3000\n      lettuce:\n        pool:\n          min-idle: 5\n          max-idle: 10\n          max-active: 10\n          max-wait: 1000\n  security:\n    oauth2:\n      client:\n        registration:\n          # \u8fd9\u4e2a'gitee'\u5c31\u662fregistrationId\n          gitee:\n            # \u6307\u5b9aoauth\u767b\u5f55\u63d0\u4f9b\u8005\uff0c\u8be5oauth\u767b\u5f55\u7531provider\u4e2d\u7684gitee\u6765\u5904\u7406\n            provider: gitee\n            # \u5ba2\u6237\u7aef\u540d\u5b57\n            client-name: Sign in with Gitee\n            # \u8ba4\u8bc1\u65b9\u5f0f\n            authorization-grant-type: authorization_code\n            # \u5ba2\u6237\u7aefid\uff0c\u4f7f\u7528\u81ea\u5df1\u7684gitee\u7684\u5ba2\u6237\u7aefid\n            client-id: 2ec8d36a4d6afdadf831513d4d888552bd98fe69e26fc23828dff95ee52dd092\n            # \u5ba2\u6237\u7aef\u79d8\u94a5\uff0c\u4f7f\u7528\u81ea\u5df1\u7684gitee\u7684\u5ba2\u6237\u7aef\u79d8\u94a5\n            client-secret: 0d2b08cbff9d5d2f7549420ee343e847838cd885315089db2cbda5044217bf36\n            # \u56de\u8c03\u5730\u5740\n            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'\n            # \u7533\u8bf7scope\u5217\u8868\n            scope:\n              - emails\n              - projects\n          github:\n            # security client\u9ed8\u8ba4\u5b9e\u73b0\u4e86GitHub\u63d0\u4f9b\u7684oauth2\u767b\u5f55\n            provider: github\n            client-id: 701a063664c42f669d7b\n            client-secret: 68cf372920e6ea6ded19d44a36fc4f2afe5aaec6\n          wechat:\n            # \u5fae\u4fe1\u767b\u5f55\u914d\u7f6e\n            provider: wechat\n            # \u5ba2\u6237\u7aef\u540d\u5b57\n            client-name: Sign in with WeChat\n            # \u8ba4\u8bc1\u65b9\u5f0f\n            authorization-grant-type: authorization_code\n            # \u5ba2\u6237\u7aefid\uff0c\u4f7f\u7528\u81ea\u5df1\u7684\u5fae\u4fe1\u7684appid\n            client-id: wx46885fab83517dbd\n            # \u5ba2\u6237\u7aef\u79d8\u94a5\uff0c\u4f7f\u7528\u81ea\u5df1\u7684\u5fae\u4fe1\u7684app secret\n            client-secret: 3e975a60d1457677b5093aa8feddc34a\n            # \u56de\u8c03\u5730\u5740\uff0c\u8bbe\u7f6e\u4e3a\u8ba4\u8bc1\u670d\u52a1\u7684\u56de\u8c03\u5730\u5740\uff0c\u7531\u8ba4\u8bc1\u670d\u52a1\u7528code\u6362\u53d6token\n            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'\n            # \u7533\u8bf7scope\u5217\u8868\n            scope:\n              - snsapi_userinfo\n          wecom:\n            provider: wecom\n            client-name: Torch\n            agent_id: 1000007\n            # client-id\u4e3a\u4f01\u4e1a\u5fae\u4fe1 \u7684\u4f01\u4e1aID\n            client-id: ww230acfa317019076\n            # client-secret\u4f01\u4e1a\u5fae\u4fe1\u5bf9\u5e94\u5e94\u7528\u7684secret\uff0c\u6bcf\u4e2a\u4f01\u4e1a\u5fae\u4fe1\u5e94\u7528\u90fd\u6709\u72ec\u7acb\u7684secret\uff0c\u4e0d\u8981\u641e\u9519\n            client-secret: WmCHmEl2Y18w9PS3JiUPrMwWhRAXVUcfIaf44Jp5JuQ\n            authorization-grant-type: authorization_code\n            # http://968395c.r3.cpolar.top/oauth2/authorization/wecom\n            redirect-uri: http://968395c.r3.cpolar.top/login/oauth2/code/wecom\n          ding_talk:\n            provider: ding_talk\n            client-name: Torch\n            app-id: 33d69354-9ac9-4776-950d-69bbea315757\n            agent-id: 2970491842\n            # client-id\u4e3a\u9489\u9489\u5e94\u7528ID\n            client-id: dingutlbtrmynzsxoznm\n            # client-secret\u9489\u9489\u5e94\u7528\u7684secret\n            client-secret: 6GG1WRTTyfxArA3TuRB6tSvOn2kpDMxrhC64pVhhndgvsIlMJlitX_f4TYkInrsZ\n            authorization-grant-type: authorization_code\n            # http://968395c.r3.cpolar.top/oauth2/authorization/ding_talk\n            redirect-uri: http://968395c.r3.cpolar.top/login/oauth2/code/ding_talk\n            scope:\n              - openid\n        # oauth\u767b\u5f55\u63d0\u4f9b\u5546\n        provider:\n          # gitee\u7684OAuth2\u7aef\u70b9\u914d\u7f6e\n          gitee:\n            # \u8bbe\u7f6e\u7528\u6237\u4fe1\u606f\u54cd\u5e94\u4f53\u4e2d\u8d26\u53f7\u7684\u5b57\u6bb5\n            user-name-attribute: login\n            # \u83b7\u53d6token\u7684\u5730\u5740\n            token-uri: https://gitee.com/oauth/token\n            # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740\n            user-info-uri: https://gitee.com/api/v5/user\n            # \u53d1\u8d77\u6388\u6743\u7533\u8bf7\u7684\u5730\u5740\n            authorization-uri: https://gitee.com/oauth/authorize\n          # github\u7684OAuth2\u7aef\u70b9\u914d\u7f6e\n          github:\n            user-name-attribute: login\n          # \u5fae\u4fe1\u7684OAuth2\u7aef\u70b9\u914d\u7f6e\n          wechat:\n            # \u8bbe\u7f6e\u7528\u6237\u4fe1\u606f\u54cd\u5e94\u4f53\u4e2d\u8d26\u53f7\u7684\u5b57\u6bb5\n            user-name-attribute: nickname\n            # \u83b7\u53d6token\u7684\u5730\u5740 https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#1\n            token-uri: https://api.weixin.qq.com/sns/oauth2/access_token\n            # \u83b7\u53d6\u7528\u6237\u4fe1\u606f\u7684\u5730\u5740 https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#3\n            user-info-uri: https://api.weixin.qq.com/sns/userinfo\n            # \u53d1\u8d77\u6388\u6743\u7533\u8bf7\u7684\u5730\u5740 https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html#0\n            authorization-uri: https://open.weixin.qq.com/connect/oauth2/authorize\n          wecom:\n            authorization-uri: https://open.work.weixin.qq.com/wwopen/sso/qrConnect\n            token-uri: https://qyapi.weixin.qq.com/cgi-bin/gettoken\n            user-info-uri: https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo\n            user-name-attribute: userid\n          ding_talk:\n            authorization-uri: https://login.dingtalk.com/oauth2/auth\n            token-uri: https://api.dingtalk.com/v1.0/oauth2/userAccessToken\n            user-info-uri: https://api.dingtalk.com/v1.0/contact/users/{unionId}\n            jwk-set-uri: http://127.0.0.1:8080/oauth2/jwks\n            user-name-attribute: nick\n\n# Mybatis-Plus \u914d\u7f6e\nmybatis-plus:\n  # \u626b\u63cfmapper\u6587\u4ef6\n  mapper-locations:\n    - classpath*:mapper/**/*Mapper.xml\n\nlogging:\n  level:\n    org.springframework.security: debug\n    com.light.sas: debug\n\ncustom:\n  # \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u914d\u7f6e\n  security:\n    # \u6388\u6743\u670d\u52a1\u5730\u5740\n    issuer-url: http://127.0.0.1:8080\n    # \u767b\u5f55\u9875\u9762\u8def\u5f84\n    login-url: http://127.0.0.1:5173/login\n    # \u6388\u6743\u786e\u8ba4\u9875\u9762\u8def\u5f84\n    consent-page-uri: http://127.0.0.1:5173/consent\n    # \u8bbe\u5907\u7801\u9a8c\u8bc1\u9875\u9762\n    device-activate-uri: http://127.0.0.1:5173/activate\n    # \u8bbe\u5907\u7801\u9a8c\u8bc1\u6210\u529f\u9875\u9762\n    device-activated-uri: http://127.0.0.1:5173/activated\n    # \u4e0d\u9700\u8981\u8ba4\u8bc1\u7684\u5730\u5740\n    ignore-uri-list: assets/**, /webjars/**, /login, /getCaptcha, /getSmsCaptcha, /error, /oauth2/consent/parameters, /test03, /favicon.ico, /qrCode/login/**\n\n"})}),"\n",(0,i.jsx)(t.h2,{id:"\u4e94\u6d4b\u8bd5",children:"\u4e94\u3001\u6d4b\u8bd5"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-shell",children:"# \u4f7f\u7528\u6d4f\u89c8\u5668\u8bbf\u95ee\u4e0b\u9762\u94fe\u63a5\uff0c\u5206\u522b\u5bf9\u5e94\u4f01\u4e1a\u5fae\u4fe1 \u9489\u9489\u7684\u767b\u5f55\nhttp://968395c.r3.cpolar.top/oauth2/authorization/wecom\n\nhttp://968395c.r3.cpolar.top/oauth2/authorization/ding_talk\n"})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);
"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[4709],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=r,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||o;return t?i.createElement(m,a(a({ref:n},p),{},{components:t})):i.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},42042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(87462),r=(t(67294),t(3905));const o={},a=void 0,s={unversionedId:"redis/RedisConfigBean",id:"redis/RedisConfigBean",title:"RedisConfigBean",description:"Redis\u914d\u7f6e\u7c7b",source:"@site/middleware/redis/RedisConfigBean.md",sourceDirName:"redis",slug:"/redis/RedisConfigBean",permalink:"/light-docusaurus/middleware/redis/RedisConfigBean",draft:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/middleware/redis/RedisConfigBean.md",tags:[],version:"current",lastUpdatedBy:"liuhui",lastUpdatedAt:1699352042,formattedLastUpdatedAt:"2023\u5e7411\u67087\u65e5",frontMatter:{},sidebar:"middleware",previous:{title:"Redis-data-persistence",permalink:"/light-docusaurus/middleware/redis/Redis-data-persistence"},next:{title:"Risk-Control",permalink:"/light-docusaurus/middleware/redis/Risk-Control"}},c={},l=[],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Redis\u914d\u7f6e\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import com.alibaba.fastjson.JSON;\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.ReadFrom;\nimport io.lettuce.core.SocketOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport io.lettuce.core.cluster.ClusterClientOptions;\nimport io.lettuce.core.cluster.ClusterTopologyRefreshOptions;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.EpollProvider;\nimport io.lettuce.core.resource.NettyCustomizer;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.epoll.EpollChannelOption;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.ClassUtils;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.CachingConfigurerSupport;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.interceptor.KeyGenerator;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisClusterConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.connection.RedisPassword;\nimport org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.net.URI;\nimport java.net.URL;\nimport java.time.Duration;\nimport java.util.Date;\nimport java.util.Locale;\n\n/**\n * redis\u914d\u7f6e\n *\n */\n@Slf4j\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    @Value("${redis.cache.expire}")\n    private Long expireTime;\n\n    /**\n     * redis cluster \u8fde\u63a5\u65f6 RedisConnectionFactory bean \u6ce8\u5165\n     * \u5728\u6784\u5efaLettuceConnectionFactory\u65f6\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u5185\u7f6e\u7684destroyMethod\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4Redis\u8fde\u63a5\u65e9\u4e8e\u5176\u5b83Bean\u88ab\u9500\u6bc1\n     * @return\n     */\n    @Bean(destroyMethod = "destroy")\n    public LettuceConnectionFactory myLettuceConnectionFactory(RedisProperties redisProperties) {\n        // https://github.com/lettuce-io/lettuce-core/wiki/Redis-Cluster#user-content-refreshing-the-cluster-topology-view\n        // \u914d\u7f6e\u7528\u4e8e\u5f00\u542f\u81ea\u9002\u5e94\u5237\u65b0\u548c\u5b9a\u65f6\u5237\u65b0\u3002\u5982\u81ea\u9002\u5e94\u5237\u65b0\u4e0d\u5f00\u542f\uff0cRedis\u96c6\u7fa4\u53d8\u66f4\u65f6\u5c06\u4f1a\u5bfc\u81f4\u8fde\u63a5\u5f02\u5e38\n        ClusterTopologyRefreshOptions clusterTopologyRefreshOptions = ClusterTopologyRefreshOptions.builder()\n                .enablePeriodicRefresh(Duration.ofSeconds(30))// \u5f00\u542f\u5468\u671f\u5237\u65b0(\u9ed8\u8ba460\u79d2)\n                .enableAllAdaptiveRefreshTriggers()// \u5f00\u542f\u81ea\u9002\u5e94\u5237\u65b0\n                .build();\n\n        // 6.2.7\u4e4b\u540e\u65b0\u589e\u914d\u7f6e\u9879\uff0c\u4ec5\u652f\u6301Linux \u4e0d\u652f\u6301Windows\n        // https://github.com/lettuce-io/lettuce-core/issues/2082\n//        SocketOptions socketOptions = SocketOptions.builder()\n//                .keepAlive(SocketOptions.KeepAliveOptions.builder()\n//                        .enable()\n//                        .idle(Duration.ofSeconds(15))\n//                        .interval(Duration.ofSeconds(5))\n//                        .count(3)\n//                        .build())\n//                // TCP_USER_TIMEOUT >= TCP_KEEPIDLE + TCP_KEEPINTVL * TCP_KEEPCNT\n//                .tcpUserTimeout(SocketOptions.TcpUserTimeoutOptions.builder()\n//                        .enable()\n//                        .tcpUserTimeout(Duration.ofSeconds(30))\n//                        .build())\n//                .build();\n\n        // https://github.com/lettuce-io/lettuce-core/wiki/Client-Options\n        ClusterClientOptions clusterClientOptions = ClusterClientOptions.builder()\n                //redis\u547d\u4ee4\u8d85\u65f6\u65f6\u95f4,\u8d85\u65f6\u540e\u624d\u4f1a\u4f7f\u7528\u65b0\u7684\u62d3\u6251\u4fe1\u606f\u91cd\u65b0\u5efa\u7acb\u8fde\u63a5\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(10)))\n                .topologyRefreshOptions(clusterTopologyRefreshOptions)//\u62d3\u6251\u5237\u65b0\n                .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n                .autoReconnect(true)\n                .socketOptions(SocketOptions.builder().keepAlive(true).build())\n                .validateClusterNodeMembership(false)// \u53d6\u6d88\u6821\u9a8c\u96c6\u7fa4\u8282\u70b9\u7684\u6210\u5458\u5173\u7cfb\n                .build();\n\n        RedisProperties.Pool pool = redisProperties.getLettuce().getPool();\n        GenericObjectPoolConfig genericObjectPoolConfig = new GenericObjectPoolConfig();\n        genericObjectPoolConfig.setMaxIdle(pool.getMaxIdle());\n        genericObjectPoolConfig.setMinIdle(pool.getMinIdle());\n        genericObjectPoolConfig.setMaxTotal(pool.getMaxActive());\n        genericObjectPoolConfig.setMaxWait(pool.getMaxWait());\n\n        LettuceClientConfiguration clientConfig = LettucePoolingClientConfiguration.builder()\n                .commandTimeout(Duration.ofMillis(10_000))\n                .poolConfig(genericObjectPoolConfig)\n                .clientOptions(clusterClientOptions)\n                .readFrom(ReadFrom.REPLICA_PREFERRED)\n                .clientResources(clientResources())\n                .build();\n        return new LettuceConnectionFactory(clusterConfiguration(redisProperties), clientConfig);\n    }\n\n    private RedisClusterConfiguration clusterConfiguration(RedisProperties redisProperties) {\n        RedisProperties.Cluster clusterProperties = redisProperties.getCluster();\n        RedisClusterConfiguration config = new RedisClusterConfiguration(clusterProperties.getNodes());\n        if (clusterProperties.getMaxRedirects() != null) {\n            config.setMaxRedirects(clusterProperties.getMaxRedirects());\n        }\n        if (redisProperties.getPassword() != null) {\n            config.setPassword(RedisPassword.of(redisProperties.getPassword()));\n        }\n        return config;\n    }\n\n    public ClientResources clientResources() {\n        NettyCustomizer nettyCustomizer = new NettyCustomizer() {\n            // https://github.com/lettuce-io/lettuce-core/issues/762\n            @Override\n            public void afterChannelInitialized(Channel channel) {\n                // Windows\u4e0b\u6ca1\u6709Epoll\uff0c\u4f7f\u7528 netty \u5fc3\u8df3\u68c0\u6d4b\u5904\u7406\n                if (!EpollProvider.isAvailable()) {\n                    channel.pipeline()\n                            .addLast(new IdleStateHandler(120, 120, 240))\n                            .addLast(new ChannelDuplexHandler() {\n                                @Override\n                                public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                                    if (evt instanceof IdleStateEvent) {\n                                        ctx.disconnect();\n                                    }\n                                }\n                            });\n                }\n            }\n\n            // https://github.com/lettuce-io/lettuce-core/issues/1428\n            @Override\n            public void afterBootstrapInitialized(Bootstrap bootstrap) {\n                if (EpollProvider.isAvailable()) {\n                    bootstrap.option(EpollChannelOption.SO_KEEPALIVE, Boolean.TRUE);\n                    bootstrap.option(EpollChannelOption.TCP_KEEPIDLE, 15);\n                    bootstrap.option(EpollChannelOption.TCP_KEEPINTVL, 5);\n                    bootstrap.option(EpollChannelOption.TCP_KEEPCNT, 3);\n                    // Socket Timeout (milliseconds)\n                    // TCP_USER_TIMEOUT >= TCP_KEEPIDLE + TCP_KEEPINTVL * TCP_KEEPCNT\n                    // https://blog.cloudflare.com/when-tcp-sockets-refuse-to-die/\n                    bootstrap.option(EpollChannelOption.TCP_USER_TIMEOUT, 60_000);\n                }\n            }\n        };\n        return ClientResources.builder().nettyCustomizer(nettyCustomizer).build();\n    }\n\n    /**\n     * redis \u6570\u636e\u76d1\u542cbean\n     *\n     * @param beanFactory\n     * @param redisConnectionFactory\n     * @return\n     */\n    @Bean\n    public RedisMessageListenerFactory redisMessageListenerFactory(DefaultListableBeanFactory beanFactory,\n                                                                   RedisConnectionFactory redisConnectionFactory) {\n        return new RedisMessageListenerFactory(beanFactory, redisConnectionFactory);\n    }\n\n    @Bean\n    @SuppressWarnings(value = {"unchecked", "rawtypes"})\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        mapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n        serializer.setObjectMapper(mapper);\n\n        // \u4f7f\u7528StringRedisSerializer\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316redis\u7684key\u503c\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(serializer);\n\n        // Hash\u7684key\u4e5f\u91c7\u7528StringRedisSerializer\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(serializer);\n\n        template.afterPropertiesSet();\n        return template;\n    }\n\n    @Bean\n    public RedisTool redisTool(RedisTemplate<Object, Object> redisTemplate) {\n        return new RedisTool(redisTemplate);\n    }\n\n    @Bean\n    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {\n        FastJson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new FastJson2JsonRedisSerializer(Object.class);\n        //\u89e3\u51b3\u67e5\u8be2\u7f13\u5b58\u8f6c\u6362\u5f02\u5e38\u7684\u95ee\u9898\n        // \u914d\u7f6e\u5e8f\u5217\u5316\uff08\u89e3\u51b3\u4e71\u7801\u7684\u95ee\u9898\uff09\n        //entryTtl\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n        //serializeValuesWith\u8bbe\u7f6eredis\u5b58\u50a8\u7684\u5e8f\u5217\u5316\u65b9\u5f0f\n        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()\n                .entryTtl(Duration.ofSeconds(expireTime))\n                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(genericJackson2JsonRedisSerializer))\n                .disableCachingNullValues();\n        //\u5b9a\u4e49\u8981\u8fd4\u56de\u7684redis\u7f13\u5b58\u7ba1\u7406\u5bf9\u8c61\n        RedisCacheManager cacheManager = RedisCacheManager.builder(connectionFactory)\n                .cacheDefaults(config)\n                .build();\n        return cacheManager;\n    }\n\n    @Bean\n    public RedisCacheConfiguration redisCacheConfiguration() {\n        FastJson2JsonRedisSerializer serializer = new FastJson2JsonRedisSerializer(Object.class);\n        RedisCacheConfiguration configuration = RedisCacheConfiguration.defaultCacheConfig();\n        configuration = configuration.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))\n                .entryTtl(Duration.ofSeconds(expireTime));\n        return configuration;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u751f\u6210redis-key\n     *\n     * @return\n     */\n    @Override\n    @Bean\n    public KeyGenerator keyGenerator() {\n        String sp = "_";\n        return (o, method, objects) -> {\n            StringBuilder sb = new StringBuilder();\n//            sb.append(o.getClass().getSimpleName()).append(sp);\n//            sb.append(method.getName()).append(sp);\n            if (objects.length > 0) {\n                for (Object object : objects) {\n                    if (isSimpleValueType(object.getClass())) {\n                        sb.append(object).append(sp);\n                    } else {\n                        sb.append(JSON.toJSONString(object).hashCode());\n                    }\n                }\n            } else {\n                sb.append("NO_PARAM_KEY");\n            }\n            // \u8c03\u8bd5\u65f6\u53ef\u89c2\u6d4b\n//            log.info("\u81ea\u5b9a\u4e49\u751f\u6210redis-key => {}", sb);\n            return sb.toString();\n        };\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u662f\u7b80\u5355\u503c\u7c7b\u578b.\u5305\u62ec\uff1a\u57fa\u7840\u6570\u636e\u7c7b\u578b\u3001CharSequence\u3001Number\u3001Date\u3001URL\u3001URI\u3001Locale\u3001Class;\n     *\n     * @param clazz\n     * @return\n     */\n    public static boolean isSimpleValueType(Class<?> clazz) {\n        return (ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.isEnum() || CharSequence.class.isAssignableFrom(clazz)\n                || Number.class.isAssignableFrom(clazz) || Date.class.isAssignableFrom(clazz) || URI.class == clazz\n                || URL.class == clazz || Locale.class == clazz || Class.class == clazz);\n    }\n}\n')),(0,r.kt)("p",null,"Redis\u4e8b\u4ef6\u76d1\u542c\u5bb9\u5668\u5de5\u5382\u6ce8\u518c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import cn.hutool.core.util.StrUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.data.redis.connection.*;\nimport org.springframework.data.redis.connection.jedis.JedisConnectionFactory;\nimport org.springframework.data.redis.listener.RedisMessageListenerContainer;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * redis cluster \u4e8b\u4ef6\u76d1\u542c\n */\n@Slf4j\npublic class RedisMessageListenerFactory {\n    @Value("${spring.redis.password}")\n    private String password;\n\n    @Value("${spring.redis.cluster.nodes:}")\n    private String nodes;\n\n    private final DefaultListableBeanFactory beanFactory;\n\n    private final RedisConnectionFactory redisConnectionFactory;\n\n    public RedisMessageListenerFactory(DefaultListableBeanFactory beanFactory, RedisConnectionFactory redisConnectionFactory) {\n        this.beanFactory = beanFactory;\n        this.redisConnectionFactory = redisConnectionFactory;\n    }\n\n    @PostConstruct\n    public void createRedisListenerContain() {\n        // \u5355\u673a\n        if (StrUtil.isBlank(nodes)) {\n            registerRedisMessageListenerContainerBean("redisMessageContainer", redisConnectionFactory);\n            return;\n        }\n\n        RedisClusterConnection redisClusterConnection = redisConnectionFactory.getClusterConnection();\n        Iterable<RedisClusterNode> nodes = redisClusterConnection.clusterGetNodes();\n        for (RedisClusterNode node : nodes) {\n            if (node.isMaster()) {\n                log.info("\u83b7\u53d6\u5230redis\u7684master\u8282\u70b9\u4e3a[{}]", node);\n                String containerBeanName = "messageContainer" + node.hashCode();\n                if (beanFactory.containsBean(containerBeanName)) {\n                    return;\n                }\n\n                RedisStandaloneConfiguration redisStandaloneConfiguration =\n                        new RedisStandaloneConfiguration();\n                redisStandaloneConfiguration.setHostName(node.getHost());\n                redisStandaloneConfiguration.setPassword(RedisPassword.of(password));\n                redisStandaloneConfiguration.setPort(node.getPort());\n                JedisConnectionFactory factory = new JedisConnectionFactory(redisStandaloneConfiguration);\n                factory.afterPropertiesSet();\n                factory.getConnection().setConfig("notify-keyspace-events", "KEA");\n\n                registerRedisMessageListenerContainerBean(containerBeanName, factory);\n            }\n        }\n    }\n\n    private void registerRedisMessageListenerContainerBean(String containerBeanName, RedisConnectionFactory factory) {\n        BeanDefinitionBuilder containerBeanDefinitionBuilder = BeanDefinitionBuilder\n                .genericBeanDefinition(RedisMessageListenerContainer.class);\n        containerBeanDefinitionBuilder.addPropertyValue("connectionFactory", factory);\n        containerBeanDefinitionBuilder.setScope(BeanDefinition.SCOPE_SINGLETON);\n        containerBeanDefinitionBuilder.setLazyInit(false);\n        beanFactory.registerBeanDefinition(containerBeanName,\n                containerBeanDefinitionBuilder.getRawBeanDefinition());\n\n        RedisMessageListenerContainer container = beanFactory.getBean(containerBeanName,\n                RedisMessageListenerContainer.class);\n        container.start();\n    }\n}\n')),(0,r.kt)("p",null,"Redis\u4e8b\u4ef6\u76d1\u542c\u6ce8\u518c\u670d\u52a1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.DependsOn;\nimport org.springframework.data.redis.connection.MessageListener;\nimport org.springframework.data.redis.listener.PatternTopic;\nimport org.springframework.data.redis.listener.RedisMessageListenerContainer;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n/**\n * redis\u96c6\u7fa4\u7684\u76d1\u542c\u6ce8\u518c\u670d\u52a1\n */\n@Slf4j\n@Service\n@DependsOn("redisMessageListenerFactory")\npublic class RedisListenerService {\n\n    /**\n     * \u76d1\u542ckey\u8fc7\u671f\u4e8b\u4ef6\n     * @param listener\n     */\n    public void startExpiredListener(MessageListener listener) {\n        List<RedisMessageListenerContainer> redisListenerContainerList = SpringUtils.getBeansOfType(RedisMessageListenerContainer.class);\n        log.info("redisListenerContainerList.size() = " + redisListenerContainerList.size());\n        for (RedisMessageListenerContainer container : redisListenerContainerList) {\n            container.addMessageListener(listener, new PatternTopic("__keyevent@*__:expired"));\n        }\n    }\n\n    public void monitorKeyListener(MessageListener listener, String key) {\n        List<RedisMessageListenerContainer> redisListenerContainerList = SpringUtils.getBeansOfType(RedisMessageListenerContainer.class);\n        for (RedisMessageListenerContainer container : redisListenerContainerList) {\n            container.addMessageListener(listener, new PatternTopic("__keyspace@*__:" + key));\n        }\n    }\n\n    public void removeMonitorKeyListener(MessageListener listener, String key) {\n        PatternTopic patternTopic = new PatternTopic("__keyspace@*__:" + key);\n        List<RedisMessageListenerContainer> redisListenerContainerList = SpringUtils.getBeansOfType(RedisMessageListenerContainer.class);\n        for (RedisMessageListenerContainer container : redisListenerContainerList) {\n            container.removeMessageListener(listener, patternTopic);\n        }\n    }\n}\n\n')),(0,r.kt)("p",null,"Redis key\u8fc7\u671f\u4e8b\u4ef6\u76d1\u542c\u5b9e\u73b0\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import lombok.extern.slf4j.Slf4j;\nimport org.springframework.data.redis.connection.Message;\nimport org.springframework.data.redis.connection.MessageListener;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n/**\n * Redis\u4e8b\u4ef6\u76d1\u542c\u5668\u5b9e\u73b0\u7c7b\n */\n@Slf4j\n@Component("redisKeyExpirationListener")\npublic class RedisKeyExpirationListener implements MessageListener {\n\n    @Resource\n    private RedisService redisService;\n\n    @Override\n    public void onMessage(Message message, byte[] pattern) {\n        //\u83b7\u53d6\u8fc7\u671f\u7684key\n        String expireKey = message.toString();\n         if (expireKey.contains(CacheConstants.ONLINEMONITOR)){\n             String thingName = expireKey.split(CacheConstants.ONLINEMONITOR)[1];\n             redisService.setCacheMapValue(CacheConstants.ONLINELIST,thingName,false);\n         }\n         if (expireKey.contains(CacheConstants.RUNNINGMONITOR)){\n             String thingName = expireKey.split(CacheConstants.RUNNINGMONITOR)[1];\n             redisService.setCacheMapValue(CacheConstants.ONLINELIST,thingName,false);\n         }\n    }\n}\n')),(0,r.kt)("p",null,"Redis\u4e8b\u4ef6\u76d1\u542c\u914d\u7f6e\u7c7b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.MessageListener;\n\nimport javax.annotation.PostConstruct;\n\n/**\n * \u542f\u52a8redis key \u8fc7\u671f\u76d1\u542c\n */\n@Configuration\npublic class StartRedisExpiredListener {\n    private RedisListenerService clusterListenerService;\n\n    private MessageListener messageListener;\n\n    public StartRedisExpiredListener(RedisListenerService clusterListenerService,\n                                     @Qualifier("redisKeyExpirationListener") MessageListener messageListener) {\n        this.clusterListenerService = clusterListenerService;\n        this.messageListener = messageListener;\n    }\n\n    @PostConstruct\n    public void startExpiredListener() {\n        clusterListenerService.startExpiredListener(this.messageListener);\n    }\n}\n')))}u.isMDXComponent=!0}}]);
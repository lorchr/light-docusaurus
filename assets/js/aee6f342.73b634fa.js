"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[4163],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),u=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,g=p["".concat(o,".").concat(d)]||p[d]||c[d]||i;return t?a.createElement(g,l(l({ref:n},m),{},{components:t})):a.createElement(g,l({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=t(7462),r=(t(7294),t(3905));const i={},l=void 0,s={unversionedId:"influxdb/Influxdb-DownSample",id:"influxdb/Influxdb-DownSample",title:"Influxdb-DownSample",description:"\u964d\u91c7\u6837",source:"@site/middleware/influxdb/Influxdb-DownSample.md",sourceDirName:"influxdb",slug:"/influxdb/Influxdb-DownSample",permalink:"/light-docusaurus/middleware/influxdb/Influxdb-DownSample",draft:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/middleware/influxdb/Influxdb-DownSample.md",tags:[],version:"current",lastUpdatedBy:"Hui Liu",lastUpdatedAt:1695107755,formattedLastUpdatedAt:"2023\u5e749\u670819\u65e5",frontMatter:{},sidebar:"middleware",previous:{title:"InfluxDB",permalink:"/light-docusaurus/middleware/category/influxdb"},next:{title:"Influxdb-Export-To-Timescaledb",permalink:"/light-docusaurus/middleware/influxdb/Influxdb-Export-To-Timescaledb"}},o={},u=[{value:"\u964d\u91c7\u6837",id:"\u964d\u91c7\u6837",level:2},{value:"Retention Policy",id:"retention-policy",level:2},{value:"Continuous Query",id:"continuous-query",level:2},{value:"\u51c6\u5907\u5de5\u4f5c",id:"\u51c6\u5907\u5de5\u4f5c",level:2},{value:"\u4f7f\u7528Continuous Query\u964d\u91c7\u6837",id:"\u4f7f\u7528continuous-query\u964d\u91c7\u6837",level:2},{value:"\u6279\u91cf\u521b\u5efa\u964d\u91c7\u6837 RP CQ",id:"\u6279\u91cf\u521b\u5efa\u964d\u91c7\u6837-rp-cq",level:2},{value:"DownSampleParam",id:"downsampleparam",level:3},{value:"DownSampleController",id:"downsamplecontroller",level:3},{value:"DownSampleService",id:"downsampleservice",level:3},{value:"DownSampleServiceImpl",id:"downsampleserviceimpl",level:3},{value:"\u53c2\u6570\u793a\u4f8b",id:"\u53c2\u6570\u793a\u4f8b",level:3}],m={toc:u},p="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u964d\u91c7\u6837"},"\u964d\u91c7\u6837"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u964d\u91c7\u6837 ",(0,r.kt)("a",{parentName:"li",href:"https://docs.influxdata.com/influxdb/v1.8/guides/downsample_and_retain/"},"https://docs.influxdata.com/influxdb/v1.8/guides/downsample_and_retain/")),(0,r.kt)("li",{parentName:"ul"},"RP: ",(0,r.kt)("a",{parentName:"li",href:"https://archive.docs.influxdata.com/influxdb/v1.2/query_language/database_management/#retention-policy-management"},"https://archive.docs.influxdata.com/influxdb/v1.2/query_language/database_management/#retention-policy-management")),(0,r.kt)("li",{parentName:"ul"},"CQ: ",(0,r.kt)("a",{parentName:"li",href:"https://archive.docs.influxdata.com/influxdb/v1.2/query_language/continuous_queries/"},"https://archive.docs.influxdata.com/influxdb/v1.2/query_language/continuous_queries/"))),(0,r.kt)("h2",{id:"retention-policy"},"Retention Policy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.influxdata.com/influxdb/v1.8/query_language/manage-database/#retention-policy-management"},"https://docs.influxdata.com/influxdb/v1.8/query_language/manage-database/#retention-policy-management"))),(0,r.kt)("h2",{id:"continuous-query"},"Continuous Query"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.influxdata.com/influxdb/v1.8/query_language/continuous_queries/"},"https://docs.influxdata.com/influxdb/v1.8/query_language/continuous_queries/")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.influxdata.com/influxdb/v1.8/query_language/functions/"},"https://docs.influxdata.com/influxdb/v1.8/query_language/functions/"))),(0,r.kt)("h2",{id:"\u51c6\u5907\u5de5\u4f5c"},"\u51c6\u5907\u5de5\u4f5c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# \u521b\u5efa\u6570\u636e\u5e93\nCREATE DATABASE seconds_36;\n\n# \u5220\u9664MEASUREMENT\nDROP MEASUREMENT rq_36_test1;\n\n# \u4fee\u6539\u4fdd\u7559\u7b56\u7565\nALTER RETENTION POLICY default ON "yunyi" DURATION 52w REPLICATION 1 DEFAULT;\n')),(0,r.kt)("h2",{id:"\u4f7f\u7528continuous-query\u964d\u91c7\u6837"},"\u4f7f\u7528Continuous Query\u964d\u91c7\u6837"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'# \u521b\u5efa\u4fdd\u7559\u7b56\u7565\nCREATE RETENTION POLICY "rp_36" ON "yunyi" DURATION 2w REPLICATION 1;\n\n# \u521b\u5efa\u8fde\u7eed\u67e5\u8be2 \n# EVERY 36s \u6bcf\u969436s\u6267\u884c\u4e00\u6b21\uff0c\n# FOR   36s \u7edf\u8ba136s\u4e4b\u5185\u7684\u6570\u636e\nCREATE CONTINUOUS QUERY "cq_36_test1" ON "yunyi"\nRESAMPLE EVERY 36s\nBEGIN \n    SELECT mean(*::field) INTO "rp_36"."cq_36_test1" FROM "test1" GROUP BY time(36s),* fill(0);\nEND;\n\n# \u67e5\u8be2\u8fde\u7eed\u67e5\u8be2\nSHOW CONTINUOUS QUERIES;\n\n# \u5220\u9664\u8fde\u7eed\u67e5\u8be2\nDROP CONTINUOUS QUERY "cq_36_test1" ON "yunyi";\n\n# \u67e5\u8be2\u539f\u59cb\u6570\u636e\nSELECT mean(*::field),min(*::field),max(*::field) FROM test1 GROUP BY time(36s),* fill(0);\n\n# \u67e5\u8be2\u91c7\u6837\u7ed3\u679c\nSELECT * FROM "rp_36"."rp_36_test1";\n')),(0,r.kt)("h2",{id:"\u6279\u91cf\u521b\u5efa\u964d\u91c7\u6837-rp-cq"},"\u6279\u91cf\u521b\u5efa\u964d\u91c7\u6837 RP CQ"),(0,r.kt)("h3",{id:"downsampleparam"},"DownSampleParam"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package com.light.cloud.downsample.param;\n\nimport io.swagger.annotations.ApiModelProperty;\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n/**\n * \u521b\u5efaRP\n *\n * @author Hui Liu\n * @date 2023/6/10\n */\n@Data\npublic class DownSampleParam implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @ApiModelProperty("\u6570\u636e\u5e93\u540d\u79f0 pd")\n    private String databaseName;\n\n    @ApiModelProperty("RP\u540d\u79f0 rp_36")\n    private String rpName;\n\n    @ApiModelProperty("RP\u5b58\u50a8\u65f6\u95f4 2w")\n    private String rpDuration;\n\n    @ApiModelProperty("CQ\u540d\u79f0\u524d\u7f00 cq_36")\n    private String cqPrefix;\n\n    @ApiModelProperty("\u6267\u884c\u65f6\u95f4\u95f4\u9694 36s")\n    private String execInterval;\n\n    @ApiModelProperty("GROUP BY\u65f6\u95f4\u95f4\u9694 36s")\n    private String groupInterval;\n\n    @ApiModelProperty("\u6570\u636e\u8868\u540d test2")\n    private List<String> measurements;\n\n    @ApiModelProperty("\u5bf9\u6240\u6709\u8868\u521b\u5efa\u964d\u91c7\u6837 0-\u5426\uff1b1-\u662f")\n    private Integer allMeasurements;\n\n    @ApiModelProperty("\u8986\u76d6\u5df2\u5b58\u5728\u7684CQ 0-\u5426\uff1b1-\u662f")\n    private Integer overrideCQ;\n\n}\n')),(0,r.kt)("h3",{id:"downsamplecontroller"},"DownSampleController"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package com.light.cloud.downsample.controller;\n\nimport com.light.cloud.constant.config.Result;\nimport com.light.cloud.downsample.param.DownSampleParam;\nimport com.light.cloud.downsample.service.DownSampleService;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n\n/**\n * \u964d\u91c7\u6837\u914d\u7f6e\u63a5\u53e3\n *\n * @author Hui Liu\n * @date 2023/6/10\n */\n@RestController\n@RequestMapping("/downsample")\n@Api(tags = "\u964d\u91c7\u6837")\n@Slf4j\npublic class DownSampleController {\n\n    @Resource\n    private DownSampleService downSampleService;\n\n    @ApiOperation("\u521d\u59cb\u5316\u964d\u91c7\u6837\u914d\u7f6e")\n    @PostMapping(value = "initSetting")\n    public Result<Boolean> initSetting(@RequestBody DownSampleParam param) {\n        downSampleService.initSetting(param);\n        return Result.OK(true);\n    }\n\n    @ApiOperation("\u521b\u5efaRP")\n    @PostMapping(value = "rp")\n    public Result<Boolean> createRP(@RequestBody DownSampleParam param) {\n        downSampleService.createRP(param);\n        return Result.OK(true);\n    }\n\n    @ApiOperation("\u521b\u5efaCQ")\n    @PostMapping(value = "cq")\n    public Result<Boolean> createCQ(@RequestBody DownSampleParam param) {\n        downSampleService.createCQ(param);\n        return Result.OK(true);\n    }\n\n    @ApiOperation("\u67e5\u8be2CQ")\n    @GetMapping(value = "queryCQ")\n    public Result<List<String>> queryCQ(String databaseName) {\n        List<String> cqs = downSampleService.queryCQ(databaseName);\n        return Result.OK(cqs);\n    }\n}\n')),(0,r.kt)("h3",{id:"downsampleservice"},"DownSampleService"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"package com.light.cloud.downsample.service;\n\nimport java.util.List;\n\n/**\n * \u964d\u91c7\u6837\u914d\u7f6e\u4e1a\u52a1\u7c7b\n *\n * @author Hui Liu\n * @date 2023/6/10\n */\npublic interface DownSampleService {\n\n    void initSetting(DownSampleParam param);\n\n    void createRP(DownSampleParam param);\n\n    void createCQ(DownSampleParam param);\n\n    List<String> queryCQ(String databaseName);\n}\n\n")),(0,r.kt)("h3",{id:"downsampleserviceimpl"},"DownSampleServiceImpl"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package com.light.cloud.downsample.service;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\n\nimport com.light.cloud.constant.enumerate.YesNoEnum;\nimport com.light.cloud.common.influxDb.TimingDbService;\nimport com.light.cloud.measurement.entity.Measurement;\nimport com.light.cloud.measurement.service.MeasurementService;\n\nimport org.apache.commons.collections4.CollectionUtils;\nimport org.influxdb.dto.QueryResult;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * \u964d\u91c7\u6837\u914d\u7f6e\u4e1a\u52a1\u7c7b\n *\n * @author Hui Liu\n * @date 2023/6/10\n */\n@Service\npublic class DownSampleServiceImpl implements DownSampleService {\n\n    // rpName  database  rpDuration\n    public static final String CREATE_RP = "CREATE RETENTION POLICY \\"%s\\" ON \\"%s\\" DURATION  %s REPLICATION 1";\n    // cqPrefix_measurement  database  execInterval  rpName  cqPrefix_measurement  measurement\n    public static final String CREATE_CQ = "CREATE CONTINUOUS QUERY \\"%s\\" ON \\"%s\\"\\n" +\n            "RESAMPLE EVERY %s\\n" +\n            "BEGIN \\n" +\n            "    SELECT mean(*::field), min(*::field), max(*::field) INTO \\"%s\\".\\"%s\\" FROM \\"%s\\" GROUP BY time(%s)\\n" +\n            "END";\n\n    public static final String QUERY_CQ = "SHOW CONTINUOUS QUERIES";\n    // cqName database\n    public static final String DELETE_CQ = "DROP CONTINUOUS QUERY \\"%s\\" ON \\"%s\\"";\n\n    @Resource\n    private MeasurementService measurementService;\n\n    @Resource\n    private TimingDbService timingDbService;\n\n    @Override\n    public void initSetting(DownSampleParam param) {\n        createRP(param);\n        if (YesNoEnum.YES.eqValue(param.getAllMeasurements())) {\n            LambdaQueryWrapper<Measurement> queryWrapper = Wrappers.lambdaQuery(Measurement.class)\n                    .select(Measurement::getName);\n            List<Measurement> measurements = measurementService.list(queryWrapper);\n            List<String> measurementNames = measurements.stream()\n                    .map(Measurement::getName).collect(Collectors.toList());\n            param.setMeasurements(measurementNames);\n        }\n        createCQ(param);\n    }\n\n    @Override\n    public void createRP(DownSampleParam param) {\n        String command = String.format(CREATE_RP, \n        param.getRpName(), \n        param.getDatabaseName(), \n        param.getRpDuration());\n        timingDbService.query(command);\n    }\n\n    @Override\n    public void createCQ(DownSampleParam param) {\n        QueryResult result = timingDbService.query(QUERY_CQ);\n        List<QueryResult.Result> results = result.getResults();\n        if (CollectionUtils.isEmpty(results) || CollectionUtils.isEmpty(results.get(0).getSeries())) {\n            return;\n        }\n        Boolean overrideCQ = YesNoEnum.YES.eqValue(param.getOverrideCQ());\n        String cqPrefix = param.getCqPrefix();\n        List<String> measurements = param.getMeasurements();\n        List<QueryResult.Series> seriesList = results.get(0).getSeries();\n        for (QueryResult.Series series : seriesList) {\n            if (series.getName().equals(param.getDatabaseName()) && CollectionUtils.isNotEmpty(series.getValues())) {\n                List<String> columns = series.getColumns();\n                List<List<Object>> valuesList = series.getValues();\n                int index = Collections.binarySearch(columns, "name");\n                for (List<Object> values : valuesList) {\n                    String cqName = (String) values.get(index);\n                    if (cqName.startsWith(cqPrefix + "_")) {\n                        // \u5220\u9664\u65e7\u7684 CQ\n                        if (overrideCQ) {\n                            overrideCQ(cqName, param.getDatabaseName());\n                        } else {\n                            // \u4fdd\u7559\u65e7\u7684CQ\n                            measurements.remove(cqName.substring(cqPrefix.length() + 1));\n                        }\n                    }\n                }\n\n            }\n        }\n\n        for (String measurement : measurements) {\n            String command = String.format(CREATE_CQ,\n                    cqPrefix + "_" + measurement,\n                    param.getDatabaseName(), param.getExecInterval(), param.getRpName(),\n                    cqPrefix + "_" + measurement,\n                    measurement, param.getGroupInterval());\n\n            timingDbService.query(command);\n        }\n    }\n\n    private void overrideCQ(String cqName, String databaseName) {\n        String command = String.format(DELETE_CQ, cqName, databaseName);\n        timingDbService.query(command);\n    }\n\n    @Override\n    public List<String> queryCQ(String databaseName) {\n        QueryResult result = timingDbService.query(QUERY_CQ);\n        List<QueryResult.Result> results = result.getResults();\n        if (CollectionUtils.isEmpty(results) || CollectionUtils.isEmpty(results.get(0).getSeries())) {\n            return Collections.emptyList();\n        }\n\n        List<String> resultList = new ArrayList<>();\n        List<QueryResult.Series> seriesList = results.get(0).getSeries();\n        for (QueryResult.Series series : seriesList) {\n            if (series.getName().equals(databaseName) && CollectionUtils.isNotEmpty(series.getValues())) {\n                List<String> columns = series.getColumns();\n                List<List<Object>> valuesList = series.getValues();\n                int index = Collections.binarySearch(columns, "name");\n                for (List<Object> values : valuesList) {\n                    String cqName = (String) values.get(index);\n                    resultList.add(cqName);\n                }\n            }\n        }\n        return resultList;\n    }\n\n}\n\n')),(0,r.kt)("h3",{id:"\u53c2\u6570\u793a\u4f8b"},"\u53c2\u6570\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'// 8\u5c0f\u65f6\u7684\u6570\u636e  \u95f4\u96944s\n{\n  "databaseName": "pd",\n  "rpName": "rp_4",\n  "rpDuration": "1d",\n  "cqPrefix": "cq_4",\n  "execInterval": "4s",\n  "groupInterval": "4s",\n  "measurements": [\n    "test1",\n    "test2"\n  ],\n  "overrideCQ": 0,\n  "allMeasurements": 1\n}\n\n// 24\u5c0f\u65f6\u7684\u6570\u636e  \u95f4\u969412s\n{\n  "databaseName": "pd",\n  "rpName": "rp_12",\n  "rpDuration": "3d",\n  "cqPrefix": "cq_12",\n  "execInterval": "12s",\n  "groupInterval": "12s",\n  "measurements": [\n    "test1",\n    "test2"\n  ],\n  "overrideCQ": 0,\n  "allMeasurements": 1\n}\n\n// 72\u5c0f\u65f6\u7684\u6570\u636e  \u95f4\u969436s\n{\n  "databaseName": "pd",\n  "rpName": "rp_36",\n  "rpDuration": "2w",\n  "cqPrefix": "cq_36",\n  "execInterval": "36s",\n  "groupInterval": "36s",\n  "measurements": [\n    "test1",\n    "test2"\n  ],\n  "overrideCQ": 0,\n  "allMeasurements": 1\n}\n')))}c.isMDXComponent=!0}}]);
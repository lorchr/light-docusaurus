"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[2010],{39641:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>c,frontMatter:()=>p,metadata:()=>o,toc:()=>u});var r=t(85893),a=t(11151);const p={},s=void 0,o={id:"zh-cn/spring-boot/Enhance-Request-And-Response",title:"Enhance-Request-And-Response",description:"\u524d\u8a00",source:"@site/docs/zh-cn/spring-boot/Enhance-Request-And-Response.md",sourceDirName:"zh-cn/spring-boot",slug:"/zh-cn/spring-boot/Enhance-Request-And-Response",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/Enhance-Request-And-Response",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-boot/Enhance-Request-And-Response.md",tags:[],version:"current",frontMatter:{},sidebar:"troch",previous:{title:"Sql-Injection",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/Sql-Injection"},next:{title:"File-Upload-Split-Continue-on-Break",permalink:"/light-docusaurus/docs/zh-cn/spring-boot/file/File-Upload-Split-Continue-on-Break"}},i={},u=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"\u57fa\u4e8e\u8fc7\u6ee4\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",id:"\u57fa\u4e8e\u8fc7\u6ee4\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",level:2},{value:"<code>Filter</code> \u62e6\u622a\u8bf7\u6c42",id:"filter-\u62e6\u622a\u8bf7\u6c42",level:3},{value:"<code>RequestWrapper</code> \u5305\u88c5\u8bf7\u6c42\uff0c\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6 <code>InputStream</code>",id:"requestwrapper-\u5305\u88c5\u8bf7\u6c42\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6-inputstream",level:3},{value:"<code>ResponseWrapper</code> \u5305\u88c5\u54cd\u5e94\uff0c\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6 <code>OutputStream</code>",id:"responsewrapper-\u5305\u88c5\u54cd\u5e94\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6-outputstream",level:3},{value:"<code>EnhanceHandler</code> \u8bf7\u6c42\u54cd\u5e94\u5b9e\u9645\u589e\u5f3a\u5904\u7406\u5668",id:"enhancehandler-\u8bf7\u6c42\u54cd\u5e94\u5b9e\u9645\u589e\u5f3a\u5904\u7406\u5668",level:3},{value:"<code>EnhanceHandlerProxy</code> \u5904\u7406\u5668\u4ee3\u7406\uff0c\u65b9\u4fbf\u6269\u5c55\u5904\u7406\u5668",id:"enhancehandlerproxy-\u5904\u7406\u5668\u4ee3\u7406\u65b9\u4fbf\u6269\u5c55\u5904\u7406\u5668",level:3},{value:"\u57fa\u4e8e\u62e6\u622a\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",id:"\u57fa\u4e8e\u62e6\u622a\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",level:2},{value:"<code>RequestBodyAdvice</code> \u8bf7\u6c42\u4f53\u589e\u5f3a",id:"requestbodyadvice-\u8bf7\u6c42\u4f53\u589e\u5f3a",level:3},{value:"<code>ResponseBodyAdvice</code> \u54cd\u5e94\u4f53\u589e\u5f3a",id:"responsebodyadvice-\u54cd\u5e94\u4f53\u589e\u5f3a",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"\u524d\u8a00",children:"\u524d\u8a00"}),"\n",(0,r.jsx)(n.h2,{id:"\u57fa\u4e8e\u8fc7\u6ee4\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",children:"\u57fa\u4e8e\u8fc7\u6ee4\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a"}),"\n",(0,r.jsxs)(n.h3,{id:"filter-\u62e6\u622a\u8bf7\u6c42",children:[(0,r.jsx)(n.code,{children:"Filter"})," \u62e6\u622a\u8bf7\u6c42"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import com.light.cloud.common.web.enhance.EnhanceHandler;\nimport com.light.cloud.common.web.enhance.EnhanceHandlerProxy;\nimport com.light.cloud.common.web.enhance.RequestWrapper;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.ServletOutputStream;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.util.ContentCachingRequestWrapper;\nimport org.springframework.web.util.ContentCachingResponseWrapper;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * \u8bf7\u6c42\u589e\u5f3a\u8fc7\u6ee4\u5668 <p>\n * <ul>\n *     <li>1. \u62e6\u622a\u8bf7\u6c42\uff0c\u5e76\u5904\u7406</li>\n * </ul>\n */\n@Slf4j\npublic class RequestEnhanceFilter extends OncePerRequestFilter {\n\n    private final EnhanceHandlerProxy enhanceHandlerProxy;\n\n    public RequestEnhanceFilter(List<EnhanceHandler> enhanceHandlers) {\n        this.enhanceHandlerProxy = new EnhanceHandlerProxy(enhanceHandlers);\n    }\n\n    /**\n     * \u5bf9\u8bf7\u6c42\u8fdb\u884c\u589e\u5f3a\n     *\n     * @param request     \u8bf7\u6c42\u5bf9\u8c61\n     * @param response    \u54cd\u5e94\u5bf9\u8c61\n     * @param filterChain \u8fc7\u6ee4\u5668\u94fe\n     * @throws ServletException\n     * @throws IOException\n     */\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain filterChain) throws ServletException, IOException {\n        // \u5305\u88c5\u8bf7\u6c42 \u54cd\u5e94\u5bf9\u8c61\uff0c\u65b9\u4fbf\u83b7\u53d6\u53c2\u6570\n        ContentCachingRequestWrapper requestWrapper = request instanceof ContentCachingRequestWrapper ?\n                (ContentCachingRequestWrapper) request : new ContentCachingRequestWrapper(request);\n        ContentCachingResponseWrapper responseWrapper = response instanceof ContentCachingResponseWrapper ?\n                (ContentCachingResponseWrapper) response : new ContentCachingResponseWrapper(response);\n        // \u518d\u6b21\u5305\u88c5\u8bf7\u6c42\u5bf9\u8c61\n        RequestWrapper wrapperRequest = new RequestWrapper(requestWrapper);\n\n        // \u8bf7\u6c42\u9884\u5904\u7406\n        Map<String, Object> context = new HashMap<>();\n        context.put(EnhanceHandler.CONTEXT_KEY_URL, request.getRequestURL());\n        context.put(EnhanceHandler.CONTEXT_KEY_URI, request.getRequestURI());\n        enhanceHandlerProxy.preHandle(wrapperRequest, context);\n\n        // \u6267\u884c\u76ee\u6807\u65b9\u6cd5\n        filterChain.doFilter(wrapperRequest, responseWrapper);\n\n        // \u5199\u56de\u54cd\u5e94\u503c\n        byte[] contentAsByteArray = responseWrapper.getContentAsByteArray();\n        // Note: \u6b64\u5904\u9700\u8981\u4f7f\u7528\u539f\u59cb\u7684 HttpServletResponse \u5bf9\u8c61\uff0c\u4e0d\u80fd\u4f7f\u7528 Wrapper\u7684\u5bf9\u8c61\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u54cd\u5e94\u503c\u4e22\u5931\n        ServletOutputStream outputStream = response.getOutputStream();\n        outputStream.write(contentAsByteArray);\n        outputStream.flush();\n        outputStream.close();\n\n        // \u8bf7\u6c42\u540e\u5904\u7406\n        enhanceHandlerProxy.postHandle(responseWrapper, context);\n    }\n\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"requestwrapper-\u5305\u88c5\u8bf7\u6c42\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6-inputstream",children:[(0,r.jsx)(n.code,{children:"RequestWrapper"})," \u5305\u88c5\u8bf7\u6c42\uff0c\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6 ",(0,r.jsx)(n.code,{children:"InputStream"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.util.ContentCachingRequestWrapper;\n\nimport jakarta.servlet.ReadListener;\nimport jakarta.servlet.ServletInputStream;\nimport jakarta.servlet.ServletRequest;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletRequestWrapper;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Enumeration;\nimport java.util.Map;\n\n/**\n * \u8bf7\u6c42\u7f13\u5b58\u5bf9\u8c61\uff0c\u65b9\u4fbf\u591a\u6b21\u8bfb\u53d6\u8bf7\u6c42\u4e2d\u7684\u53c2\u6570 <p>\n * <p>\n * 1. {@link ContentCachingRequestWrapper}\u53ef\u4ee5\u76f4\u63a5\u7f13\u5b58\u8bf7\u6c42URL\u4e0a\u7684\u53c2\u6570\uff0c\u5373 {@link ContentCachingRequestWrapper#getParameterMap()}<p>\n * 2. \u7531\u4e8e\u8bf7\u6c42\u4f53Body\u4e2d\u7684\u53c2\u6570\u662f\u6d41\u5f0f\u4f20\u8f93\uff0c{@link ContentCachingRequestWrapper}\u65e0\u6cd5\u76f4\u63a5\u7f13\u5b58\uff0c\u5fc5\u987b\u662f\u5728{@link ContentCachingRequestWrapper#inputStream}\u7684\u5185\u5bb9\u4f7f\u7528\u8fc7\u540e\u624d\u80fd\u7f13\u5b58,\n * \u4e0b\u6b21\u9700\u8981\u518d\u4f7f\u7528body\u53ea\u80fd\u4f7f\u7528\u6b64\u65b9\u6cd5{@link ContentCachingRequestWrapper#getContentAsByteArray()}\u624d\u80fd\u518d\u6b21\u83b7\u53d6body\u4e2d\u7684\u503c\u3002<p>\n * 3. \u5728\u4e00\u4e9b\u573a\u666f\u4e0b\uff08\u8fc7\u6ee4\u5668\uff0c\u62e6\u622a\u5668\uff09\uff0c\u9700\u8981\u5728\u8bf7\u6c42\u4e4b\u524d\u83b7\u53d6\u8bf7\u6c42\u4f53\u4e2d\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u9700\u8981\u5355\u72ec\u4f7f\u7528\u6b64\u7c7b\u6765\u8fdb\u884c\u89e3\u6790\u7f13\u5b58\u3002<p>\n *\n * @see {@link ContentCachingRequestWrapper}\n */\n@Slf4j\npublic class RequestWrapper extends HttpServletRequestWrapper {\n\n    private final String body;\n\n    public RequestWrapper(HttpServletRequest request) {\n        super(request);\n        this.body = parseStringBody(request);\n    }\n\n    // region implements ServletRequest\n    @Override\n    public ServletInputStream getInputStream() throws IOException {\n        final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_8));\n        ServletInputStream servletInputStream = new ServletInputStream() {\n            @Override\n            public int read() throws IOException {\n                return byteArrayInputStream.read();\n            }\n\n            @Override\n            public boolean isFinished() {\n                return false;\n            }\n\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setReadListener(ReadListener listener) {\n\n            }\n        };\n        return servletInputStream;\n    }\n\n    @Override\n    public BufferedReader getReader() throws IOException {\n        return new BufferedReader(new InputStreamReader(this.getInputStream()));\n    }\n\n    @Override\n    public String getParameter(String name) {\n        return super.getParameter(name);\n    }\n\n    @Override\n    public Map<String, String[]> getParameterMap() {\n        return super.getParameterMap();\n    }\n\n    @Override\n    public Enumeration<String> getParameterNames() {\n        return super.getParameterNames();\n    }\n\n    @Override\n    public String[] getParameterValues(String name) {\n        return super.getParameterValues(name);\n    }\n\n    // endregion\n\n    public String getBody() {\n        return this.body;\n    }\n\n    public byte[] getContentAsByteArray() {\n        return this.body.getBytes(StandardCharsets.UTF_8);\n    }\n\n    /**\n     * \u89e3\u6790\u8bf7\u6c42\u7684body\n     */\n    private String parseStringBody(ServletRequest request) {\n        if (!shouldParse(request)) {\n            return null;\n        }\n        try (\n                InputStream inputStream = request.getInputStream();\n                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n        ) {\n            StringBuilder builder = new StringBuilder();\n            char[] buffer = new char[512];\n            int len = 0;\n            while ((len = bufferedReader.read(buffer)) > 0) {\n                builder.append(buffer, 0, len);\n            }\n            return builder.toString();\n        } catch (IOException e) {\n            log.error("\u8bfb\u53d6\u8bf7\u6c42\u53c2\u6570\u5931\u8d25!", e);\n        }\n        return null;\n    }\n\n    /**\n     * \u89e3\u6790\u8bf7\u6c42\u7684body\n     */\n    private byte[] parseBytesBody(ServletRequest request) {\n        if (!shouldParse(request)) {\n            return null;\n        }\n        try (\n                InputStream inputStream = request.getInputStream();\n                BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);\n                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        ) {\n            byte[] buffer = new byte[1024];\n            int len = 0;\n            while ((len = bufferedInputStream.read(buffer)) > 0) {\n                byteArrayOutputStream.write(buffer, 0, len);\n            }\n            return byteArrayOutputStream.toByteArray();\n        } catch (IOException e) {\n            log.error("\u8bfb\u53d6\u8bf7\u6c42\u53c2\u6570\u5931\u8d25!", e);\n        }\n        return null;\n    }\n\n    private boolean shouldParse(ServletRequest request) {\n        String contentType = request.getContentType();\n        if (StringUtils.isNotBlank(contentType)) {\n            try {\n                MediaType mediaType = MediaType.parseMediaType(contentType);\n                return MediaType.APPLICATION_JSON.includes(mediaType);\n            } catch (IllegalArgumentException ex) {\n            }\n        }\n        return false;\n    }\n\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"responsewrapper-\u5305\u88c5\u54cd\u5e94\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6-outputstream",children:[(0,r.jsx)(n.code,{children:"ResponseWrapper"})," \u5305\u88c5\u54cd\u5e94\uff0c\u53ef\u4ee5\u591a\u6b21\u8bfb\u53d6 ",(0,r.jsx)(n.code,{children:"OutputStream"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import lombok.extern.slf4j.Slf4j;\n\nimport jakarta.servlet.ServletOutputStream;\nimport jakarta.servlet.WriteListener;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpServletResponseWrapper;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.nio.charset.Charset;\nimport java.util.Objects;\n\n@Slf4j\npublic class ResponseWrapper extends HttpServletResponseWrapper {\n    private ByteArrayOutputStream byteArrayOutputStream;\n\n    private ServletOutputStream servletOutputStream;\n\n    private PrintWriter printWriter;\n\n    public ResponseWrapper(HttpServletResponse response) {\n        super(response);\n        this.byteArrayOutputStream = new ByteArrayOutputStream();\n        this.servletOutputStream = newServletOutputStream(byteArrayOutputStream);\n        this.printWriter = newPrintWriter(byteArrayOutputStream);\n    }\n\n    @Override\n    public ServletOutputStream getOutputStream() throws IOException {\n        return servletOutputStream;\n    }\n\n    @Override\n    public PrintWriter getWriter() throws IOException {\n        return printWriter;\n    }\n\n    @Override\n    public void flushBuffer() throws IOException {\n        if (Objects.isNull(servletOutputStream)) {\n            try {\n                servletOutputStream.flush();\n            }catch (Exception e) {\n                log.error("ResponseWrapper flushBuffer error", e);\n            }\n        }\n        if (Objects.isNull(printWriter)) {\n            printWriter.flush();\n        }\n    }\n\n    @Override\n    public void reset() {\n        byteArrayOutputStream.reset();\n    }\n\n    public String getResponseData(Charset charset) throws IOException {\n        return new String(getContent(), charset);\n    }\n\n    public byte[] getContent() throws IOException {\n        flushBuffer();\n        return byteArrayOutputStream.toByteArray();\n    }\n\n    public ServletOutputStream newServletOutputStream(ByteArrayOutputStream byteArrayOutputStream) {\n        return new ServletOutputStream() {\n            @Override\n            public boolean isReady() {\n                return false;\n            }\n\n            @Override\n            public void setWriteListener(WriteListener listener) {\n\n            }\n\n            @Override\n            public void write(int b) throws IOException {\n                byteArrayOutputStream.write(b);\n            }\n        };\n    }\n\n    public PrintWriter newPrintWriter(ByteArrayOutputStream byteArrayOutputStream) {\n        OutputStream outputStream = new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                byteArrayOutputStream.write(b);\n            }\n        };\n        return new PrintWriter(new OutputStreamWriter(outputStream));\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"enhancehandler-\u8bf7\u6c42\u54cd\u5e94\u5b9e\u9645\u589e\u5f3a\u5904\u7406\u5668",children:[(0,r.jsx)(n.code,{children:"EnhanceHandler"})," \u8bf7\u6c42\u54cd\u5e94\u5b9e\u9645\u589e\u5f3a\u5904\u7406\u5668"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.core.Ordered;\n\nimport java.util.Map;\n\npublic interface EnhanceHandler extends Ordered {\n\n    /**\n     * \u8bf7\u6c42\u7684URL\n     */\n    String CONTEXT_KEY_URL = "url";\n    \n    /**\n     * \u63a5\u53e3\u7684URI\n     */\n    String CONTEXT_KEY_URI = "uri";\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5339\u914d\u5f53\u524d\u7684\u8bf7\u6c42\uff0c\u5bf9\u5176\u505a\u589e\u5f3a\n     *\n     * @param request http\u8bf7\u6c42\u5bf9\u8c61\n     * @return\n     */\n    boolean matches(HttpServletRequest request);\n\n    /**\n     * \u9884\u5904\u7406\u65b9\u6cd5\n     *\n     * @param request http\u8bf7\u6c42\u5bf9\u8c61\n     * @param context \u5904\u7406\u5668\u4e0a\u4e0b\u6587\n     */\n    void preHandle(HttpServletRequest request, Map<String, Object> context);\n\n    /**\n     * \u540e\u5904\u7406\u65b9\u6cd5\n     *\n     * @param response http\u54cd\u5e94\u5bf9\u8c61\n     * @param context  \u5904\u7406\u5668\u4e0a\u4e0b\u6587\n     */\n    void postHandle(HttpServletResponse response, Map<String, Object> context);\n\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import com.google.common.collect.Lists;\nimport com.light.cloud.common.core.tool.JsonTool;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.AntPathMatcher;\nimport org.springframework.util.PathMatcher;\nimport org.springframework.web.util.ContentCachingResponseWrapper;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Map;\n\n@Slf4j\npublic class DemoEnhanceHandler implements EnhanceHandler {\n\n    private final Integer ORDER = 100;\n\n    private final PathMatcher pathMatcher = new AntPathMatcher();\n\n    public final List<String> matchUris = Lists.newArrayList("/demo/**");\n\n    @Override\n    public boolean matches(HttpServletRequest request) {\n        String url = request.getServletPath();\n        String pathInfo = request.getPathInfo();\n        if (pathInfo != null) {\n            url = StringUtils.isNotEmpty(url) ? url + pathInfo : pathInfo;\n        }\n        for (String uri : matchUris) {\n            if (pathMatcher.match(uri, url)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Override\n    public void preHandle(HttpServletRequest request, Map<String, Object> context) {\n        RequestWrapper requestWrapper = (RequestWrapper) request;\n        Map<String, String[]> parameterMap = requestWrapper.getParameterMap();\n        String body = requestWrapper.getBody();\n        log.info(">>>>>>>>>> Pre handler. Parse request: {param: {}, body: {}}",\n                JsonTool.beanToJson(parameterMap), body);\n    }\n\n    @Override\n    public void postHandle(HttpServletResponse response, Map<String, Object> context) {\n        ContentCachingResponseWrapper responseWrapper = (ContentCachingResponseWrapper) response;\n        byte[] contentAsByteArray = responseWrapper.getContentAsByteArray();\n        String body = new String(contentAsByteArray, StandardCharsets.UTF_8);\n        log.info("<<<<<<<<<< Post handler. Parse response: {body: {}}", body);\n    }\n\n    @Override\n    public int getOrder() {\n        return ORDER;\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"enhancehandlerproxy-\u5904\u7406\u5668\u4ee3\u7406\u65b9\u4fbf\u6269\u5c55\u5904\u7406\u5668",children:[(0,r.jsx)(n.code,{children:"EnhanceHandlerProxy"})," \u5904\u7406\u5668\u4ee3\u7406\uff0c\u65b9\u4fbf\u6269\u5c55\u5904\u7406\u5668"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class EnhanceHandlerProxy {\n\n    private List<EnhanceHandler> enhanceHandlers;\n\n    public EnhanceHandlerProxy(List<EnhanceHandler> enhanceHandlers) {\n        this.enhanceHandlers = enhanceHandlers;\n    }\n\n    /**\n     * \u9884\u5904\u7406\u6d41\u7a0b\uff0c\u6b63\u5e8f\u904d\u5386\u5404\u5904\u7406\u5668\n     *\n     * @param request http\u8bf7\u6c42\u5bf9\u8c61\n     * @param context \u5904\u7406\u5668\u4e0a\u4e0b\u6587\n     */\n    public void preHandle(HttpServletRequest request, Map<String, Object> context) {\n        for (int i = 0; i < enhanceHandlers.size(); i++) {\n            EnhanceHandler handler = enhanceHandlers.get(i);\n            if (handler.matches(request)) {\n                // \u8bb0\u5f55\u662f\u5426\u5df2\u7ecf\u5904\u7406\u8fc7\n                context.put(this.getClass().getName(), Boolean.TRUE);\n                handler.preHandle(request, context);\n            }\n        }\n    }\n\n    /**\n     * \u540e\u5904\u7406\u6d41\u7a0b\uff0c\u5012\u5e8f\u904d\u5386\u5404\u5904\u7406\u5668\n     *\n     * @param response http\u54cd\u5e94\u5bf9\u8c61\n     * @param context  \u5904\u7406\u5668\u4e0a\u4e0b\u6587\n     */\n    public void postHandle(HttpServletResponse response, Map<String, Object> context) {\n        for (int i = enhanceHandlers.size() - 1; i >= 0; i--) {\n            EnhanceHandler handler = enhanceHandlers.get(i);\n            // \u6267\u884c\u4e86\u9884\u5904\u7406\u7684\u5fc5\u987b\u6267\u884c\u540e\u5904\u7406\n            if (Boolean.TRUE.equals(context.getOrDefault(handler.getClass().getName(), Boolean.FALSE))) {\n                handler.postHandle(response, context);\n            }\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u57fa\u4e8e\u62e6\u622a\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a",children:"\u57fa\u4e8e\u62e6\u622a\u5668\u5b9e\u73b0\u8bf7\u6c42\u54cd\u5e94\u7684\u589e\u5f3a"}),"\n",(0,r.jsxs)(n.h3,{id:"requestbodyadvice-\u8bf7\u6c42\u4f53\u589e\u5f3a",children:[(0,r.jsx)(n.code,{children:"RequestBodyAdvice"})," \u8bf7\u6c42\u4f53\u589e\u5f3a"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import org.springframework.core.MethodParameter;\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter;\n\nimport java.io.IOException;\nimport java.lang.reflect.Type;\n\n/**\n * \u8bf7\u6c42\u524d\u5904\u7406\u5668\n * <p>\n * \u5728\u6267\u884c\u76ee\u6807\u65b9\u6cd5\u4e4b\u524d\u6267\u884c\uff0c\u4f8b\u5982\uff1a\u53c2\u6570\u89e3\u5bc6\uff0c\u65b9\u6cd5\u589e\u5f3a\u7b49\n * \n * @see org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain\n * @see org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice\n * @see org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter\n * @see org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice\n */\npublic class CustomRequestBodyAdvice extends RequestBodyAdviceAdapter {\n    @Override\n    public boolean supports(MethodParameter methodParameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {\n        return false;\n    }\n\n    @Override\n    public HttpInputMessage beforeBodyRead(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) throws IOException {\n        return super.beforeBodyRead(inputMessage, parameter, targetType, converterType);\n    }\n\n    @Override\n    public Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {\n        return super.afterBodyRead(body, inputMessage, parameter, targetType, converterType);\n    }\n\n    @Override\n    public Object handleEmptyBody(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class<? extends HttpMessageConverter<?>> converterType) {\n        return super.handleEmptyBody(body, inputMessage, parameter, targetType, converterType);\n    }\n\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"responsebodyadvice-\u54cd\u5e94\u4f53\u589e\u5f3a",children:[(0,r.jsx)(n.code,{children:"ResponseBodyAdvice"})," \u54cd\u5e94\u4f53\u589e\u5f3a"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import org.springframework.core.MethodParameter;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJacksonValue;\nimport org.springframework.http.server.ServerHttpRequest;\nimport org.springframework.http.server.ServerHttpResponse;\nimport org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice;\n\n/**\n * \u8bf7\u6c42\u540e\u5904\u7406\u5668\n * <p>\n * \u5728\u6267\u884c\u76ee\u6807\u65b9\u6cd5\u4e4b\u540e\u6267\u884c\uff0c\u4f8b\u5982\uff1a\u54cd\u5e94\u52a0\u5bc6\uff0c\u65b9\u6cd5\u589e\u5f3a\u7b49\n * \n * @see org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain\n * @see org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice\n * @see org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice\n * @see org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice\n */\npublic class CustomResponseBodyAdvice extends AbstractMappingJacksonResponseBodyAdvice {\n\n    @Override\n    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n        return super.supports(returnType, converterType);\n    }\n\n    @Override\n    protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer, MediaType contentType, MethodParameter returnType, ServerHttpRequest request, ServerHttpResponse response) {\n\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,r.jsxs)(n.p,{children:["\u4ece ",(0,r.jsx)(n.code,{children:"HttpServletRequest"})," \u7684\u751f\u547d\u5468\u671f\u53ef\u77e5\uff0c\u8bf7\u6c42\u4f1a\u5148\u7ecf\u8fc7\u4e00\u5c42\u5c42\u7684\u8fc7\u6ee4\u5668 ",(0,r.jsx)(n.code,{children:"Filter"}),"\uff0c\u518d\u5230\u8fbe ",(0,r.jsx)(n.code,{children:"Servlet"}),"\uff0c\u5728Spring MVC\u4e2d\u5373 ",(0,r.jsx)(n.code,{children:"DispatcherServlet"}),"\uff0c\u7136\u540e\u5230\u8fbe\u4e00\u7cfb\u5217\u7684\u62e6\u622a\u5668 ",(0,r.jsx)(n.code,{children:"Interceptor"})," ",(0,r.jsx)(n.code,{children:"Resolver"}),"\u6765\u5c31\u884c\u6821\u9a8c\u53ca\u53c2\u6570\u7684\u8f6c\u6362\u7b49\uff0c\u7136\u540e\u5230\u8fbe\u771f\u6b63\u7684 ",(0,r.jsx)(n.code,{children:"Handler"}),"\u3002"]}),"\n",(0,r.jsxs)(n.p,{children:["\u6240\u4ee5",(0,r.jsx)(n.code,{children:"Filter"}),"\u7684\u5b9e\u73b0\u66f4\u52a0\u9ad8\u6548\uff0c\u7279\u522b\u662f\u5728\u4e00\u4e9b\u6709\u660e\u786e\u7ec8\u7ed3\u6761\u4ef6\u7684\u573a\u666f\u4e0b\uff0c\u5982\u6743\u9650\u6821\u9a8c\uff0c\u63a5\u53e3\u5206\u6d41\uff1b\u62e6\u622a\u5668\u7684\u5b9e\u73b0\u5728\u53c2\u6570\u8bf7\u6c42\u5230\u8fbe",(0,r.jsx)(n.code,{children:"Handler"}),"\u7684\u672b\u6bb5\uff0c\u9002\u5408\u505a\u4e00\u4e9b\u901a\u7528\u7684\u5904\u7406\u573a\u666f\uff0c\u5982\u65e5\u5fd7\u8bb0\u5f55\uff0c\u52a0\u89e3\u5bc6\u7b49\u3002"]})]})}function c(e={}){const{wrapper:n}={...(0,a.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{ah:()=>p});var r=t(67294);const a=r.createContext({});function p(e){const n=r.useContext(a);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);
"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[9901],{19758:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(85893),i=n(11151);const o={},a=void 0,s={id:"zh-cn/spring-security/oauth2/Add-Customeized-Grant-Type",title:"Add-Customeized-Grant-Type",description:"- Spring Authorization Server \u81ea\u5b9a\u4e49\u6388\u6743\u6a21\u5f0f",source:"@site/docs/zh-cn/spring-security/oauth2/2-Add-Customeized-Grant-Type.md",sourceDirName:"zh-cn/spring-security/oauth2",slug:"/zh-cn/spring-security/oauth2/Add-Customeized-Grant-Type",permalink:"/light-docusaurus/docs/zh-cn/spring-security/oauth2/Add-Customeized-Grant-Type",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-security/oauth2/2-Add-Customeized-Grant-Type.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"troch",previous:{title:"Spring-Authorization-Server-Usage",permalink:"/light-docusaurus/docs/zh-cn/spring-security/oauth2/Spring-Authorization-Server-Usage"},next:{title:"LDAP-Login",permalink:"/light-docusaurus/docs/zh-cn/spring-security/oauth2/LDAP-Login"}},u={},c=[{value:"1. \u80cc\u666f",id:"1-\u80cc\u666f",level:2},{value:"2. \u7248\u672c\u8bf4\u660e",id:"2-\u7248\u672c\u8bf4\u660e",level:2},{value:"3. \u5b9e\u73b0",id:"3-\u5b9e\u73b0",level:2},{value:"1. \u81ea\u5b9a\u4e49AuthenticationToken",id:"1-\u81ea\u5b9a\u4e49authenticationtoken",level:3},{value:"2. \u81ea\u5b9a\u4e49AuthenticationConverter",id:"2-\u81ea\u5b9a\u4e49authenticationconverter",level:3},{value:"3. \u81ea\u5b9a\u4e49AuthenticationProvider",id:"3-\u81ea\u5b9a\u4e49authenticationprovider",level:3},{value:"4. \u81ea\u5b9a\u4e49AuthenticationProviderBuilder",id:"4-\u81ea\u5b9a\u4e49authenticationproviderbuilder",level:3},{value:"5. \u6dfb\u52a0\u5bc6\u7801\u6a21\u5f0f\uff08password\uff09\u914d\u7f6e",id:"5-\u6dfb\u52a0\u5bc6\u7801\u6a21\u5f0fpassword\u914d\u7f6e",level:3},{value:"4. \u6d4b\u8bd5",id:"4-\u6d4b\u8bd5",level:2},{value:"1. \u83b7\u53d6token",id:"1-\u83b7\u53d6token",level:3},{value:"2. \u4f9d\u6b21\u6d4b\u8bd5\u5176\u4ed6\u7aef\u70b9\uff1a\u4f7f\u7528token\u8bbf\u95ee\u8d44\u6e90\u3001\u4f7f\u7528refresh_token\u5237\u65b0token\u7b49\u5747\u6b63\u5e38",id:"2-\u4f9d\u6b21\u6d4b\u8bd5\u5176\u4ed6\u7aef\u70b9\u4f7f\u7528token\u8bbf\u95ee\u8d44\u6e90\u4f7f\u7528refresh_token\u5237\u65b0token\u7b49\u5747\u6b63\u5e38",level:3},{value:"5. \u5c0f\u7ed3",id:"5-\u5c0f\u7ed3",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://blog.csdn.net/moresi/article/details/128927500",children:"Spring Authorization Server \u81ea\u5b9a\u4e49\u6388\u6743\u6a21\u5f0f"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://docs.spring.io/spring-authorization-server/docs/1.1.x/reference/html/guides/how-to-ext-grant-type.html",children:"Implement an Extension Authorization Grant Type"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["\u5728\u672c\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u81ea\u5b9a\u4e49 ",(0,r.jsx)(t.code,{children:"Spring Authorization Server"})," \u6388\u6743\u6a21\u5f0f - \u5bc6\u7801\u6a21\u5f0f\uff08password\uff09"]}),"\n",(0,r.jsx)(t.h2,{id:"1-\u80cc\u666f",children:"1. \u80cc\u666f"}),"\n",(0,r.jsxs)(t.p,{children:["Spring Security\u56e2\u961f\u505c\u6b62\u7ef4\u62a4 ",(0,r.jsx)(t.a,{href:"https://spring.io/projects/spring-security-oauth",children:"Spring SecurityOAuth"}),"\uff0c\n\u63a8\u8350\u4f7f\u7528 ",(0,r.jsx)(t.a,{href:"https://spring.io/projects/spring-authorization-server",children:"Spring Authorization Server"})," \u3002\n\u7136\u800c\u57fa\u4e8e",(0,r.jsx)(t.code,{children:"OAuth 2.1"}),"\u7684 ",(0,r.jsx)(t.code,{children:"Spring Authorization Server"})," \u5c06\u4e0d\u518d\u5bf9\u4ee5\u4e0b\u4e24\u79cd\u6388\u6743\u6a21\u5f0f\u63d0\u4f9b\u652f\u6301\uff1a"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u5bc6\u7801\u6a21\u5f0f\uff08password\uff09"}),"\n",(0,r.jsx)(t.li,{children:"\u7b80\u5316\u6a21\u5f0f\uff08implicit\uff09"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u5bf9\u4e8e\u5df2\u7ecf\u4f9d\u8d56\u4e86\u8fd9\u4e24\u79cd\u6388\u6743\u6a21\u5f0f\u7684\u9879\u76ee\uff0c\u51fa\u4e8e\u8fd9\u6837\u90a3\u6837\u7684\u5404\u79cd\u539f\u56e0\uff0c\u6765\u4e0d\u53ca\u6216\u65e0\u6cd5\u8fc1\u79fb\u81f3\u65b0\u7684\u6388\u6743\u6a21\u5f0f\uff0c\u8be5\u5982\u4f55\u5904\u7406\uff1f"}),"\n",(0,r.jsx)(t.p,{children:"\u6216\u8bb8\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u81ea\u884c\u5b9e\u73b0\u6388\u6743\u6a21\u5f0f\uff0c\u6bd4\u5982\uff1a\u5bc6\u7801\u6a21\u5f0f\uff08password\uff09"}),"\n",(0,r.jsx)(t.h2,{id:"2-\u7248\u672c\u8bf4\u660e",children:"2. \u7248\u672c\u8bf4\u660e"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Spring Boot\uff1a3.1.0"}),"\n",(0,r.jsx)(t.li,{children:"Spring Authorization Server\uff1a1.1.0"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"3-\u5b9e\u73b0",children:"3. \u5b9e\u73b0"}),"\n",(0,r.jsxs)(t.p,{children:["\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u9700\u8981\u7740\u91cd\u8bf4\u660e\u4e00\u70b9\uff1a\u7531\u4e8e\u81ea\u5b9a\u4e49\u6388\u6743\u6a21\u5f0f\u6240\u4f9d\u8d56\u7684\u67d0\u4e9b ",(0,r.jsx)(t.code,{children:"Spring Authorization Server"})," \u7c7b\u53ea\u80fd\u5728\u540c ",(0,r.jsx)(t.code,{children:"package"}),"\n\u4e0b\u8bbf\u95ee\uff0c\u8bf7\u5927\u5bb6\u5728\u81ea\u5df1\u9879\u76ee\u7684 ",(0,r.jsx)(t.code,{children:"src"})," \u76ee\u5f55\u4e0b\u5148\u521b\u5efa \u540c\u540d\u7684 ",(0,r.jsx)(t.code,{children:"package"})," \u8def\u5f84\uff0c\u62f7\u8d1d\n\u4ee3\u7801\u65f6\u4e5f \u8bf7\u52ff\u6539\u53d8 ",(0,r.jsx)(t.code,{children:"package"})," \u3002"]}),"\n",(0,r.jsx)(t.h3,{id:"1-\u81ea\u5b9a\u4e49authenticationtoken",children:"1. \u81ea\u5b9a\u4e49AuthenticationToken"}),"\n",(0,r.jsx)(t.p,{children:"AuthenticationToken \u7528\u4e8e\u5b58\u653e \u5bc6\u7801\u6a21\u5f0f\uff08password\uff09 \u6240\u9700\u7684\u5404\u79cd\u4fe1\u606f\uff0c\u5305\u62ec username\u3001password\u3001scopes \u7b49\u3002"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package org.springframework.security.oauth2.server.authorization.authentication;\n\nimport org.springframework.lang.Nullable;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.util.Assert;\n\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * An {@link Authentication} implementation used for the OAuth 2.0\n * Resource Owner Password Credentials Grant.\n *\n * @see OAuth2AuthorizationGrantAuthenticationToken\n * @see OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider\n */\npublic class OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\n    private final String username;\n\n    private final String password;\n\n    private final Set<String> scopes;\n\n    /**\n     * Constructs an {@code OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken} using\n     * the provided parameters.\n     *\n     * @param username             the username\n     * @param password             the password\n     * @param clientPrincipal      the authenticated client principal\n     * @param scopes               the requested scope(s)\n     * @param additionalParameters the additional parameters\n     */\n    public OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken(String username, String password, Authentication clientPrincipal,\n                                                                     @Nullable Set<String> scopes, @Nullable Map<String, Object> additionalParameters) {\n        super(AuthorizationGrantType.PASSWORD, clientPrincipal, additionalParameters);\n        Assert.hasText(username, "username cannot be empty");\n        Assert.hasText(username, "password cannot be empty");\n        this.username = username;\n        this.password = password;\n        this.scopes = Collections.unmodifiableSet(\n                scopes != null ? new HashSet<>(scopes) : Collections.emptySet());\n    }\n\n    /**\n     * Returns the username.\n     *\n     * @return the username\n     */\n    public String getUsername() {\n        return this.username;\n    }\n\n    /**\n     * Returns the password.\n     *\n     * @return the password\n     */\n    @Nullable\n    public String getPassword() {\n        return this.password;\n    }\n\n    /**\n     * Returns the requested scope(s).\n     *\n     * @return the requested scope(s), or an empty {@code Set} if not available\n     */\n    public Set<String> getScopes() {\n        return this.scopes;\n    }\n\n}\n\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-\u81ea\u5b9a\u4e49authenticationconverter",children:"2. \u81ea\u5b9a\u4e49AuthenticationConverter"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"AuthenticationConverter"})," \u7528\u4e8e\u4ece ",(0,r.jsx)(t.code,{children:"HttpServletRequest"})," \u4e2d\u63d0\u53d6 \u5bc6\u7801\u6a21\u5f0f\uff08password\uff09\n\u6240\u9700\u7684\u5404\u79cd\u4fe1\u606f\uff0c\u5305\u62ecusername\u3001password\u3001scopes\u7b49\u3002\u5e76\u8f6c\u6362\u4e3a\u6b65\u9aa41\u4e2d\u7684 ",(0,r.jsx)(t.code,{children:"AuthenticationToken"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package org.springframework.security.oauth2.server.authorization.web.authentication;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport org.springframework.lang.Nullable;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken;\nimport org.springframework.security.oauth2.server.authorization.web.OAuth2TokenEndpointFilter;\nimport org.springframework.security.web.authentication.AuthenticationConverter;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * Attempts to extract an Access Token Request from {@link HttpServletRequest} for the\n * OAuth 2.0 Resource Owner Password Credentials Grant and then converts it to an\n * {@link OAuth2ResourceOwnerPasswordCredentialsAuthenticationConverter}\n * used for authenticating the authorization grant.\n *\n * @see AuthenticationConverter\n * @see OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken\n * @see OAuth2TokenEndpointFilter\n */\npublic final class OAuth2ResourceOwnerPasswordCredentialsAuthenticationConverter implements AuthenticationConverter {\n\n    @Nullable\n    @Override\n    public Authentication convert(HttpServletRequest request) {\n        // grant_type (REQUIRED)\n        String grantType = request.getParameter(OAuth2ParameterNames.GRANT_TYPE);\n        if (!AuthorizationGrantType.PASSWORD.getValue().equals(grantType)) {\n            return null;\n        }\n        Authentication clientPrincipal = SecurityContextHolder.getContext().getAuthentication();\n        MultiValueMap<String, String> parameters = OAuth2EndpointUtils.getParameters(request);\n        // username (REQUIRED)\n        String username = parameters.getFirst(OAuth2ParameterNames.USERNAME);\n        if (!StringUtils.hasText(username) ||\n                parameters.get(OAuth2ParameterNames.USERNAME).size() != 1) {\n            OAuth2EndpointUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    OAuth2ParameterNames.USERNAME,\n                    OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n        // password (REQUIRED)\n        String password = parameters.getFirst(OAuth2ParameterNames.PASSWORD);\n        if (StringUtils.hasText(password) &&\n                parameters.get(OAuth2ParameterNames.PASSWORD).size() != 1) {\n            OAuth2EndpointUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    OAuth2ParameterNames.PASSWORD,\n                    OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n        // scope (OPTIONAL)\n        String scope = parameters.getFirst(OAuth2ParameterNames.SCOPE);\n        if (StringUtils.hasText(scope) &&\n                parameters.get(OAuth2ParameterNames.SCOPE).size() != 1) {\n            OAuth2EndpointUtils.throwError(\n                    OAuth2ErrorCodes.INVALID_REQUEST,\n                    OAuth2ParameterNames.SCOPE,\n                    OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);\n        }\n        Set<String> requestedScopes = null;\n        if (StringUtils.hasText(scope)) {\n            requestedScopes = new HashSet<>(\n                    Arrays.asList(StringUtils.delimitedListToStringArray(scope, " ")));\n        }\n        Map<String, Object> additionalParameters = new HashMap<>();\n        parameters.forEach((key, value) -> {\n            if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) &&\n                    !key.equals(OAuth2ParameterNames.USERNAME) &&\n                    !key.equals(OAuth2ParameterNames.PASSWORD) &&\n                    !key.equals(OAuth2ParameterNames.SCOPE)) {\n                additionalParameters.put(key, value.get(0));\n            }\n        });\n        return new OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken(\n                username, password, clientPrincipal, requestedScopes, additionalParameters);\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"3-\u81ea\u5b9a\u4e49authenticationprovider",children:"3. \u81ea\u5b9a\u4e49AuthenticationProvider"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"AuthenticationProvider"})," \u662f\u81ea\u5b9a\u4e49 \u5bc6\u7801\u6a21\u5f0f\uff08password\uff09 \u7684\u6838\u5fc3\u903b\u8f91\uff0c\u5176\u529f\u80fd\u4e3b\u8981\u5982\u4e0b\uff1a"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"\u68c0\u9a8c \u5bc6\u7801\u6a21\u5f0f\uff08password\uff09 \u6240\u9700\u4fe1\u606f\u7684\u6b63\u786e\u6027\uff0c\u5305\u62ec username\u3001password\u3001scopes \u7b49"}),"\n",(0,r.jsx)(t.li,{children:"\u68c0\u9a8c\u901a\u8fc7\u540e\uff0c\u751f\u6210\u5e76\u8fd4\u56de Access token\u3001Refresh token\u3001ID token \u7b49\u4fe1\u606f"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package org.springframework.security.oauth2.server.authorization.authentication;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.ClaimAccessor;\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\nimport org.springframework.security.oauth2.core.OAuth2AccessToken;\nimport org.springframework.security.oauth2.core.OAuth2AuthenticationException;\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2ErrorCodes;\nimport org.springframework.security.oauth2.core.OAuth2RefreshToken;\nimport org.springframework.security.oauth2.core.OAuth2Token;\nimport org.springframework.security.oauth2.core.oidc.OidcIdToken;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.security.oauth2.server.authorization.OAuth2Authorization;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.context.AuthorizationServerContextHolder;\nimport org.springframework.security.oauth2.server.authorization.token.DefaultOAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenContext;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\nimport org.springframework.util.Assert;\nimport org.springframework.util.CollectionUtils;\n\nimport java.security.Principal;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static org.springframework.security.oauth2.server.authorization.authentication.OAuth2AuthenticationProviderUtils.getAuthenticatedClientElseThrowInvalidClient;\n\n/**\n * An {@link AuthenticationProvider} implementation for the OAuth 2.0\n * Resource Owner Password Credentials Grant.\n *\n * @see OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken\n * @see OAuth2AccessTokenAuthenticationToken\n * @see OAuth2AuthorizationService\n * @see OAuth2TokenGenerator\n * @see <a target="_blank" href="https://datatracker.ietf.org/doc/html/rfc6749#section-4.3">\n *     Section 4.3 Resource Owner Password Credentials Grant</a>\n */\npublic final class OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider implements AuthenticationProvider {\n    private static final String ERROR_URI = "https://datatracker.ietf.org/doc/html/rfc6749#section-4.3";\n    private static final OAuth2TokenType ID_TOKEN_TOKEN_TYPE = new OAuth2TokenType(OidcParameterNames.ID_TOKEN);\n    private final Log logger = LogFactory.getLog(getClass());\n    private final OAuth2AuthorizationService authorizationService;\n    private final OAuth2TokenGenerator<? extends OAuth2Token> tokenGenerator;\n    private final UserDetailsService userDetailsService;\n    private final PasswordEncoder passwordEncoder;\n\n    /**\n     * Constructs an {@code OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider} us\n     * ing the provided parameters.\n     *\n     * @param authorizationService the authorization service\n     * @param tokenGenerator       the token generator\n     * @param userDetailsService   the user details service\n     * @param passwordEncoder      the password encoder\n     */\n    public OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider(\n            OAuth2AuthorizationService authorizationService, OAuth2TokenGenerator<? extends OAuth2Token> tokenGenerator,\n            UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {\n        Assert.notNull(authorizationService, "authorizationService cannot be null");\n        Assert.notNull(tokenGenerator, "tokenGenerator cannot be null");\n        Assert.notNull(userDetailsService, "userDetailsService cannot be null");\n        Assert.notNull(passwordEncoder, "passwordEncoder cannot be null");\n        this.authorizationService = authorizationService;\n        this.tokenGenerator = tokenGenerator;\n        this.userDetailsService = userDetailsService;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken resourceOwnerPasswordCredentialsAuthentication =\n                (OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken) authentication;\n        OAuth2ClientAuthenticationToken clientPrincipal =\n                getAuthenticatedClientElseThrowInvalidClient(resourceOwnerPasswordCredentialsAuthentication);\n        RegisteredClient registeredClient = clientPrincipal.getRegisteredClient();\n        if (this.logger.isTraceEnabled()) {\n            this.logger.trace("Retrieved registered client");\n        }\n        if (!registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.PASSWORD)) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.UNAUTHORIZED_CLIENT);\n        }\n        Set<String> authorizedScopes = Collections.emptySet();\n        if (!CollectionUtils.isEmpty(resourceOwnerPasswordCredentialsAuthentication.getScopes()\n        )) {\n            for (String requestedScope : resourceOwnerPasswordCredentialsAuthentication.getScopes(\n            )) {\n                if (!registeredClient.getScopes().contains(requestedScope)) {\n                    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_SCOPE);\n                }\n            }\n            authorizedScopes = new LinkedHashSet<>(resourceOwnerPasswordCredentialsAuthentication.getScopes());\n        }\n        UserDetails userDetails;\n        try {\n            userDetails = this.userDetailsService.loadUserByUsername(resourceOwnerPasswordCredentialsAuthentication.getUsername());\n        } catch (UsernameNotFoundException e) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_GRANT);\n        }\n        if (userDetails == null) {\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_GRANT);\n        }\n        if (!this.passwordEncoder.matches(resourceOwnerPasswordCredentialsAuthentication.getPassword(), userDetails.getPassword())) {\n            if (this.logger.isDebugEnabled()) {\n                this.logger.debug("Failed to authenticate since password does not match stored value"\n                );\n            }\n            throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_GRANT);\n        }\n        if (this.logger.isTraceEnabled()) {\n            this.logger.trace("Validated token request parameters");\n        }\n        Authentication principal = new UsernamePasswordAuthenticationToken(userDetails.getUsername(), userDetails.getPassword(), userDetails.getAuthorities());\n        // @formatter:off\n        DefaultOAuth2TokenContext.Builder tokenContextBuilder = DefaultOAuth2TokenContext.builder()\n                .registeredClient(registeredClient)\n                .principal(principal)\n                .authorizationServerContext(AuthorizationServerContextHolder.getContext())\n                .authorizedScopes(authorizedScopes)\n                .authorizationGrantType(AuthorizationGrantType.PASSWORD)\n                .authorizationGrant(resourceOwnerPasswordCredentialsAuthentication);\n        // @formatter:on\n        OAuth2Authorization.Builder authorizationBuilder = OAuth2Authorization.withRegisteredClient(registeredClient)\n                .principalName(principal.getName())\n                .attribute(Principal.class.getName(), principal)\n                .authorizationGrantType(AuthorizationGrantType.PASSWORD)\n                .authorizedScopes(authorizedScopes);\n        // ----- Access token -----\n        OAuth2TokenContext tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.ACCESS_TOKEN).build();\n        OAuth2Token generatedAccessToken = this.tokenGenerator.generate(tokenContext);\n        if (generatedAccessToken == null) {\n            OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                    "The token generator failed to generate the access token.", ERROR_URI);\n            throw new OAuth2AuthenticationException(error);\n        }\n        if (this.logger.isTraceEnabled()) {\n            this.logger.trace("Generated access token");\n        }\n        OAuth2AccessToken accessToken = new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,\n                generatedAccessToken.getTokenValue(), generatedAccessToken.getIssuedAt(), generatedAccessToken.getExpiresAt(),\n                tokenContext.getAuthorizedScopes());\n        if (generatedAccessToken instanceof ClaimAccessor) {\n            authorizationBuilder.token(accessToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, ((ClaimAccessor) generatedAccessToken).getClaims()));\n        } else {\n            authorizationBuilder.accessToken(accessToken);\n        }\n        // ----- Refresh token -----\n        OAuth2RefreshToken refreshToken = null;\n        if (registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.REFRESH_TOKEN) &&\n                // Do not issue refresh token to public client\n                !clientPrincipal.getClientAuthenticationMethod().equals(ClientAuthenticationMethod.NONE)) {\n            tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.REFRESH_TOKEN).build();\n            OAuth2Token generatedRefreshToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedRefreshToken instanceof OAuth2RefreshToken)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the refresh token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n            if (this.logger.isTraceEnabled()) {\n                this.logger.trace("Generated refresh token");\n            }\n            refreshToken = (OAuth2RefreshToken) generatedRefreshToken;\n            authorizationBuilder.refreshToken(refreshToken);\n        }\n        // ----- ID token -----\n        OidcIdToken idToken;\n        if (authorizedScopes.contains(OidcScopes.OPENID)) {\n            // @formatter:off\n            tokenContext = tokenContextBuilder\n                    .tokenType(ID_TOKEN_TOKEN_TYPE)\n                    .authorization(authorizationBuilder.build()) // ID token customizer may need access to the access token and/or refresh token\n                    .build();\n            // @formatter:on\n            OAuth2Token generatedIdToken = this.tokenGenerator.generate(tokenContext);\n            if (!(generatedIdToken instanceof Jwt)) {\n                OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,\n                        "The token generator failed to generate the ID token.", ERROR_URI);\n                throw new OAuth2AuthenticationException(error);\n            }\n            if (this.logger.isTraceEnabled()) {\n                this.logger.trace("Generated id token");\n            }\n            idToken = new OidcIdToken(generatedIdToken.getTokenValue(), generatedIdToken.getIssuedAt(),\n                    generatedIdToken.getExpiresAt(), ((Jwt) generatedIdToken).getClaims());\n            authorizationBuilder.token(idToken, (metadata) ->\n                    metadata.put(OAuth2Authorization.Token.CLAIMS_METADATA_NAME, idToken.getClaims()));\n        } else {\n            idToken = null;\n        }\n        OAuth2Authorization authorization = authorizationBuilder.build();\n        this.authorizationService.save(authorization);\n        if (this.logger.isTraceEnabled()) {\n            this.logger.trace("Saved authorization");\n        }\n        Map<String, Object> additionalParameters = Collections.emptyMap();\n        if (idToken != null) {\n            additionalParameters = new HashMap<>();\n            additionalParameters.put(OidcParameterNames.ID_TOKEN, idToken.getTokenValue());\n        }\n        if (this.logger.isTraceEnabled()) {\n            this.logger.trace("Authenticated token request");\n        }\n        return new OAuth2AccessTokenAuthenticationToken(\n                registeredClient, clientPrincipal, accessToken, refreshToken, additionalParameters);\n    }\n\n    @Override\n    public boolean supports(Class<?> authentication) {\n        return OAuth2ResourceOwnerPasswordCredentialsAuthenticationToken.class.isAssignableFrom\n                (authentication);\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"4-\u81ea\u5b9a\u4e49authenticationproviderbuilder",children:"4. \u81ea\u5b9a\u4e49AuthenticationProviderBuilder"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"AuthenticationProviderBuilder"})," \u4ec5\u4ec5\u662f\u4e3a\u4e86\u65b9\u4fbf\u6784\u5efa\u51fa ",(0,r.jsx)(t.code,{children:"AuthenticationProvider"})," \u6240\u7f16\u5199\u7684\u5de5\n\u5177\u7c7b\uff0c\u5e76\u975e ",(0,r.jsx)(t.code,{children:"Spring Authorization Server"})," \u6240\u8981\u6c42\u3002\u6240\u4ee5\u4e0d\u5f3a\u5236\u8981\u6c42\u5b9e\u73b0\uff0c\u89c2\u4f17\u8001\u7237\u4eec\u53ef\u81ea\u884c\u51b3\u5b9a\u662f \u5426\u4f7f\u7528\u8be5\u7c7b\u3002"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"package org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers;\n\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.oauth2.core.OAuth2Token;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.authentication.OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider;\nimport org.springframework.security.oauth2.server.authorization.token.OAuth2TokenGenerator;\n\n/**\n * An Builder for {@link OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider}.\n *\n * @see OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider\n * @see OAuth2AuthorizationService\n * @see OAuth2TokenGenerator\n */\npublic final class OAuth2ResourceOwnerPasswordCredentialsAuthenticationProviderBuilder {\n\n    private HttpSecurity httpSecurity;\n\n    private UserDetailsService userDetailsService;\n\n    private PasswordEncoder passwordEncoder;\n\n    public OAuth2ResourceOwnerPasswordCredentialsAuthenticationProviderBuilder(\n            HttpSecurity httpSecurity, UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {\n        this.httpSecurity = httpSecurity;\n        this.userDetailsService = userDetailsService;\n        this.passwordEncoder = passwordEncoder;\n    }\n\n    public OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider build() {\n        OAuth2AuthorizationService authorizationService = OAuth2ConfigurerUtils.getAuthorizationService(httpSecurity);\n        OAuth2TokenGenerator<? extends OAuth2Token> tokenGenerator = OAuth2ConfigurerUtils.getTokenGenerator(httpSecurity);\n        OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider resourceOwnerPasswordCredentialsAuthenticationProvider =\n                new OAuth2ResourceOwnerPasswordCredentialsAuthenticationProvider(authorizationService, tokenGenerator,\n                        userDetailsService, passwordEncoder);\n        return resourceOwnerPasswordCredentialsAuthenticationProvider;\n    }\n\n}\n\n"})}),"\n",(0,r.jsx)(t.h3,{id:"5-\u6dfb\u52a0\u5bc6\u7801\u6a21\u5f0fpassword\u914d\u7f6e",children:"5. \u6dfb\u52a0\u5bc6\u7801\u6a21\u5f0f\uff08password\uff09\u914d\u7f6e"}),"\n",(0,r.jsxs)(t.p,{children:["\u914d\u7f6e",(0,r.jsx)(t.code,{children:"tokenEndpoint"}),"\uff0c\u6dfb\u52a0\u6211\u4eec\u81ea\u5b9a\u4e49\u7684 ",(0,r.jsx)(t.code,{children:"AuthenticationProvider"})," \u548c ",(0,r.jsx)(t.code,{children:"AuthenticationConverter"})]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'\n@Configuration\npublic class AuthorizationServerConfig {\n\n    @Bean\n    @Order(Ordered.HIGHEST_PRECEDENCE)\n    public SecurityFilterChain authorizationServerSecurityFilterChain(\n            HttpSecurity http, RegisteredClientRepository registeredClientRepository,\n            AuthorizationServerSettings authorizationServerSettings,\n            UserDetailsService userDetailsService) throws Exception {\n\n        // ignore ...\n\n        // \u914d\u7f6e\u81ea\u5b9a\u4e49\u7684\u8ba4\u8bc1\u5668\n        Map<String, PasswordEncoder> passwordEncoderMap = new HashMap<>();\n        passwordEncoderMap.put("noop", NoOpPasswordEncoder.getInstance());\n        PasswordEncoder passwordEncoder = new DelegatingPasswordEncoder("noop", passwordEncoderMap);\n        http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n                .tokenEndpoint(tokenEndpoint ->\n                        tokenEndpoint.authenticationProvider(\n                                        new OAuth2ResourceOwnerPasswordCredentialsAuthenticationProviderBuilder\n                                                (http, userDetailsService, passwordEncoder).build()\n                                )\n                                .accessTokenRequestConverter(\n                                        new OAuth2ResourceOwnerPasswordCredentialsAuthenticationConverter())\n                );\n\n        // ignore ...\n\n        return http.build();\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"4-\u6d4b\u8bd5",children:"4. \u6d4b\u8bd5"}),"\n",(0,r.jsx)(t.h3,{id:"1-\u83b7\u53d6token",children:"1. \u83b7\u53d6token"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:'curl -X POST "http://localhost:8080/oauth2/token?grant_type=password&scope=message.read+message.write&username=user&password=password" \\\n  -H "Authorization: Basic bWVzc2FnaW5nLWNsaWVudDpzZWNyZXQ="\n'})}),"\n",(0,r.jsx)(t.h3,{id:"2-\u4f9d\u6b21\u6d4b\u8bd5\u5176\u4ed6\u7aef\u70b9\u4f7f\u7528token\u8bbf\u95ee\u8d44\u6e90\u4f7f\u7528refresh_token\u5237\u65b0token\u7b49\u5747\u6b63\u5e38",children:"2. \u4f9d\u6b21\u6d4b\u8bd5\u5176\u4ed6\u7aef\u70b9\uff1a\u4f7f\u7528token\u8bbf\u95ee\u8d44\u6e90\u3001\u4f7f\u7528refresh_token\u5237\u65b0token\u7b49\u5747\u6b63\u5e38"}),"\n",(0,r.jsx)(t.h2,{id:"5-\u5c0f\u7ed3",children:"5. \u5c0f\u7ed3"}),"\n",(0,r.jsx)(t.p,{children:"\u5230\u6b64\uff0c\u6388\u6743\u6a21\u5f0f\u81ea\u5b9a\u4e49\u5df2\u5b8c\u6210\u5173\u4e8eOAuth2\u6388\u6743\u7684\u5173\u952e\u7c7b\u5982\u4e0b\uff1a"}),"\n",(0,r.jsx)(t.p,{children:"TokenEndpoint\u7684\u5165\u53e3\u7c7b\uff1a"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2TokenEndpointFilter"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u6388\u6743\u7801\u6a21\u5f0f\u76f8\u5173\u7c7b\uff1a"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2AuthorizationCodeAuthenticationToken"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2AuthorizationCodeRequestAuthenticationProvider"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2AuthorizationCodeAuthenticationProvider"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2AuthorizationCodeAuthenticationConverter"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2AuthorizationCodeRequestAuthenticationConverter"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"\u5ba2\u6237\u7aef\u6a21\u5f0f\u76f8\u5173\u7c7b\uff1a"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2ClientCredentialsAuthenticationToken"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2ClientCredentialsAuthenticationProvider"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.code,{children:"OAuth2ClientCredentialsAuthenticationConverter"})}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.ah)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},11151:(e,t,n)=>{n.d(t,{ah:()=>o});var r=n(67294);const i=r.createContext({});function o(e){const t=r.useContext(i);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);
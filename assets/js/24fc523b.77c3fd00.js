"use strict";(self.webpackChunklight_docusaurus=self.webpackChunklight_docusaurus||[]).push([[6563],{33473:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(85893),r=n(11151);const o={},a=void 0,s={id:"zh-cn/spring-authorization-server/SAS-Store-Token-And-UserInfo-With-Redis",title:"SAS-Store-Token-And-UserInfo-With-Redis",description:"- Spring Authorization Server\u5165\u95e8 (\u5341\u4e5d) \u57fa\u4e8eRedis\u7684Token\u3001\u5ba2\u6237\u7aef\u4fe1\u606f\u548c\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b58\u50a8",source:"@site/docs/zh-cn/spring-authorization-server/19-SAS-Store-Token-And-UserInfo-With-Redis.md",sourceDirName:"zh-cn/spring-authorization-server",slug:"/zh-cn/spring-authorization-server/SAS-Store-Token-And-UserInfo-With-Redis",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-Store-Token-And-UserInfo-With-Redis",draft:!1,unlisted:!1,editUrl:"https://github.com/lorchr/light-docusaurus/tree/main/docs/zh-cn/spring-authorization-server/19-SAS-Store-Token-And-UserInfo-With-Redis.md",tags:[],version:"current",sidebarPosition:19,frontMatter:{},sidebar:"troch",previous:{title:"SAS-Vue-PKCE",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-Vue-PKCE"},next:{title:"SAS-Optimize-Customlize-UserDetailService",permalink:"/light-docusaurus/docs/zh-cn/spring-authorization-server/SAS-Optimize-Customlize-UserDetailService"}},d={},l=[{value:"\u4e00\u3001\u600e\u4e48\u4f7f\u7528Spring Data Redis\u5b9e\u73b0Spring Authorization Server\u7684\u6838\u5fc3services\uff1f",id:"\u4e00\u600e\u4e48\u4f7f\u7528spring-data-redis\u5b9e\u73b0spring-authorization-server\u7684\u6838\u5fc3services",level:2},{value:"\u4e8c\u3001\u4fee\u6539RedisConfig\u7c7b \u91cd\u8981",id:"\u4e8c\u4fee\u6539redisconfig\u7c7b-\u91cd\u8981",level:2},{value:"\u4e09\u3001\u5b9e\u73b0\u6b65\u9aa4",id:"\u4e09\u5b9e\u73b0\u6b65\u9aa4",level:2},{value:"\u56db\u3001\u5177\u4f53\u5b9e\u73b0",id:"\u56db\u5177\u4f53\u5b9e\u73b0",level:2},{value:"1. \u5b9a\u4e49\u5b9e\u4f53",id:"1-\u5b9a\u4e49\u5b9e\u4f53",level:3},{value:"1. \u5ba2\u6237\u7aef\u5b9e\u4f53(<code>RegisteredClient</code>)",id:"1-\u5ba2\u6237\u7aef\u5b9e\u4f53registeredclient",level:4},{value:"2. \u6388\u6743\u4fe1\u606f\u5b9e\u4f53(<code>OAuth2Authorization</code>)",id:"2-\u6388\u6743\u4fe1\u606f\u5b9e\u4f53oauth2authorization",level:4},{value:"3. \u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b9e\u4f53(<code>OAuth2AuthorizationConsent</code>)",id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b9e\u4f53oauth2authorizationconsent",level:4},{value:"2. \u5b9a\u4e49Spring Data Repositories(Redis Repositories)",id:"2-\u5b9a\u4e49spring-data-repositoriesredis-repositories",level:3},{value:"1. \u5ba2\u6237\u7aefRepository",id:"1-\u5ba2\u6237\u7aefrepository",level:4},{value:"2. \u6388\u6743\u4fe1\u606fRepository",id:"2-\u6388\u6743\u4fe1\u606frepository",level:4},{value:"3. \u6388\u6743\u786e\u8ba4\u4fe1\u606fRepository",id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606frepository",level:4},{value:"3. \u5b9e\u73b0\u6838\u5fc3service",id:"3-\u5b9e\u73b0\u6838\u5fc3service",level:3},{value:"1. \u5ba2\u6237\u7aefRepository(<code>RegisteredClientRepository</code>)",id:"1-\u5ba2\u6237\u7aefrepositoryregisteredclientrepository",level:4},{value:"2. \u6388\u6743\u4fe1\u606f\u7684service",id:"2-\u6388\u6743\u4fe1\u606f\u7684service",level:4},{value:"3. \u6388\u6743\u786e\u8ba4\u4fe1\u606f\u7684service",id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u7684service",level:4},{value:"4. \u53bb\u9664\u8ba4\u8bc1\u670d\u52a1\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u4e09\u4e2a\u6838\u5fc3service\u7684\u6ce8\u5165",id:"4-\u53bb\u9664\u8ba4\u8bc1\u670d\u52a1\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u4e09\u4e2a\u6838\u5fc3service\u7684\u6ce8\u5165",level:3},{value:"\u4e94\u3001\u5199\u5728\u6700\u540e",id:"\u4e94\u5199\u5728\u6700\u540e",level:2},{value:"\u516d\u3001\u9644\u5f55",id:"\u516d\u9644\u5f55",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.ah)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://juejin.cn/post/7294853623849254946",children:"Spring Authorization Server\u5165\u95e8 (\u5341\u4e5d) \u57fa\u4e8eRedis\u7684Token\u3001\u5ba2\u6237\u7aef\u4fe1\u606f\u548c\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b58\u50a8"})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"\u4e00\u600e\u4e48\u4f7f\u7528spring-data-redis\u5b9e\u73b0spring-authorization-server\u7684\u6838\u5fc3services",children:"\u4e00\u3001\u600e\u4e48\u4f7f\u7528Spring Data Redis\u5b9e\u73b0Spring Authorization Server\u7684\u6838\u5fc3services\uff1f"}),"\n",(0,i.jsxs)(t.p,{children:["\u672c\u6587\u5bf9\u5e94\u7684\u662f\u6587\u6863\u4e2d\u7684",(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/guides/how-to-jpa.html",children:"How-to: Implement core services with JPA"}),"\uff0c\u6587\u6863\u4e2d\u4f7f\u7528Jpa\u5b9e\u73b0\u4e86\u6838\u5fc3\u7684\u4e09\u4e2a\u670d\u52a1\u7c7b\uff1a\u6388\u6743\u4fe1\u606f\u3001\u5ba2\u6237\u7aef\u4fe1\u606f\u548c\u6388\u6743\u786e\u8ba4\u7684\u670d\u52a1\uff1b"]}),"\n",(0,i.jsx)(t.p,{children:"\u672c\u6587\u4f1a\u4f7f\u7528Spring Data Redis\u53c2\u8003\u6587\u6863\u6765\u6dfb\u52a0\u65b0\u7684\u5b9e\u73b0\u3002\u5728\u8fd9\u91cc\u4e5f\u653e\u4e00\u4e0b\u6587\u6863\u4e2d\u7684\u4e00\u53e5\u8bdd\uff1a \u672c\u6307\u5357\u7684\u76ee\u7684\u662f\u4e3a\u60a8\u81ea\u5df1\u5b9e\u73b0\u8fd9\u4e9b\u670d\u52a1\u63d0\u4f9b\u4e00\u4e2a\u8d77\u70b9\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"\u4e8c\u4fee\u6539redisconfig\u7c7b-\u91cd\u8981",children:"\u4e8c\u3001\u4fee\u6539RedisConfig\u7c7b \u91cd\u8981"}),"\n",(0,i.jsxs)(t.p,{children:["\u6dfb\u52a0\u6ce8\u89e3",(0,i.jsx)(t.code,{children:"@EnableRedisRepositories(enableKeyspaceEvents = RedisKeyValueAdapter.EnableKeyspaceEvents.ON_STARTUP)"}),"\uff0c\u5728\u542f\u52a8\u540e\u6dfb\u52a0Redis\u6570\u636e\u5931\u6548\u65f6\u95f4\uff0c\u81ea\u52a8\u5220\u9664",(0,i.jsx)(t.code,{children:"@Indexed"}),"\u6ce8\u89e3\u751f\u6210\u7684\u7d22\u5f15(Secondary Indexes)\u3002"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.example.config;\n\nimport com.fasterxml.jackson.annotation.JsonAutoDetect;\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.fasterxml.jackson.annotation.PropertyAccessor;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisKeyValueAdapter;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.repository.configuration.EnableRedisRepositories;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\nimport org.springframework.security.jackson2.CoreJackson2Module;\n\n/**\n * Redis\u7684key\u5e8f\u5217\u5316\u914d\u7f6e\u7c7b\n *\n * @author vains\n */\n@Configuration\n@RequiredArgsConstructor\n@EnableRedisRepositories(enableKeyspaceEvents = RedisKeyValueAdapter.EnableKeyspaceEvents.ON_STARTUP)\npublic class RedisConfig {\n\n    private final Jackson2ObjectMapperBuilder builder;\n\n    /**\n     * \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f7f\u7528\n     *\n     * @param connectionFactory redis\u94fe\u63a5\u5de5\u5382\n     * @return RedisTemplate\n     */\n    @Bean\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory) {\n        // \u5b57\u7b26\u4e32\u5e8f\u5217\u5316\u5668\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n\n        // \u521b\u5efaObjectMapper\u5e76\u6dfb\u52a0\u9ed8\u8ba4\u914d\u7f6e\n        ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n\n        // \u5e8f\u5217\u5316\u6240\u6709\u5b57\u6bb5\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n\n        // \u6b64\u9879\u5fc5\u987b\u914d\u7f6e\uff0c\u5426\u5219\u5982\u679c\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u91cc\u8fb9\u8fd8\u6709\u5bf9\u8c61\uff0c\u4f1a\u62a5\u5982\u4e0b\u9519\u8bef\uff1a\n        //     java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to XXX\n        objectMapper.activateDefaultTyping(\n                objectMapper.getPolymorphicTypeValidator(),\n                ObjectMapper.DefaultTyping.NON_FINAL,\n                JsonTypeInfo.As.PROPERTY);\n\n        // \u6dfb\u52a0Security\u63d0\u4f9b\u7684Jackson Mixin\n        objectMapper.registerModule(new CoreJackson2Module());\n\n        // \u5b58\u5165redis\u65f6\u5e8f\u5217\u5316\u503c\u7684\u5e8f\u5217\u5316\u5668\n        Jackson2JsonRedisSerializer<Object> valueSerializer =\n                new Jackson2JsonRedisSerializer<>(objectMapper, Object.class);\n\n        RedisTemplate<Object, Object> redisTemplate = new RedisTemplate<>();\n\n        // \u8bbe\u7f6e\u503c\u5e8f\u5217\u5316\n        redisTemplate.setValueSerializer(valueSerializer);\n        // \u8bbe\u7f6ehash\u683c\u5f0f\u6570\u636e\u503c\u7684\u5e8f\u5217\u5316\u5668\n        redisTemplate.setHashValueSerializer(valueSerializer);\n        // \u9ed8\u8ba4\u7684Key\u5e8f\u5217\u5316\u5668\u4e3a\uff1aJdkSerializationRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // \u8bbe\u7f6e\u5b57\u7b26\u4e32\u5e8f\u5217\u5316\u5668\n        redisTemplate.setStringSerializer(stringRedisSerializer);\n        // \u8bbe\u7f6ehash\u7ed3\u6784\u7684key\u7684\u5e8f\u5217\u5316\u5668\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n\n        // \u8bbe\u7f6e\u8fde\u63a5\u5de5\u5382\n        redisTemplate.setConnectionFactory(connectionFactory);\n\n        return redisTemplate;\n    }\n\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"\u4e09\u5b9e\u73b0\u6b65\u9aa4",children:"\u4e09\u3001\u5b9e\u73b0\u6b65\u9aa4"}),"\n",(0,i.jsx)(t.p,{children:"\u56e0\u4e3a\u672c\u6587\u4f7f\u7528\u7684\u662fSpring Data\uff0c\u6240\u4ee5\u9700\u8981\u5148\u5b9a\u4e49\u5bf9\u5e94\u7684\u5b9e\u4f53\uff0c\u7136\u540e\u6839\u636e\u5b9e\u4f53\u5b9a\u4e49\u5bf9\u5e94\u7684Repository(Spring Data Repository)\uff0c\u6700\u540e\u5b9e\u73b0\u6838\u5fc3\u7684service\uff0c\u4f7f\u7528\u8fd9\u4e9bRepository\u64cd\u4f5cRedis\u3002"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"\u5b9a\u4e49\u5b9e\u4f53"}),"\n",(0,i.jsxs)(t.li,{children:["\u5b9a\u4e49",(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories",children:"Redis Repositories"})]}),"\n",(0,i.jsx)(t.li,{children:"\u5b9e\u73b0\u6838\u5fc3\u670d\u52a1\u7c7b"}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"\u56db\u5177\u4f53\u5b9e\u73b0",children:"\u56db\u3001\u5177\u4f53\u5b9e\u73b0"}),"\n",(0,i.jsx)(t.h3,{id:"1-\u5b9a\u4e49\u5b9e\u4f53",children:"1. \u5b9a\u4e49\u5b9e\u4f53"}),"\n",(0,i.jsx)(t.p,{children:"\u6807\u9898\u4e2d\u7684\u7c7b\u662f\u6846\u67b6\u4e2d\u5bf9\u5e94\u7684\u9ed8\u8ba4\u5b9e\u4f53\uff0c\u4e0b\u65b9\u4ee3\u7801\u4e2d\u7684\u7c7b\u90fd\u662f\u4ece\u6807\u9898\u540e\u8fb9\u7684\u7c7b\u4e2d\u6620\u5c04\u6570\u636e\u4ece\u800c\u4fdd\u5b58\u81f3Redis\u3002"}),"\n",(0,i.jsxs)(t.h4,{id:"1-\u5ba2\u6237\u7aef\u5b9e\u4f53registeredclient",children:["1. \u5ba2\u6237\u7aef\u5b9e\u4f53(",(0,i.jsx)(t.code,{children:"RegisteredClient"}),")"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.entity.security;\n\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.redis.core.RedisHash;\nimport org.springframework.data.redis.core.index.Indexed;\n\nimport java.io.Serializable;\nimport java.time.Instant;\n\n/**\n * \u57fa\u4e8eredis\u5b58\u50a8\u7684\u5ba2\u6237\u7aef\u5b9e\u4f53\n *\n * @author vains\n */\n@Data\n@RedisHash(value = "client")\npublic class RedisRegisteredClient implements Serializable {\n\n    /**\n     * \u4e3b\u952e\n     */\n    @Id\n    private String id;\n\n    /**\n     * \u5ba2\u6237\u7aefid\n     */\n    @Indexed\n    private String clientId;\n\n    /**\n     * \u5ba2\u6237\u7aefid\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant clientIdIssuedAt;\n\n    /**\n     * \u5ba2\u6237\u7aef\u79d8\u94a5\n     */\n    private String clientSecret;\n\n    /**\n     * \u5ba2\u6237\u7aef\u79d8\u94a5\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant clientSecretExpiresAt;\n\n    /**\n     * \u5ba2\u6237\u7aef\u540d\u79f0\n     */\n    private String clientName;\n\n    /**\n     * \u5ba2\u6237\u7aef\u652f\u6301\u7684\u8ba4\u8bc1\u65b9\u5f0f\n     */\n    private String clientAuthenticationMethods;\n\n    /**\n     * \u5ba2\u6237\u7aef\u652f\u6301\u7684\u6388\u6743\u7533\u8bf7\u65b9\u5f0f\n     */\n    private String authorizationGrantTypes;\n\n    /**\n     * \u56de\u8c03\u5730\u5740\n     */\n    private String redirectUris;\n\n    /**\n     * \u767b\u51fa\u56de\u8c03\u5730\u5740\n     */\n    private String postLogoutRedirectUris;\n\n    /**\n     * \u5ba2\u6237\u7aef\u62e5\u6709\u7684scope\n     */\n    private String scopes;\n\n    /**\n     * \u5ba2\u6237\u7aef\u914d\u7f6e\n     */\n    private String clientSettings;\n\n    /**\n     * \u901a\u8fc7\u8be5\u5ba2\u6237\u7aef\u7b7e\u53d1\u7684access token\u8bbe\u7f6e\n     */\n    private String tokenSettings;\n\n}\n'})}),"\n",(0,i.jsxs)(t.h4,{id:"2-\u6388\u6743\u4fe1\u606f\u5b9e\u4f53oauth2authorization",children:["2. \u6388\u6743\u4fe1\u606f\u5b9e\u4f53(",(0,i.jsx)(t.code,{children:"OAuth2Authorization"}),")"]}),"\n",(0,i.jsxs)(t.p,{children:["\u8be5\u7c7b\u4e2d\u5305\u62ec\u4e86\u6388\u6743\u7801\u3001",(0,i.jsx)(t.code,{children:"access_token"}),"\u3001",(0,i.jsx)(t.code,{children:"refresh_token"}),"\u3001\u8bbe\u5907\u7801\u548c",(0,i.jsx)(t.code,{children:"id_token"}),"\u7b49\u6570\u636e\u3002"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.entity.security;\n\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.redis.core.RedisHash;\nimport org.springframework.data.redis.core.TimeToLive;\nimport org.springframework.data.redis.core.index.Indexed;\n\nimport java.io.Serializable;\nimport java.time.Instant;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * \u4f7f\u7528Repository\u5c06\u6388\u6743\u7533\u8bf7\u7684\u8ba4\u8bc1\u4fe1\u606f\u7f13\u5b58\u81f3redis\u7684\u5b9e\u4f53\n *\n * @author vains\n */\n@Data\n@RedisHash(value = "authorization")\npublic class RedisOAuth2Authorization implements Serializable {\n\n    /**\n     * \u4e3b\u952e\n     */\n    @Id\n    private String id;\n\n    /**\n     * \u6388\u6743\u7533\u8bf7\u65f6\u4f7f\u7528\u7684\u5ba2\u6237\u7aefid\n     */\n    private String registeredClientId;\n\n    /**\n     * \u6388\u6743\u7528\u6237\u59d3\u540d\n     */\n    private String principalName;\n\n    /**\n     * \u6388\u6743\u7533\u8bf7\u65f6\u4f7f\u7528 grant_type\n     */\n    private String authorizationGrantType;\n\n    /**\n     * \u6388\u6743\u7533\u8bf7\u7684scope\n     */\n    private String authorizedScopes;\n\n    /**\n     * \u6388\u6743\u7684\u8ba4\u8bc1\u4fe1\u606f(\u5f53\u524d\u7528\u6237)\u3001\u8bf7\u6c42\u4fe1\u606f(\u6388\u6743\u7533\u8bf7\u8bf7\u6c42)\n     */\n    private String attributes;\n\n    /**\n     * \u6388\u6743\u7533\u8bf7\u65f6\u7684state\n     */\n    @Indexed\n    private String state;\n\n    /**\n     * \u6388\u6743\u7801\u7684\u503c\n     */\n    @Indexed\n    private String authorizationCodeValue;\n\n    /**\n     * \u6388\u6743\u7801\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant authorizationCodeIssuedAt;\n\n    /**\n     * \u6388\u6743\u7801\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant authorizationCodeExpiresAt;\n\n    /**\n     * \u6388\u6743\u7801\u5143\u6570\u636e\n     */\n    private String authorizationCodeMetadata;\n\n    /**\n     * access token\u7684\u503c\n     */\n    @Indexed\n    private String accessTokenValue;\n\n    /**\n     * access token\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant accessTokenIssuedAt;\n\n    /**\n     * access token\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant accessTokenExpiresAt;\n\n    /**\n     * access token\u5143\u6570\u636e\n     */\n    private String accessTokenMetadata;\n\n    /**\n     * access token\u7684\u7c7b\u578b\n     */\n    private String accessTokenType;\n\n    /**\n     * access token\u4e2d\u5305\u542b\u7684scope\n     */\n    private String accessTokenScopes;\n\n    /**\n     * refresh token\u7684\u503c\n     */\n    @Indexed\n    private String refreshTokenValue;\n\n    /**\n     * refresh token\u7b7e\u53d1\u4f7f\u52b2\n     */\n    private Instant refreshTokenIssuedAt;\n\n    /**\n     * refresh token\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant refreshTokenExpiresAt;\n\n    /**\n     * refresh token\u5143\u6570\u636e\n     */\n    private String refreshTokenMetadata;\n\n    /**\n     * id token\u7684\u503c\n     */\n    @Indexed\n    private String oidcIdTokenValue;\n\n    /**\n     * id token\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant oidcIdTokenIssuedAt;\n\n    /**\n     * id token\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant oidcIdTokenExpiresAt;\n\n    /**\n     * id token\u5143\u6570\u636e\n     */\n    private String oidcIdTokenMetadata;\n\n    /**\n     * id token\u4e2d\u5305\u542b\u7684\u5c5e\u6027\n     */\n    private String oidcIdTokenClaims;\n\n    /**\n     * \u7528\u6237\u7801\u7684\u503c\n     */\n    @Indexed\n    private String userCodeValue;\n\n    /**\n     * \u7528\u6237\u7801\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant userCodeIssuedAt;\n\n    /**\n     * \u7528\u6237\u7801\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant userCodeExpiresAt;\n\n    /**\n     * \u7528\u6237\u7801\u5143\u6570\u636e\n     */\n    private String userCodeMetadata;\n\n    /**\n     * \u8bbe\u5907\u7801\u7684\u503c\n     */\n    @Indexed\n    private String deviceCodeValue;\n\n    /**\n     * \u8bbe\u5907\u7801\u7b7e\u53d1\u65f6\u95f4\n     */\n    private Instant deviceCodeIssuedAt;\n\n    /**\n     * \u8bbe\u5907\u7801\u8fc7\u671f\u65f6\u95f4\n     */\n    private Instant deviceCodeExpiresAt;\n\n    /**\n     * \u8bbe\u5907\u7801\u5143\u6570\u636e\n     */\n    private String deviceCodeMetadata;\n\n    /**\n     * \u5f53\u524d\u5bf9\u8c61\u5728Redis\u4e2d\u7684\u8fc7\u671f\u65f6\u95f4\n     */\n    @TimeToLive(unit = TimeUnit.MINUTES)\n    private Long timeout;\n\n}\n'})}),"\n",(0,i.jsxs)(t.h4,{id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b9e\u4f53oauth2authorizationconsent",children:["3. \u6388\u6743\u786e\u8ba4\u4fe1\u606f\u5b9e\u4f53(",(0,i.jsx)(t.code,{children:"OAuth2AuthorizationConsent"}),")"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.entity.security;\n\nimport lombok.Data;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.redis.core.RedisHash;\nimport org.springframework.data.redis.core.index.Indexed;\n\nimport java.io.Serializable;\n\n/**\n * \u57fa\u4e8eredis\u7684\u6388\u6743\u786e\u8ba4\u5b58\u50a8\u5b9e\u4f53\n *\n * @author vains\n */\n@Data\n@RedisHash(value = "authorizationConsent")\npublic class RedisAuthorizationConsent implements Serializable {\n\n    /**\n     * \u989d\u5916\u63d0\u4f9b\u7684\u4e3b\u952e\n     */\n    @Id\n    private String id;\n\n    /**\n     * \u5f53\u524d\u6388\u6743\u786e\u8ba4\u7684\u5ba2\u6237\u7aefid\n     */\n    @Indexed\n    private String registeredClientId;\n\n    /**\n     * \u5f53\u524d\u6388\u6743\u786e\u8ba4\u7528\u6237\u7684 username\n     */\n    @Indexed\n    private String principalName;\n\n    /**\n     * \u6388\u6743\u786e\u8ba4\u7684scope\n     */\n    private String authorities;\n\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\u6ce8\u89e3\u89e3\u91ca"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@RedisHash"})," \u6807\u6ce8\u8fd9\u662f\u4e00\u4e2aSpring Data Redis\u7684\u5b9e\u4f53\u7c7b\uff0c\u540c\u65f6\u4e5f\u6307\u5b9a\u4e86\u8be5\u7c7b\u4fdd\u5b58\u5728Redis\u65f6\u7684key\u524d\u7f00\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@Id"})," \u6307\u5b9aid\u5c5e\u6027\uff0cid\u5c5e\u6027\u4e5f\u4f1a\u88ab\u5f53\u505akey\u7684\u4e00\u90e8\u5206\uff0c\u672c\u6ce8\u89e3\u548c\u4e0a\u4e2a\u8fd9\u4e24\u4e2a\u6ce8\u89e3\u9879\u8d1f\u8d23\u521b\u5efa\u7528\u4e8e\u6301\u4e45\u5316\u54c8\u5e0c\u7684\u5b9e\u9645\u952e\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@Indexed"})," \u6ce8\u89e3\u6807\u6ce8\u7684\u5b57\u6bb5\u4f1a\u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e\u8be5\u5b57\u6bb5\u7684\u7d22\u5f15\uff0c\u8ba9Repository\u652f\u6301",(0,i.jsx)(t.code,{children:"findBy"}),"\u88ab\u6ce8\u89e3\u6807\u6ce8\u7684\u5b57\u6bb5\u540d\u7b49\u65b9\u6cd5\u3002"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"@TimeToLive"})," \u6ce8\u89e3\u6807\u6ce8\u7684\u5b57\u6bb5\u4f1a\u88ab\u7528\u6765\u5f53\u505a\u8be5\u5bf9\u8c61\u5728Redis\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u867d\u7136RedisHash\u4e5f\u652f\u6301\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\uff0c\u4f46\u662f\u4e0d\u591f\u7075\u6d3b\uff0c\u6240\u4ee5\u989d\u5916\u6dfb\u52a0\u4e00\u4e2a\u5b57\u6bb5\u9488\u5bf9\u67d0\u6761\u6570\u636e\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u3002"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"2-\u5b9a\u4e49spring-data-repositoriesredis-repositories",children:"2. \u5b9a\u4e49Spring Data Repositories(Redis Repositories)"}),"\n",(0,i.jsxs)(t.p,{children:["Spring Data Repository\u662fSpring Data\u62bd\u8c61\u51fa\u6765\u7684\u4e00\u4e2a\u589e\u5220\u6539\u67e5\u7684interface\u63a5\u53e3\uff0c\u9002\u7528\u4e8eSpring Data\u7684\u4e0d\u540c\u5b9e\u73b0\uff0c\u6846\u67b6\u63d0\u4f9b\u4e86\u652f\u6301\u589e\u5220\u6539\u67e5\u7684\u516c\u5171Repository\uff1a ",(0,i.jsx)(t.code,{children:"CrudRepository<\u5b9e\u4f53\u7c7b\uff0c\u4e3b\u952e\u7c7b\u578b>"}),"\u3002"]}),"\n",(0,i.jsx)(t.h4,{id:"1-\u5ba2\u6237\u7aefrepository",children:"1. \u5ba2\u6237\u7aefRepository"}),"\n",(0,i.jsxs)(t.p,{children:["\u50cf\u4e0b\u8fb9\u7684\u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a",(0,i.jsx)(t.code,{children:"findByClientId"}),"\u65b9\u6cd5\uff0c\u4f46\u662f",(0,i.jsx)(t.code,{children:"ClientId"}),"\u5c5e\u6027\u5e76\u4e0d\u662f\u4e3b\u952e\uff0c\u5982\u679c\u4e0d\u52a0",(0,i.jsx)(t.code,{children:"@Indexed"}),"\u6ce8\u89e3\uff0c\u5219\u8be5\u65b9\u6cd5\u5c31\u4e0d\u4f1a\u751f\u6548\u3002"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.example.repository;\n\nimport com.example.entity.security.RedisRegisteredClient;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\n/**\n * \u57fa\u4e8eSpring Data Redis\u7684\u5ba2\u6237\u7aefrepository\n *\n * @author vains\n */\npublic interface RedisClientRepository extends CrudRepository<RedisRegisteredClient, String> {\n\n    /**\n     * \u6839\u636e\u5ba2\u6237\u7aefId\u67e5\u8be2\u5ba2\u6237\u7aef\u4fe1\u606f\n     *\n     * @param clientId \u5ba2\u6237\u7aefid\n     * @return \u5ba2\u6237\u7aef\u4fe1\u606f\n     */\n    Optional<RedisRegisteredClient> findByClientId(String clientId);\n\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"2-\u6388\u6743\u4fe1\u606frepository",children:"2. \u6388\u6743\u4fe1\u606fRepository"}),"\n",(0,i.jsxs)(t.p,{children:["\u63d0\u4f9b\u6839\u636e",(0,i.jsx)(t.code,{children:"state"}),",\xa0",(0,i.jsx)(t.code,{children:"authorizationCodeValue"}),",\xa0",(0,i.jsx)(t.code,{children:"accessTokenValue"}),",\xa0",(0,i.jsx)(t.code,{children:"refreshTokenValue"}),",\xa0",(0,i.jsx)(t.code,{children:"userCodeValue"}),"\xa0\u548c\xa0",(0,i.jsx)(t.code,{children:"deviceCodeValue"}),"\u5c5e\u6027\u67e5\u8be2\u7684\u65b9\u6cd5\uff0c\u5728service\u4e2d\u7ec4\u5408\u4f7f\u7528\u3002"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.example.repository;\n\nimport com.example.entity.security.RedisOAuth2Authorization;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\n/**\n * oauth2\u6388\u6743\u7ba1\u7406\n *\n * @author vains\n */\npublic interface RedisOAuth2AuthorizationRepository extends CrudRepository<RedisOAuth2Authorization, String> {\n\n    /**\n     * \u6839\u636e\u6388\u6743\u7801\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token \u6388\u6743\u7801\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByAuthorizationCodeValue(String token);\n\n    /**\n     * \u6839\u636eaccess token\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token access token\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByAccessTokenValue(String token);\n\n    /**\n     * \u6839\u636e\u5237\u65b0token\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token \u5237\u65b0token\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByRefreshTokenValue(String token);\n\n    /**\n     * \u6839\u636eid token\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token id token\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByOidcIdTokenValue(String token);\n\n    /**\n     * \u6839\u636e\u7528\u6237\u7801\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token \u7528\u6237\u7801\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByUserCodeValue(String token);\n\n    /**\n     * \u6839\u636e\u8bbe\u5907\u7801\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token \u8bbe\u5907\u7801\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByDeviceCodeValue(String token);\n\n    /**\n     * \u6839\u636estate\u83b7\u53d6\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @param token \u6388\u6743\u7533\u8bf7\u65f6\u7684state\n     * @return \u8ba4\u8bc1\u4fe1\u606f\n     */\n    Optional<RedisOAuth2Authorization> findByState(String token);\n}\n"})}),"\n",(0,i.jsx)(t.h4,{id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606frepository",children:"3. \u6388\u6743\u786e\u8ba4\u4fe1\u606fRepository"}),"\n",(0,i.jsx)(t.p,{children:"\u63d0\u4f9b\u4e00\u4e2a\u6839\u636e\u5ba2\u6237\u7aefId\u548c\u6388\u6743\u786e\u8ba4\u7528\u6237\u7684username\u67e5\u8be2\u7684\u65b9\u6cd5\u3002"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"package com.example.repository;\n\nimport com.example.entity.security.RedisAuthorizationConsent;\nimport org.springframework.data.repository.CrudRepository;\n\nimport java.util.Optional;\n\n/**\n * \u57fa\u4e8eredis\u7684\u6388\u6743\u786e\u8ba4repository\n *\n * @author vains\n */\npublic interface RedisAuthorizationConsentRepository extends CrudRepository<RedisAuthorizationConsent, String> {\n\n    /**\n     * \u6839\u636e\u5ba2\u6237\u7aefid\u548c\u6388\u6743\u786e\u8ba4\u7528\u6237\u7684 username \u67e5\u8be2\u6388\u6743\u786e\u8ba4\u4fe1\u606f\n     *\n     * @param registeredClientId \u5ba2\u6237\u7aefid\n     * @param principalName      \u6388\u6743\u786e\u8ba4\u7528\u6237\u7684 username\n     * @return \u6388\u6743\u786e\u8ba4\u8bb0\u5f55\n     */\n    Optional<RedisAuthorizationConsent> findByRegisteredClientIdAndPrincipalName(String registeredClientId, String principalName);\n\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["\u4ee5\u4e0b\u5185\u5bb9\u6458\u6284\u81ea",(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories.queries",children:"\u6587\u6863"}),"\u5185\u5bb9"]}),"\n",(0,i.jsx)(t.p,{children:"\u67e5\u8be2\u65b9\u6cd5\u5141\u8bb8\u4ece\u65b9\u6cd5\u540d\u81ea\u52a8\u6d3e\u751f\u7b80\u5355\u7684\u67e5\u627e\u5668\u67e5\u8be2\uff0c\u8bf7\u786e\u4fdd\u5728\u67e5\u627e\u5668\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u5c5e\u6027\u5df2\u8bbe\u7f6e\u4e3a\u7d22\u5f15\u3002"}),"\n",(0,i.jsx)(t.p,{children:"\u4e0b\u8868\u63d0\u4f9b\u4e86Redis\u652f\u6301\u7684\u5173\u952e\u5b57\u6982\u8ff0\uff0c\u4ee5\u53ca\u5305\u542b\u8be5\u5173\u952e\u5b57\u7684\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u4ec0\u4e48:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Keyword"}),(0,i.jsx)(t.th,{children:"Sample"}),(0,i.jsx)(t.th,{children:"Redis snippet"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"And"}),(0,i.jsx)(t.td,{children:"findByLastnameAndFirstname"}),(0,i.jsxs)(t.td,{children:["SINTER \u2026:firstname",":rand"," \u2026:lastname",":al","\u2019thor"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Or"}),(0,i.jsx)(t.td,{children:"findByLastnameOrFirstname"}),(0,i.jsxs)(t.td,{children:["SUNION \u2026:firstname",":rand"," \u2026:lastname",":al","\u2019thor"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Is, Equals"}),(0,i.jsx)(t.td,{children:"findByFirstname,\xa0findByFirstnameIs,\xa0findByFirstnameEquals"}),(0,i.jsxs)(t.td,{children:["SINTER \u2026:firstname",":rand"]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsTrue"}),(0,i.jsx)(t.td,{children:"FindByAliveIsTrue"}),(0,i.jsx)(t.td,{children:"SINTER \u2026:alive:1"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsFalse"}),(0,i.jsx)(t.td,{children:"findByAliveIsFalse"}),(0,i.jsx)(t.td,{children:"SINTER \u2026:alive:0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Top,First"}),(0,i.jsx)(t.td,{children:"findFirst10ByFirstname,findTop5ByFirstname"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"3-\u5b9e\u73b0\u6838\u5fc3service",children:"3. \u5b9e\u73b0\u6838\u5fc3service"}),"\n",(0,i.jsxs)(t.h4,{id:"1-\u5ba2\u6237\u7aefrepositoryregisteredclientrepository",children:["1. \u5ba2\u6237\u7aefRepository(",(0,i.jsx)(t.code,{children:"RegisteredClientRepository"}),")"]}),"\n",(0,i.jsx)(t.p,{children:"\u5c0ftip\uff1a\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u8fd9\u4e48\u7279\u6b8a\u662fRepository.."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.repository;\n\nimport com.example.entity.security.RedisRegisteredClient;\nimport com.example.service.impl.RedisOAuth2AuthorizationService;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport jakarta.annotation.PostConstruct;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.jackson2.SecurityJackson2Modules;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.core.ClientAuthenticationMethod;\nimport org.springframework.security.oauth2.core.oidc.OidcScopes;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\nimport org.springframework.security.oauth2.server.authorization.jackson2.OAuth2AuthorizationServerJackson2Module;\nimport org.springframework.security.oauth2.server.authorization.settings.ClientSettings;\nimport org.springframework.security.oauth2.server.authorization.settings.OAuth2TokenFormat;\nimport org.springframework.security.oauth2.server.authorization.settings.TokenSettings;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * \u57fa\u4e8eredis\u7684\u5ba2\u6237\u7aefrepository\u5b9e\u73b0\n *\n * @author vains\n */\n@Slf4j\n@Repository\n@RequiredArgsConstructor\npublic class RedisRegisteredClientRepository implements RegisteredClientRepository {\n\n    /**\n     * \u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u521d\u59cb\u5316\u4f7f\u7528(\u4e0d\u9700\u8981\u53ef\u5220\u9664)\n     */\n    private final PasswordEncoder passwordEncoder;\n\n    private final RedisClientRepository repository;\n\n    private final static ObjectMapper MAPPER = new ObjectMapper();\n\n    static {\n        // \u521d\u59cb\u5316\u5e8f\u5217\u5316\u914d\u7f6e\n        ClassLoader classLoader = RedisOAuth2AuthorizationService.class.getClassLoader();\n        // \u52a0\u8f7dsecurity\u63d0\u4f9b\u7684Modules\n        List<Module> modules = SecurityJackson2Modules.getModules(classLoader);\n        MAPPER.registerModules(modules);\n        // \u52a0\u8f7dAuthorization Server\u63d0\u4f9b\u7684Module\n        MAPPER.registerModule(new OAuth2AuthorizationServerJackson2Module());\n    }\n\n    @Override\n    public void save(RegisteredClient registeredClient) {\n        Assert.notNull(registeredClient, "registeredClient cannot be null");\n        this.repository.findByClientId(registeredClient.getClientId())\n                .ifPresent(existingRegisteredClient -> this.repository.deleteById(existingRegisteredClient.getId()));\n        this.repository.save(toEntity(registeredClient));\n    }\n\n    @Override\n    public RegisteredClient findById(String id) {\n        Assert.hasText(id, "id cannot be empty");\n        return this.repository.findById(id)\n                .map(this::toObject).orElse(null);\n    }\n\n    @Override\n    public RegisteredClient findByClientId(String clientId) {\n        Assert.hasText(clientId, "clientId cannot be empty");\n        return this.repository.findByClientId(clientId)\n                .map(this::toObject).orElse(null);\n    }\n\n    private RegisteredClient toObject(RedisRegisteredClient client) {\n        Set<String> clientAuthenticationMethods = StringUtils.commaDelimitedListToSet(\n                client.getClientAuthenticationMethods());\n        Set<String> authorizationGrantTypes = StringUtils.commaDelimitedListToSet(\n                client.getAuthorizationGrantTypes());\n        Set<String> redirectUris = StringUtils.commaDelimitedListToSet(\n                client.getRedirectUris());\n        Set<String> postLogoutRedirectUris = StringUtils.commaDelimitedListToSet(\n                client.getPostLogoutRedirectUris());\n        Set<String> clientScopes = StringUtils.commaDelimitedListToSet(\n                client.getScopes());\n\n        RegisteredClient.Builder builder = RegisteredClient.withId(client.getId())\n                .clientId(client.getClientId())\n                .clientIdIssuedAt(client.getClientIdIssuedAt())\n                .clientSecret(client.getClientSecret())\n                .clientSecretExpiresAt(client.getClientSecretExpiresAt())\n                .clientName(client.getClientName())\n                .clientAuthenticationMethods(authenticationMethods ->\n                        clientAuthenticationMethods.forEach(authenticationMethod ->\n                                authenticationMethods.add(resolveClientAuthenticationMethod(authenticationMethod))))\n                .authorizationGrantTypes((grantTypes) ->\n                        authorizationGrantTypes.forEach(grantType ->\n                                grantTypes.add(resolveAuthorizationGrantType(grantType))))\n                .redirectUris((uris) -> uris.addAll(redirectUris))\n                .postLogoutRedirectUris((uris) -> uris.addAll(postLogoutRedirectUris))\n                .scopes((scopes) -> scopes.addAll(clientScopes));\n\n        Map<String, Object> clientSettingsMap = parseMap(client.getClientSettings());\n        builder.clientSettings(ClientSettings.withSettings(clientSettingsMap).build());\n\n        Map<String, Object> tokenSettingsMap = parseMap(client.getTokenSettings());\n        builder.tokenSettings(TokenSettings.withSettings(tokenSettingsMap).build());\n\n        return builder.build();\n    }\n\n    private RedisRegisteredClient toEntity(RegisteredClient registeredClient) {\n        List<String> clientAuthenticationMethods = new ArrayList<>(registeredClient.getClientAuthenticationMethods().size());\n        registeredClient.getClientAuthenticationMethods().forEach(clientAuthenticationMethod ->\n                clientAuthenticationMethods.add(clientAuthenticationMethod.getValue()));\n\n        List<String> authorizationGrantTypes = new ArrayList<>(registeredClient.getAuthorizationGrantTypes().size());\n        registeredClient.getAuthorizationGrantTypes().forEach(authorizationGrantType ->\n                authorizationGrantTypes.add(authorizationGrantType.getValue()));\n\n        RedisRegisteredClient entity = new RedisRegisteredClient();\n        entity.setId(registeredClient.getId());\n        entity.setClientId(registeredClient.getClientId());\n        entity.setClientIdIssuedAt(registeredClient.getClientIdIssuedAt());\n        entity.setClientSecret(registeredClient.getClientSecret());\n        entity.setClientSecretExpiresAt(registeredClient.getClientSecretExpiresAt());\n        entity.setClientName(registeredClient.getClientName());\n        entity.setClientAuthenticationMethods(StringUtils.collectionToCommaDelimitedString(clientAuthenticationMethods));\n        entity.setAuthorizationGrantTypes(StringUtils.collectionToCommaDelimitedString(authorizationGrantTypes));\n        entity.setRedirectUris(StringUtils.collectionToCommaDelimitedString(registeredClient.getRedirectUris()));\n        entity.setPostLogoutRedirectUris(StringUtils.collectionToCommaDelimitedString(registeredClient.getPostLogoutRedirectUris()));\n        entity.setScopes(StringUtils.collectionToCommaDelimitedString(registeredClient.getScopes()));\n        entity.setClientSettings(writeMap(registeredClient.getClientSettings().getSettings()));\n        entity.setTokenSettings(writeMap(registeredClient.getTokenSettings().getSettings()));\n\n        return entity;\n    }\n\n    private Map<String, Object> parseMap(String data) {\n        try {\n            return MAPPER.readValue(data, new TypeReference<>() {\n            });\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n    private String writeMap(Map<String, Object> data) {\n        try {\n            return MAPPER.writeValueAsString(data);\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n    private static AuthorizationGrantType resolveAuthorizationGrantType(String authorizationGrantType) {\n        if (AuthorizationGrantType.AUTHORIZATION_CODE.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.AUTHORIZATION_CODE;\n        } else if (AuthorizationGrantType.CLIENT_CREDENTIALS.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.CLIENT_CREDENTIALS;\n        } else if (AuthorizationGrantType.REFRESH_TOKEN.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.REFRESH_TOKEN;\n        }\n        // Custom authorization grant type\n        return new AuthorizationGrantType(authorizationGrantType);\n    }\n\n    private static ClientAuthenticationMethod resolveClientAuthenticationMethod(String clientAuthenticationMethod) {\n        if (ClientAuthenticationMethod.CLIENT_SECRET_BASIC.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.CLIENT_SECRET_BASIC;\n        } else if (ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.CLIENT_SECRET_POST;\n        } else if (ClientAuthenticationMethod.NONE.getValue().equals(clientAuthenticationMethod)) {\n            return ClientAuthenticationMethod.NONE;\n        }\n        // Custom client authentication method\n        return new ClientAuthenticationMethod(clientAuthenticationMethod);\n    }\n\n    /**\n     * \u5bb9\u5668\u542f\u52a8\u540e\u521d\u59cb\u5316\u5ba2\u6237\u7aef\n     * (\u4e0d\u9700\u8981\u53ef\u5220\u9664)\n     */\n    @PostConstruct\n    public void initClients() {\n        log.info("Initialize client information to Redis.");\n        // \u9ed8\u8ba4\u9700\u8981\u6388\u6743\u786e\u8ba4\n        ClientSettings.Builder builder = ClientSettings.builder()\n                .requireAuthorizationConsent(Boolean.TRUE);\n\n        TokenSettings tokenSettings = TokenSettings.builder()\n                // \u81ea\u5305\u542btoken(jwt)\n                .accessTokenFormat(OAuth2TokenFormat.SELF_CONTAINED)\n                // Access Token \u5b58\u6d3b\u65f6\u95f4\uff1a2\u5c0f\u65f6\n                .accessTokenTimeToLive(Duration.ofHours(2L))\n                // \u6388\u6743\u7801\u5b58\u6d3b\u65f6\u95f4\uff1a5\u5206\u949f\n                .authorizationCodeTimeToLive(Duration.ofMinutes(5L))\n                // \u8bbe\u5907\u7801\u5b58\u6d3b\u65f6\u95f4\uff1a5\u5206\u949f\n                .deviceCodeTimeToLive(Duration.ofMinutes(5L))\n                // Refresh Token \u5b58\u6d3b\u65f6\u95f4\uff1a7\u5929\n                .refreshTokenTimeToLive(Duration.ofDays(7L))\n                // \u5237\u65b0 Access Token \u540e\u662f\u5426\u91cd\u7528 Refresh Token\n                .reuseRefreshTokens(Boolean.TRUE)\n                // \u8bbe\u7f6e Id Token \u52a0\u5bc6\u65b9\u5f0f\n                .idTokenSignatureAlgorithm(SignatureAlgorithm.RS256)\n                .build();\n\n        // \u6b63\u5e38\u6388\u6743\u7801\u5ba2\u6237\u7aef\n        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                // \u5ba2\u6237\u7aefid\n                .clientId("messaging-client")\n                // \u5ba2\u6237\u7aef\u540d\u79f0\n                .clientName("\u6388\u6743\u7801")\n                // \u5ba2\u6237\u7aef\u79d8\u94a5\uff0c\u4f7f\u7528\u5bc6\u7801\u89e3\u6790\u5668\u52a0\u5bc6\n                .clientSecret(passwordEncoder.encode("123456"))\n                // \u5ba2\u6237\u7aef\u8ba4\u8bc1\u65b9\u5f0f\uff0c\u57fa\u4e8e\u8bf7\u6c42\u5934\u7684\u8ba4\u8bc1\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                // \u914d\u7f6e\u8d44\u6e90\u670d\u52a1\u5668\u4f7f\u7528\u8be5\u5ba2\u6237\u7aef\u83b7\u53d6\u6388\u6743\u65f6\u652f\u6301\u7684\u65b9\u5f0f\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n                // \u6388\u6743\u7801\u6a21\u5f0f\u56de\u8c03\u5730\u5740\uff0coauth2.1\u5df2\u6539\u4e3a\u7cbe\u51c6\u5339\u914d\uff0c\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u57df\u540d\uff0c\u5e76\u4e14\u5c4f\u853d\u4e86localhost\uff0c\u672c\u673a\u4f7f\u7528127.0.0.1\u8bbf\u95ee\n                .redirectUri("http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc")\n                .redirectUri("https://www.baidu.com")\n                // \u8be5\u5ba2\u6237\u7aef\u7684\u6388\u6743\u8303\u56f4\uff0cOPENID\u4e0ePROFILE\u662fIdToken\u7684scope\uff0c\u83b7\u53d6\u6388\u6743\u65f6\u8bf7\u6c42OPENID\u7684scope\u65f6\u8ba4\u8bc1\u670d\u52a1\u4f1a\u8fd4\u56deIdToken\n                .scope(OidcScopes.OPENID)\n                .scope(OidcScopes.PROFILE)\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // \u5ba2\u6237\u7aef\u8bbe\u7f6e\uff0c\u8bbe\u7f6e\u7528\u6237\u9700\u8981\u786e\u8ba4\u6388\u6743\n                .clientSettings(builder.build())\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettings)\n                .build();\n\n        // \u8bbe\u5907\u7801\u6388\u6743\u5ba2\u6237\u7aef\n        RegisteredClient deviceClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                .clientId("device-message-client")\n                .clientName("\u666e\u901a\u516c\u5171\u5ba2\u6237\u7aef")\n                // \u516c\u5171\u5ba2\u6237\u7aef\n                .clientAuthenticationMethod(ClientAuthenticationMethod.NONE)\n                // \u8bbe\u5907\u7801\u6388\u6743\n                .authorizationGrantType(AuthorizationGrantType.DEVICE_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettings)\n                .build();\n\n        // PKCE\u5ba2\u6237\u7aef\n        RegisteredClient pkceClient = RegisteredClient.withId(UUID.randomUUID().toString())\n                .clientId("pkce-message-client")\n                .clientName("PKCE\u6d41\u7a0b")\n                // \u516c\u5171\u5ba2\u6237\u7aef\n                .clientAuthenticationMethod(ClientAuthenticationMethod.NONE)\n                // \u8bbe\u5907\u7801\u6388\u6743\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                // \u6388\u6743\u7801\u6a21\u5f0f\u56de\u8c03\u5730\u5740\uff0coauth2.1\u5df2\u6539\u4e3a\u7cbe\u51c6\u5339\u914d\uff0c\u4e0d\u80fd\u53ea\u8bbe\u7f6e\u57df\u540d\uff0c\u5e76\u4e14\u5c4f\u853d\u4e86localhost\uff0c\u672c\u673a\u4f7f\u7528127.0.0.1\u8bbf\u95ee\n                .redirectUri("http://127.0.0.1:8000/login/oauth2/code/messaging-client-oidc")\n                // \u5f00\u542f PKCE \u6d41\u7a0b\n                .clientSettings(builder.requireProofKey(Boolean.TRUE).build())\n                // \u6307\u5b9ascope\n                .scope("message.read")\n                .scope("message.write")\n                // token\u76f8\u5173\u914d\u7f6e\n                .tokenSettings(tokenSettings)\n                .build();\n\n        // \u521d\u59cb\u5316\u5ba2\u6237\u7aef\n        this.save(registeredClient);\n        this.save(deviceClient);\n        this.save(pkceClient);\n    }\n\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"\u7c7b\u4e2d\u521d\u59cb\u5316\u5ba2\u6237\u7aef\u4fe1\u606f\u7684\u64cd\u4f5c\u9488\u5bf9\u7b2c\u4e00\u6b21\u4f7f\u7528\u542f\u52a8\u7684\u9879\u76ee\uff0c\u540c\u65f6\u6bcf\u6b21\u542f\u52a8\u4e5f\u662f\u66f4\u65b0\u5ba2\u6237\u7aef\u7684\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8bfb\u8005\u53ef\u81ea\u884c\u53bb\u9664\u3002"}),"\n",(0,i.jsx)(t.h4,{id:"2-\u6388\u6743\u4fe1\u606f\u7684service",children:"2. \u6388\u6743\u4fe1\u606f\u7684service"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.service.impl;\n\nimport com.example.entity.security.RedisOAuth2Authorization;\nimport com.example.repository.RedisOAuth2AuthorizationRepository;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.Module;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.dao.DataRetrievalFailureException;\nimport org.springframework.security.jackson2.SecurityJackson2Modules;\nimport org.springframework.security.oauth2.core.*;\nimport org.springframework.security.oauth2.core.endpoint.OAuth2ParameterNames;\nimport org.springframework.security.oauth2.core.oidc.OidcIdToken;\nimport org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;\nimport org.springframework.security.oauth2.server.authorization.OAuth2Authorization;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationCode;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;\nimport org.springframework.security.oauth2.server.authorization.OAuth2TokenType;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\nimport org.springframework.security.oauth2.server.authorization.jackson2.OAuth2AuthorizationServerJackson2Module;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.util.*;\nimport java.util.function.Consumer;\n\n/**\n * \u57fa\u4e8eredis\u7684\u6388\u6743\u7ba1\u7406\u670d\u52a1\n *\n * @author vains\n */\n@Service\n@RequiredArgsConstructor\npublic class RedisOAuth2AuthorizationService implements OAuth2AuthorizationService {\n\n    private final RegisteredClientRepository registeredClientRepository;\n\n    private final RedisOAuth2AuthorizationRepository oAuth2AuthorizationRepository;\n\n    private final static ObjectMapper MAPPER = new ObjectMapper();\n\n    static {\n        // \u521d\u59cb\u5316\u5e8f\u5217\u5316\u914d\u7f6e\n        ClassLoader classLoader = RedisOAuth2AuthorizationService.class.getClassLoader();\n        // \u52a0\u8f7dsecurity\u63d0\u4f9b\u7684Modules\n        List<Module> modules = SecurityJackson2Modules.getModules(classLoader);\n        MAPPER.registerModules(modules);\n        // \u52a0\u8f7dAuthorization Server\u63d0\u4f9b\u7684Module\n        MAPPER.registerModule(new OAuth2AuthorizationServerJackson2Module());\n    }\n\n    @Override\n    public void save(OAuth2Authorization authorization) {\n        Optional<RedisOAuth2Authorization> existingAuthorization = oAuth2AuthorizationRepository.findById(authorization.getId());\n\n        // \u5982\u679c\u5df2\u5b58\u5728\u5219\u5220\u9664\u540e\u518d\u4fdd\u5b58\n        existingAuthorization.map(RedisOAuth2Authorization::getId)\n                .ifPresent(oAuth2AuthorizationRepository::deleteById);\n\n        // \u8fc7\u671f\u65f6\u95f4\uff0c\u9ed8\u8ba4\u6c38\u4e0d\u8fc7\u671f\n        long maxTimeout = -1L;\n        // \u6240\u6709code\u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u65b9\u4fbf\u8ba1\u7b97\u6700\u5927\u503c\n        List<Instant> expiresAtList = new ArrayList<>();\n\n        RedisOAuth2Authorization entity = toEntity(authorization);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getAuthorizationCodeExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getAccessTokenExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getRefreshTokenExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getOidcIdTokenExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getUserCodeExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u5982\u679c\u6709\u8fc7\u671f\u65f6\u95f4\u5c31\u5b58\u5165\n        Optional.ofNullable(entity.getDeviceCodeExpiresAt())\n                .ifPresent(expiresAtList::add);\n\n        // \u83b7\u53d6\u6700\u5927\u7684\u65e5\u671f\n        Optional<Instant> maxInstant = expiresAtList.stream().max(Comparator.comparing(Instant::getEpochSecond));\n        if (maxInstant.isPresent()) {\n            // \u8ba1\u7b97\u65f6\u95f4\u5dee\n            Duration between = Duration.between(Instant.now(), maxInstant.get());\n            // \u8f6c\u4e3a\u5206\u949f\n            maxTimeout = between.toMinutes();\n        }\n\n        // \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\n        entity.setTimeout(maxTimeout);\n\n        // \u4fdd\u5b58\u81f3redis\n        oAuth2AuthorizationRepository.save(entity);\n    }\n\n    @Override\n    public void remove(OAuth2Authorization authorization) {\n        Assert.notNull(authorization, "authorization cannot be null");\n        oAuth2AuthorizationRepository.deleteById(authorization.getId());\n    }\n\n    @Override\n    public OAuth2Authorization findById(String id) {\n        Assert.hasText(id, "id cannot be empty");\n        return oAuth2AuthorizationRepository.findById(id)\n                .map(this::toObject).orElse(null);\n    }\n\n    @Override\n    public OAuth2Authorization findByToken(String token, OAuth2TokenType tokenType) {\n        Assert.hasText(token, "token cannot be empty");\n\n        Optional<RedisOAuth2Authorization> result;\n\n        if (tokenType == null) {\n            result = oAuth2AuthorizationRepository.findByState(token)\n                    .or(() -> oAuth2AuthorizationRepository.findByAuthorizationCodeValue(token))\n                    .or(() -> oAuth2AuthorizationRepository.findByAccessTokenValue(token))\n                    .or(() -> oAuth2AuthorizationRepository.findByOidcIdTokenValue(token))\n                    .or(() -> oAuth2AuthorizationRepository.findByRefreshTokenValue(token))\n                    .or(() -> oAuth2AuthorizationRepository.findByUserCodeValue(token))\n                    .or(() -> oAuth2AuthorizationRepository.findByDeviceCodeValue(token));\n        } else if (OAuth2ParameterNames.STATE.equals(tokenType.getValue())) {\n            result = oAuth2AuthorizationRepository.findByState(token);\n        } else if (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) {\n            result = oAuth2AuthorizationRepository.findByAuthorizationCodeValue(token);\n        } else if (OAuth2TokenType.ACCESS_TOKEN.equals(tokenType)) {\n            result = oAuth2AuthorizationRepository.findByAccessTokenValue(token);\n        } else if (OidcParameterNames.ID_TOKEN.equals(tokenType.getValue())) {\n            result = oAuth2AuthorizationRepository.findByOidcIdTokenValue(token);\n        } else if (OAuth2TokenType.REFRESH_TOKEN.equals(tokenType)) {\n            result = oAuth2AuthorizationRepository.findByRefreshTokenValue(token);\n        } else if (OAuth2ParameterNames.USER_CODE.equals(tokenType.getValue())) {\n            result = oAuth2AuthorizationRepository.findByUserCodeValue(token);\n        } else if (OAuth2ParameterNames.DEVICE_CODE.equals(tokenType.getValue())) {\n            result = oAuth2AuthorizationRepository.findByDeviceCodeValue(token);\n        } else {\n            result = Optional.empty();\n        }\n\n        return result.map(this::toObject).orElse(null);\n    }\n\n    /**\n     * \u5c06redis\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\u8f6c\u4e3a\u6846\u67b6\u6240\u9700\u7684\u7c7b\u578b\n     *\n     * @param entity redis\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\n     * @return \u6846\u67b6\u6240\u9700\u7684\u7c7b\u578b\n     */\n    private OAuth2Authorization toObject(RedisOAuth2Authorization entity) {\n        RegisteredClient registeredClient = this.registeredClientRepository.findById(entity.getRegisteredClientId());\n        if (registeredClient == null) {\n            throw new DataRetrievalFailureException(\n                    "The RegisteredClient with id \'" + entity.getRegisteredClientId() + "\' was not found in the RegisteredClientRepository.");\n        }\n\n        OAuth2Authorization.Builder builder = OAuth2Authorization.withRegisteredClient(registeredClient)\n                .id(entity.getId())\n                .principalName(entity.getPrincipalName())\n                .authorizationGrantType(resolveAuthorizationGrantType(entity.getAuthorizationGrantType()))\n                .authorizedScopes(StringUtils.commaDelimitedListToSet(entity.getAuthorizedScopes()))\n                .attributes(attributes -> attributes.putAll(parseMap(entity.getAttributes())));\n        if (entity.getState() != null) {\n            builder.attribute(OAuth2ParameterNames.STATE, entity.getState());\n        }\n\n        if (entity.getAuthorizationCodeValue() != null) {\n            OAuth2AuthorizationCode authorizationCode = new OAuth2AuthorizationCode(\n                    entity.getAuthorizationCodeValue(),\n                    entity.getAuthorizationCodeIssuedAt(),\n                    entity.getAuthorizationCodeExpiresAt());\n            builder.token(authorizationCode, metadata -> metadata.putAll(parseMap(entity.getAuthorizationCodeMetadata())));\n        }\n\n        if (entity.getAccessTokenValue() != null) {\n            OAuth2AccessToken accessToken = new OAuth2AccessToken(\n                    OAuth2AccessToken.TokenType.BEARER,\n                    entity.getAccessTokenValue(),\n                    entity.getAccessTokenIssuedAt(),\n                    entity.getAccessTokenExpiresAt(),\n                    StringUtils.commaDelimitedListToSet(entity.getAccessTokenScopes()));\n            builder.token(accessToken, metadata -> metadata.putAll(parseMap(entity.getAccessTokenMetadata())));\n        }\n\n        if (entity.getRefreshTokenValue() != null) {\n            OAuth2RefreshToken refreshToken = new OAuth2RefreshToken(\n                    entity.getRefreshTokenValue(),\n                    entity.getRefreshTokenIssuedAt(),\n                    entity.getRefreshTokenExpiresAt());\n            builder.token(refreshToken, metadata -> metadata.putAll(parseMap(entity.getRefreshTokenMetadata())));\n        }\n\n        if (entity.getOidcIdTokenValue() != null) {\n            OidcIdToken idToken = new OidcIdToken(\n                    entity.getOidcIdTokenValue(),\n                    entity.getOidcIdTokenIssuedAt(),\n                    entity.getOidcIdTokenExpiresAt(),\n                    parseMap(entity.getOidcIdTokenClaims()));\n            builder.token(idToken, metadata -> metadata.putAll(parseMap(entity.getOidcIdTokenMetadata())));\n        }\n\n        if (entity.getUserCodeValue() != null) {\n            OAuth2UserCode userCode = new OAuth2UserCode(\n                    entity.getUserCodeValue(),\n                    entity.getUserCodeIssuedAt(),\n                    entity.getUserCodeExpiresAt());\n            builder.token(userCode, metadata -> metadata.putAll(parseMap(entity.getUserCodeMetadata())));\n        }\n\n        if (entity.getDeviceCodeValue() != null) {\n            OAuth2DeviceCode deviceCode = new OAuth2DeviceCode(\n                    entity.getDeviceCodeValue(),\n                    entity.getDeviceCodeIssuedAt(),\n                    entity.getDeviceCodeExpiresAt());\n            builder.token(deviceCode, metadata -> metadata.putAll(parseMap(entity.getDeviceCodeMetadata())));\n        }\n\n        return builder.build();\n    }\n\n    /**\n     * \u5c06\u6846\u67b6\u6240\u9700\u7684\u7c7b\u578b\u8f6c\u4e3aredis\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\n     *\n     * @param authorization \u6846\u67b6\u6240\u9700\u7684\u7c7b\u578b\n     * @return redis\u4e2d\u5b58\u50a8\u7684\u7c7b\u578b\n     */\n    private RedisOAuth2Authorization toEntity(OAuth2Authorization authorization) {\n        RedisOAuth2Authorization entity = new RedisOAuth2Authorization();\n        entity.setId(authorization.getId());\n        entity.setRegisteredClientId(authorization.getRegisteredClientId());\n        entity.setPrincipalName(authorization.getPrincipalName());\n        entity.setAuthorizationGrantType(authorization.getAuthorizationGrantType().getValue());\n        entity.setAuthorizedScopes(StringUtils.collectionToDelimitedString(authorization.getAuthorizedScopes(), ","));\n        entity.setAttributes(writeMap(authorization.getAttributes()));\n        entity.setState(authorization.getAttribute(OAuth2ParameterNames.STATE));\n\n        OAuth2Authorization.Token<OAuth2AuthorizationCode> authorizationCode =\n                authorization.getToken(OAuth2AuthorizationCode.class);\n        setTokenValues(\n                authorizationCode,\n                entity::setAuthorizationCodeValue,\n                entity::setAuthorizationCodeIssuedAt,\n                entity::setAuthorizationCodeExpiresAt,\n                entity::setAuthorizationCodeMetadata\n        );\n\n        OAuth2Authorization.Token<OAuth2AccessToken> accessToken =\n                authorization.getToken(OAuth2AccessToken.class);\n        setTokenValues(\n                accessToken,\n                entity::setAccessTokenValue,\n                entity::setAccessTokenIssuedAt,\n                entity::setAccessTokenExpiresAt,\n                entity::setAccessTokenMetadata\n        );\n        if (accessToken != null && accessToken.getToken().getScopes() != null) {\n            entity.setAccessTokenScopes(StringUtils.collectionToDelimitedString(accessToken.getToken().getScopes(), ","));\n        }\n\n        OAuth2Authorization.Token<OAuth2RefreshToken> refreshToken =\n                authorization.getToken(OAuth2RefreshToken.class);\n        setTokenValues(\n                refreshToken,\n                entity::setRefreshTokenValue,\n                entity::setRefreshTokenIssuedAt,\n                entity::setRefreshTokenExpiresAt,\n                entity::setRefreshTokenMetadata\n        );\n\n        OAuth2Authorization.Token<OidcIdToken> oidcIdToken =\n                authorization.getToken(OidcIdToken.class);\n        setTokenValues(\n                oidcIdToken,\n                entity::setOidcIdTokenValue,\n                entity::setOidcIdTokenIssuedAt,\n                entity::setOidcIdTokenExpiresAt,\n                entity::setOidcIdTokenMetadata\n        );\n        if (oidcIdToken != null) {\n            entity.setOidcIdTokenClaims(writeMap(oidcIdToken.getClaims()));\n        }\n\n        OAuth2Authorization.Token<OAuth2UserCode> userCode =\n                authorization.getToken(OAuth2UserCode.class);\n        setTokenValues(\n                userCode,\n                entity::setUserCodeValue,\n                entity::setUserCodeIssuedAt,\n                entity::setUserCodeExpiresAt,\n                entity::setUserCodeMetadata\n        );\n\n        OAuth2Authorization.Token<OAuth2DeviceCode> deviceCode =\n                authorization.getToken(OAuth2DeviceCode.class);\n        setTokenValues(\n                deviceCode,\n                entity::setDeviceCodeValue,\n                entity::setDeviceCodeIssuedAt,\n                entity::setDeviceCodeExpiresAt,\n                entity::setDeviceCodeMetadata\n        );\n\n        return entity;\n    }\n\n    /**\n     * \u8bbe\u7f6etoken\u7684\u503c\n     *\n     * @param token              Token\u5b9e\u4f8b\n     * @param tokenValueConsumer set\u65b9\u6cd5\n     * @param issuedAtConsumer   set\u65b9\u6cd5\n     * @param expiresAtConsumer  set\u65b9\u6cd5\n     * @param metadataConsumer   set\u65b9\u6cd5\n     */\n    private void setTokenValues(\n            OAuth2Authorization.Token<?> token,\n            Consumer<String> tokenValueConsumer,\n            Consumer<Instant> issuedAtConsumer,\n            Consumer<Instant> expiresAtConsumer,\n            Consumer<String> metadataConsumer) {\n        if (token != null) {\n            OAuth2Token oAuth2Token = token.getToken();\n            tokenValueConsumer.accept(oAuth2Token.getTokenValue());\n            issuedAtConsumer.accept(oAuth2Token.getIssuedAt());\n            expiresAtConsumer.accept(oAuth2Token.getExpiresAt());\n            metadataConsumer.accept(writeMap(token.getMetadata()));\n        }\n    }\n\n    /**\n     * \u5904\u7406\u6388\u6743\u7533\u8bf7\u65f6\u7684 GrantType\n     *\n     * @param authorizationGrantType \u6388\u6743\u7533\u8bf7\u65f6\u7684 GrantType\n     * @return AuthorizationGrantType\u7684\u5b9e\u4f8b\n     */\n    private static AuthorizationGrantType resolveAuthorizationGrantType(String authorizationGrantType) {\n        if (AuthorizationGrantType.AUTHORIZATION_CODE.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.AUTHORIZATION_CODE;\n        } else if (AuthorizationGrantType.CLIENT_CREDENTIALS.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.CLIENT_CREDENTIALS;\n        } else if (AuthorizationGrantType.REFRESH_TOKEN.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.REFRESH_TOKEN;\n        } else if (AuthorizationGrantType.DEVICE_CODE.getValue().equals(authorizationGrantType)) {\n            return AuthorizationGrantType.DEVICE_CODE;\n        }\n        // Custom authorization grant type\n        return new AuthorizationGrantType(authorizationGrantType);\n    }\n\n    /**\n     * \u5c06json\u8f6c\u4e3amap\n     *\n     * @param data json\n     * @return map\u5bf9\u8c61\n     */\n    private Map<String, Object> parseMap(String data) {\n        try {\n            return MAPPER.readValue(data, new TypeReference<>() {\n            });\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n    /**\n     * \u5c06map\u5bf9\u8c61\u8f6c\u4e3ajson\u5b57\u7b26\u4e32\n     *\n     * @param metadata map\u5bf9\u8c61\n     * @return json\u5b57\u7b26\u4e32\n     */\n    private String writeMap(Map<String, Object> metadata) {\n        try {\n            return MAPPER.writeValueAsString(metadata);\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(ex.getMessage(), ex);\n        }\n    }\n\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"3-\u6388\u6743\u786e\u8ba4\u4fe1\u606f\u7684service",children:"3. \u6388\u6743\u786e\u8ba4\u4fe1\u606f\u7684service"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:'package com.example.service.impl;\n\nimport com.example.entity.security.RedisAuthorizationConsent;\nimport com.example.repository.RedisAuthorizationConsentRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.dao.DataRetrievalFailureException;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationConsent;\nimport org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationConsentService;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClient;\nimport org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * \u57fa\u4e8eredis\u7684\u6388\u6743\u786e\u8ba4\u670d\u52a1\u5b9e\u73b0\n *\n * @author vains\n */\n@Service\n@RequiredArgsConstructor\npublic class RedisOAuth2AuthorizationConsentService implements OAuth2AuthorizationConsentService {\n\n    private final RegisteredClientRepository registeredClientRepository;\n\n    private final RedisAuthorizationConsentRepository authorizationConsentRepository;\n\n    @Override\n    public void save(OAuth2AuthorizationConsent authorizationConsent) {\n        Assert.notNull(authorizationConsent, "authorizationConsent cannot be null");\n\n        // \u5982\u679c\u5b58\u5728\u5c31\u5148\u5220\u9664\n        this.authorizationConsentRepository.findByRegisteredClientIdAndPrincipalName(\n                        authorizationConsent.getRegisteredClientId(), authorizationConsent.getPrincipalName())\n                .ifPresent(existingConsent -> this.authorizationConsentRepository.deleteById(existingConsent.getId()));\n\n        // \u4fdd\u5b58\n        RedisAuthorizationConsent entity = toEntity(authorizationConsent);\n        entity.setId(UUID.randomUUID().toString());\n        this.authorizationConsentRepository.save(entity);\n    }\n\n    @Override\n    public void remove(OAuth2AuthorizationConsent authorizationConsent) {\n        Assert.notNull(authorizationConsent, "authorizationConsent cannot be null");\n        // \u5982\u679c\u5b58\u5728\u5c31\u5220\u9664\n        this.authorizationConsentRepository.findByRegisteredClientIdAndPrincipalName(\n                        authorizationConsent.getRegisteredClientId(), authorizationConsent.getPrincipalName())\n                .ifPresent(existingConsent -> this.authorizationConsentRepository.deleteById(existingConsent.getId()));\n    }\n\n    @Override\n    public OAuth2AuthorizationConsent findById(String registeredClientId, String principalName) {\n        Assert.hasText(registeredClientId, "registeredClientId cannot be empty");\n        Assert.hasText(principalName, "principalName cannot be empty");\n        return this.authorizationConsentRepository.findByRegisteredClientIdAndPrincipalName(\n                registeredClientId, principalName).map(this::toObject).orElse(null);\n    }\n\n    private OAuth2AuthorizationConsent toObject(RedisAuthorizationConsent authorizationConsent) {\n        String registeredClientId = authorizationConsent.getRegisteredClientId();\n        RegisteredClient registeredClient = this.registeredClientRepository.findById(registeredClientId);\n        if (registeredClient == null) {\n            throw new DataRetrievalFailureException(\n                    "The RegisteredClient with id \'" + registeredClientId + "\' was not found in the RegisteredClientRepository.");\n        }\n\n        OAuth2AuthorizationConsent.Builder builder = OAuth2AuthorizationConsent.withId(\n                registeredClientId, authorizationConsent.getPrincipalName());\n        if (authorizationConsent.getAuthorities() != null) {\n            for (String authority : StringUtils.commaDelimitedListToSet(authorizationConsent.getAuthorities())) {\n                builder.authority(new SimpleGrantedAuthority(authority));\n            }\n        }\n\n        return builder.build();\n    }\n\n    private RedisAuthorizationConsent toEntity(OAuth2AuthorizationConsent authorizationConsent) {\n        RedisAuthorizationConsent entity = new RedisAuthorizationConsent();\n        entity.setRegisteredClientId(authorizationConsent.getRegisteredClientId());\n        entity.setPrincipalName(authorizationConsent.getPrincipalName());\n\n        Set<String> authorities = new HashSet<>();\n        for (GrantedAuthority authority : authorizationConsent.getAuthorities()) {\n            authorities.add(authority.getAuthority());\n        }\n        entity.setAuthorities(StringUtils.collectionToCommaDelimitedString(authorities));\n\n        return entity;\n    }\n\n}\n'})}),"\n",(0,i.jsx)(t.h3,{id:"4-\u53bb\u9664\u8ba4\u8bc1\u670d\u52a1\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u4e09\u4e2a\u6838\u5fc3service\u7684\u6ce8\u5165",children:"4. \u53bb\u9664\u8ba4\u8bc1\u670d\u52a1\u914d\u7f6e\u6587\u4ef6\u4e2d\u8fd9\u4e09\u4e2a\u6838\u5fc3service\u7684\u6ce8\u5165"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"java\n/**\n * \u914d\u7f6e\u5ba2\u6237\u7aefRepository\n *\n * @param jdbcTemplate db \u6570\u636e\u6e90\u4fe1\u606f\n * @return \u57fa\u4e8e\u6570\u636e\u5e93\u7684repository\n */\n@Bean\npublic RegisteredClientRepository registeredClientRepository(JdbcTemplate jdbcTemplate) {\n    // \u57fa\u4e8edb\u5b58\u50a8\u5ba2\u6237\u7aef\uff0c\u8fd8\u6709\u4e00\u4e2a\u57fa\u4e8e\u5185\u5b58\u7684\u5b9e\u73b0 InMemoryRegisteredClientRepository\n    return new JdbcRegisteredClientRepository(jdbcTemplate);\n}\n\n/**\n * \u914d\u7f6e\u57fa\u4e8edb\u7684oauth2\u7684\u6388\u6743\u7ba1\u7406\u670d\u52a1\n *\n * @param jdbcTemplate               db\u6570\u636e\u6e90\u4fe1\u606f\n * @param registeredClientRepository \u4e0a\u8fb9\u6ce8\u5165\u7684\u5ba2\u6237\u7aefrepository\n * @return JdbcOAuth2AuthorizationService\n */\n@Bean\npublic OAuth2AuthorizationService authorizationService(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository) {\n    // \u57fa\u4e8edb\u7684oauth2\u8ba4\u8bc1\u670d\u52a1\uff0c\u8fd8\u6709\u4e00\u4e2a\u57fa\u4e8e\u5185\u5b58\u7684\u670d\u52a1\u5b9e\u73b0InMemoryOAuth2AuthorizationService\n    return new JdbcOAuth2AuthorizationService(jdbcTemplate, registeredClientRepository);\n}\n\n/**\n * \u914d\u7f6e\u57fa\u4e8edb\u7684\u6388\u6743\u786e\u8ba4\u7ba1\u7406\u670d\u52a1\n *\n * @param jdbcTemplate               db\u6570\u636e\u6e90\u4fe1\u606f\n * @param registeredClientRepository \u5ba2\u6237\u7aefrepository\n * @return JdbcOAuth2AuthorizationConsentService\n */\n@Bean\npublic OAuth2AuthorizationConsentService authorizationConsentService(JdbcTemplate jdbcTemplate, RegisteredClientRepository registeredClientRepository) {\n    // \u57fa\u4e8edb\u7684\u6388\u6743\u786e\u8ba4\u7ba1\u7406\u670d\u52a1\uff0c\u8fd8\u6709\u4e00\u4e2a\u57fa\u4e8e\u5185\u5b58\u7684\u670d\u52a1\u5b9e\u73b0InMemoryOAuth2AuthorizationConsentService\n    return new JdbcOAuth2AuthorizationConsentService(jdbcTemplate, registeredClientRepository);\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"\u4e94\u5199\u5728\u6700\u540e",children:"\u4e94\u3001\u5199\u5728\u6700\u540e"}),"\n",(0,i.jsx)(t.p,{children:"\xa0\xa0\xa0\xa0\u5230\u6b64\u4e3a\u6b62\u57fa\u672c\u5c31\u7ed3\u675f\u4e86\uff0c\u672c\u6587\u7ae0\u548c\u524d\u8fb9\u7684\u6240\u6709\u7cfb\u5217\u6587\u7ae0\u6ca1\u6709\u5fc5\u8981\u7684\u5173\u8054\uff0c\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u770b\u5230\u6587\u7ae0\u7684\u8bfb\u8005\u4e5f\u662f\u53ef\u4ee5\u5f88\u987a\u7545\u7684\u5c06\u6587\u7ae0\u4e2d\u7684\u5185\u5bb9\u5f15\u5165\u9879\u76ee\uff0c\u5f53\u7136\uff0c\u56e0\u4e3a\u5f15\u7528\u4e86Spring Data Redis\uff0c\u6240\u4ee5\u9879\u76ee\u5fc5\u987b\u8981\u5148\u6709Redis\u652f\u6301\u3002\n\u6587\u7ae0\u770b\u8d77\u6765\u5f88\u957f\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5c31\u662f\u5b9a\u4e49\u4e09\u4e2a\u5b9e\u4f53\u7c7b\uff0c\u5b9a\u4e49\u4e09\u4e2aRepository\uff0c\u7136\u540e\u5b9e\u73b0\u6838\u5fc3\u7684service\uff1b\u903b\u8f91\u5e76\u4e0d\u590d\u6742\uff0c\u64cd\u4f5cRedis\u7684\u5185\u5bb9\u56e0\u4e3a\u4f7f\u7528\u4e86Spring Data Repositories\uff0c\u6240\u4ee5\u8fd9\u4e24\u90e8\u5206\u5185\u5bb9\u5f88\u5c11\uff0c\u5185\u5bb9\u591a\u5f97\u5730\u65b9\u5c31\u5728\u6bcf\u4e2aservice\u4e2d\u5b9e\u4f53\u4e0e\u9ed8\u8ba4\u5b9e\u4f53\u7684\u8f6c\u6362\u4e2d\uff0c\u4e00\u5927\u5806\u7684\u8f6c\u6362\u5185\u5bb9\u5bfc\u81f4\u6587\u7ae0\u770b\u8d77\u6765\u5185\u5bb9\u5f88\u591a\uff0c\u4f46\u662f\u8fd9\u4e9b\u5185\u5bb9\u5728\u6587\u6863\u4e2d\u90fd\u5df2\u7ecf\u5b9e\u73b0\uff0c\u6240\u4ee5\u8bf4\u8fd9\u90e8\u5206\u5185\u5bb9\u76f4\u63a5Copy\u5c31\u884c\uff0c\u54c8\u54c8\u3002"}),"\n",(0,i.jsx)(t.h2,{id:"\u516d\u9644\u5f55",children:"\u516d\u3001\u9644\u5f55"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-authorization-server/docs/current/reference/html/guides/how-to-jpa.html#authorization-service",children:"How-to: Implement core services with JPA"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/",children:"Spring Data Redis"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories",children:"Redis Repositories"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories.expirations",children:"@TimeToLive"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis.repositories.indexes",children:"@Indexed"})}),"\n",(0,i.jsxs)(t.li,{children:["\u4ee3\u7801\u4ed3\u5e93\uff1a",(0,i.jsx)(t.a,{href:"https://gitee.com/vains-Sofia/authorization-example",children:"Gitee"}),"\u3001",(0,i.jsx)(t.a,{href:"https://github.com/vains-Sofia/authorization-example",children:"Github"})]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,r.ah)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},11151:(e,t,n)=>{n.d(t,{ah:()=>o});var i=n(67294);const r=i.createContext({});function o(e){const t=i.useContext(r);return i.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}}}]);